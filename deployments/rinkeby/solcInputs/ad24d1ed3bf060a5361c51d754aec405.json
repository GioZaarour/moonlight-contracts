{
  "language": "Solidity",
  "sources": {
    "contracts/abstract/EmergencyWithdrawable.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nabstract contract EmergencyWithdrawable is OwnableUpgradeable {\n    // for worst case scenarios or to recover funds from people sending to this contract by mistake\n    function emergencyWithdrawETH() external payable onlyOwner {\n        msg.sender.send(address(this).balance);\n    }\n\n    // for worst case scenarios or to recover funds from people sending to this contract by mistake\n    function emergencyWithdrawTokens(IERC20Upgradeable token) external onlyOwner {\n        token.transfer(msg.sender, token.balanceOf(address(this)));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/UnicStakingV6.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"./interfaces/IMintableCollection.sol\";\nimport \"./interfaces/IRewardable.sol\";\nimport \"./abstract/EmergencyWithdrawable.sol\";\nimport \"./UnicStakingERC721.sol\";\nimport \"./interfaces/IUnicFactory.sol\";\nimport \"./UnicSwap/interfaces/IERC20.sol\";\n\n// This upgrade:\n//   - fixes a bug in the withdrawal process\ncontract UnicStakingV6 is Initializable, EmergencyWithdrawable, IRewardable, PausableUpgradeable {\n    using SafeMath for uint256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    struct StakerInfo {\n        uint256 nftId;\n        uint256 amount;\n        uint256 stakeStartTime;\n        uint256 lockDays;\n        uint256 rewardDebt;\n        address rewardToken;\n        uint16 multiplier;\n    }\n\n    struct LockMultiplier {\n        uint16 multiplier;\n        bool exists;\n    }\n\n    struct RewardPool {\n        IERC20Upgradeable rewardToken;\n        uint256 stakedAmount;\n        uint256 stakedAmountWithMultipliers;\n        uint256 totalRewardAmount;\n        uint256 accRewardPerShare;\n        uint256 lastRewardAmount;\n    }\n\n    IERC20Upgradeable private stakingToken;\n    IMintableCollection private nftCollection;\n    uint256 public minStakeAmount;\n    uint256 private nftStartId;\n\n    // NFT ID to staker info\n    mapping(uint256 => StakerInfo) public stakes;\n\n    // Each uToken should have its own poolcontracts/UnicStaking.sol:115:9\n    mapping(address => RewardPool) public pools;\n\n    // Mapping from days => multiplier for timelock\n    mapping(uint256 => LockMultiplier) public lockMultipliers;\n\n    uint256 private constant DIV_PRECISION = 1e18;\n\n    event AddRewards(address indexed rewardToken, uint256 amount);\n    event Staked(\n        address indexed account,\n        address indexed rewardToken,\n        uint256 nftId,\n        uint256 amount,\n        uint256 lockDays\n    );\n    event Harvest(address indexed staker, address indexed rewardToken, uint256 nftId, uint256 amount);\n    event Withdraw(address indexed staker, address indexed rewardToken, uint256 nftId, uint256 amount);\n    event LogUpdateRewards(address indexed rewardToken, uint256 totalRewards, uint256 accRewardPerShare);\n\n    modifier poolExists(address rewardToken) {\n        require(address(pools[rewardToken].rewardToken) != address(0), \"UnicStaking: Pool does not exist\");\n        _;\n    }\n\n    modifier poolNotExists(address rewardToken) {\n        require(address(pools[rewardToken].rewardToken) == address(0), \"UnicStaking: Pool does already exist\");\n        _;\n    }\n\n    IUnicFactory private factory;\n\n    function initialize(\n        IERC20Upgradeable _stakingToken,\n        IMintableCollection _nftCollection,\n        uint256 _nftStartId,\n        uint256 _minStakeAmount\n    ) public initializer {\n        __Ownable_init();\n        stakingToken = _stakingToken;\n        nftCollection = _nftCollection;\n        nftStartId = _nftStartId;\n        minStakeAmount = _minStakeAmount;\n    }\n\n    function setUnicFactory(IUnicFactory _factory) external onlyOwner {\n        factory = _factory;\n    }\n\n    // lockdays are passed as seconds, multiplier in percentage from 100 (e.g. 170 for 70% on top)\n    function setLockMultiplier(uint256 lockDays, uint16 multiplier) external onlyOwner {\n        require(multiplier >= 100, \"Minimum multiplier = 100\");\n        lockMultipliers[lockDays] = LockMultiplier({\n        multiplier: multiplier,\n        exists: true\n        });\n    }\n\n    // lockdays are passed as seconds\n    function deleteLockMultiplier(uint256 lockDays) external onlyOwner {\n        delete lockMultipliers[lockDays];\n    }\n\n    function setMinStakeAmount(uint256 _minStakeAmount) external onlyOwner {\n        minStakeAmount = _minStakeAmount;\n    }\n\n    function setNftStartId(uint256 _nftStartId) external onlyOwner {\n        nftStartId = _nftStartId;\n    }\n\n    /**\n     * @param amount Amount of staking tokens\n     * @param lockDays How many days the staker wants to lock\n     * @param rewardToken The desired reward token to stake the tokens for (most likely a certain uToken)\n     */\n    function stake(uint256 amount, uint256 lockDays, address rewardToken)\n    external\n    whenNotPaused\n    poolExists(rewardToken)\n    {\n        require(\n            amount >= minStakeAmount,\n            \"UnicStaking: Amount must be greater than or equal to min stake amount\"\n        );\n        require(\n            lockMultipliers[lockDays].exists,\n            \"UnicStaking: Invalid number of lock days specified\"\n        );\n\n        updateRewards(rewardToken);\n\n        // transfer the staking tokens into the staking pool\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n\n        // now the data of the staker is persisted\n        StakerInfo storage staker = stakes[nftStartId];\n        staker.stakeStartTime = block.timestamp;\n        staker.amount = amount;\n        staker.lockDays = lockDays;\n        staker.multiplier = lockMultipliers[lockDays].multiplier;\n        staker.nftId = nftStartId;\n        staker.rewardToken = rewardToken;\n\n        RewardPool storage pool = pools[rewardToken];\n\n        // the amount with lock multiplier applied\n        uint256 virtualAmount = virtualAmount(staker.amount, staker.multiplier);\n        staker.rewardDebt = virtualAmount.mul(pool.accRewardPerShare).div(DIV_PRECISION);\n\n        pool.stakedAmount = pool.stakedAmount.add(amount);\n        pool.stakedAmountWithMultipliers = pool.stakedAmountWithMultipliers.add(virtualAmount);\n\n        nftStartId = nftStartId.add(1);\n        nftCollection.mint(msg.sender, nftStartId - 1);\n\n        emit Staked(msg.sender, rewardToken, nftStartId - 1, amount, lockDays);\n    }\n\n    function withdraw(uint256 nftId) external whenNotPaused {\n        StakerInfo storage staker = stakes[nftId];\n        require(address(staker.rewardToken) != address(0), \"UnicStaking: No staker exists\");\n        require(\n            nftCollection.ownerOf(nftId) == msg.sender,\n            \"UnicStaking: Only the owner may withdraw\"\n        );\n        require(\n            (staker.stakeStartTime.add(staker.lockDays)) < block.timestamp,\n            \"UnicStaking: Lock time not expired\"\n        );\n        updateRewards(staker.rewardToken);\n\n        RewardPool storage pool = pools[address(staker.rewardToken)];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        // lets burn the NFT first\n        nftCollection.burn(nftId);\n\n        uint256 virtualAmount = virtualAmount(staker.amount, staker.multiplier);\n\n        uint256 accumulated = virtualAmount.mul(pool.accRewardPerShare).div(DIV_PRECISION);\n        uint256 reward = accumulated.sub(staker.rewardDebt);\n\n        // reset the pool props\n        pool.stakedAmount = pool.stakedAmount.sub(staker.amount);\n        pool.stakedAmountWithMultipliers = pool.stakedAmountWithMultipliers.sub(virtualAmount);\n\n        uint256 staked = staker.amount;\n\n        // reset all staker props\n        staker.rewardDebt = 0;\n        staker.amount = 0;\n        staker.stakeStartTime = 0;\n        staker.lockDays = 0;\n        staker.nftId = 0;\n        staker.rewardToken = address(0);\n\n        stakingToken.safeTransfer(msg.sender, staked);\n        if (reward > 0) {\n            pool.rewardToken.safeTransfer(msg.sender, reward);\n        }\n\n        emit Harvest(msg.sender, address(pool.rewardToken), nftId, reward);\n        emit Withdraw(msg.sender, address(stakingToken), nftId, staked);\n    }\n\n    function updateRewards(address rewardToken) private poolExists(rewardToken) {\n        RewardPool storage pool = pools[rewardToken];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        if (pool.totalRewardAmount > pool.lastRewardAmount) {\n            if (pool.stakedAmountWithMultipliers > 0) {\n                uint256 reward = pool.totalRewardAmount.sub(pool.lastRewardAmount);\n                pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(DIV_PRECISION).div(pool.stakedAmountWithMultipliers));\n            }\n            pool.lastRewardAmount = pool.totalRewardAmount;\n            emit LogUpdateRewards(rewardToken, pool.lastRewardAmount, pool.accRewardPerShare);\n        }\n    }\n\n    function createPool(address rewardToken) external poolNotExists(rewardToken) {\n        require(\n            rewardToken == 0x94E0BAb2F6Ab1F19F4750E42d7349f2740513aD5 || // UNIC\n            rewardToken == 0x3d9233F15BB93C78a4f07B5C5F7A018630217cB3 || // first uToken (Unicly Genesis uUNICLY)\n            factory.getUToken(rewardToken) > 0,\n            \"UnicStakingV2: rewardToken must be UNIC or uToken\"\n        );\n        RewardPool memory pool = RewardPool({\n        rewardToken: IERC20Upgradeable(rewardToken),\n        stakedAmount: 0,\n        stakedAmountWithMultipliers: 0,\n        totalRewardAmount: 0,\n        accRewardPerShare: 0,\n        lastRewardAmount: 0\n        });\n        pools[rewardToken] = pool;\n    }\n\n    function addRewards(address rewardToken, uint256 amount) override external poolExists(rewardToken) {\n        require(amount > 0, \"UnicStaking: Amount must be greater than zero\");\n        IERC20Upgradeable(rewardToken).safeTransferFrom(msg.sender, address(this), amount);\n        RewardPool storage pool = pools[rewardToken];\n        pool.totalRewardAmount = pool.totalRewardAmount.add(amount);\n        emit AddRewards(rewardToken, amount);\n    }\n\n    function harvest(uint256 nftId) external whenNotPaused {\n        StakerInfo storage staker = stakes[nftId];\n        require(staker.nftId > 0, \"UnicStaking: No staker exists\");\n        require(\n            nftCollection.ownerOf(nftId) == msg.sender,\n            \"UnicStaking: Only the owner may harvest\"\n        );\n\n        updateRewards(address(staker.rewardToken));\n\n        RewardPool memory pool = pools[address(staker.rewardToken)];\n        uint256 accumulated = virtualAmount(staker.amount, staker.multiplier).mul(pool.accRewardPerShare).div(DIV_PRECISION);\n\n        uint256 reward;\n        // this needs to be considered due to roundings in reward calculation\n        if (accumulated > staker.rewardDebt) {\n            reward = accumulated.sub(staker.rewardDebt);\n        }\n\n        staker.rewardDebt = accumulated;\n\n        pool.rewardToken.safeTransfer(msg.sender, reward);\n        emit Harvest(msg.sender, address(staker.rewardToken), nftId, reward);\n    }\n\n    function pendingReward(uint256 nftId) external view returns (uint256) {\n        StakerInfo memory staker = stakes[nftId];\n        require(staker.nftId > 0, \"StakingPool: No staker exists\");\n\n        RewardPool memory pool = pools[address(staker.rewardToken)];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        uint256 accRewardPerShare = pool.accRewardPerShare;\n        // run a part from the updateRewards logic but don't persist anything\n        if (pool.totalRewardAmount > pool.lastRewardAmount) {\n            if (pool.stakedAmountWithMultipliers > 0) {\n                uint256 reward = pool.totalRewardAmount.sub(pool.lastRewardAmount);\n                accRewardPerShare = pool.accRewardPerShare.add(reward.mul(DIV_PRECISION).div(pool.stakedAmountWithMultipliers));\n            }\n        }\n\n        uint256 accumulated = virtualAmount(staker.amount, staker.multiplier).mul(accRewardPerShare).div(DIV_PRECISION);\n\n        // this can happen due to roundings in the reward calculation\n        if (staker.rewardDebt > accumulated) {\n            return 0;\n        }\n        return accumulated.sub(staker.rewardDebt);\n    }\n\n    // returns the virtual amount after having a multiplier applied\n    function virtualAmount(uint256 amount, uint256 multiplier) private view returns (uint256) {\n        return amount.mul(multiplier.mul(DIV_PRECISION).div(100)).div(DIV_PRECISION);\n    }\n\n    // returns the stake with multiplier for an nftId\n    function getStakeWithMultiplier(uint256 nftId) external view returns (uint256 stakeWithMultiplier){\n        StakerInfo memory staker = stakes[nftId];\n        stakeWithMultiplier = virtualAmount(staker.amount, staker.multiplier);\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    function getStakingToken() external view returns (address) {\n        return address(stakingToken);\n    }\n\n    // The initial deployment was done using UNIC as the staking token. We actually want to use xUNIC. That's why we\n    // needed to add this setter.\n    function setStakingToken(IERC20Upgradeable _stakingToken) external onlyOwner {\n        stakingToken = _stakingToken;\n    }\n\n    // See doc of `setStakingToken`. This allows an emergency withdrawal of staked UNIC.\n    function emergencyWithdrawStakes(uint256 nftId, address receiver, IERC20Upgradeable _stakingToken) external onlyOwner {\n        StakerInfo storage staker = stakes[nftId];\n        require(staker.nftId > 0, \"UnicStaking: No staker exists\");\n\n        updateRewards(staker.rewardToken);\n\n        RewardPool storage pool = pools[address(staker.rewardToken)];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        uint256 virtualAmount = virtualAmount(staker.amount, staker.multiplier);\n\n        uint256 accumulated = virtualAmount.mul(pool.accRewardPerShare).div(DIV_PRECISION);\n        uint256 reward = accumulated.sub(staker.rewardDebt);\n\n        // reset the pool props\n        pool.stakedAmount = pool.stakedAmount.sub(staker.amount);\n        pool.stakedAmountWithMultipliers = pool.stakedAmountWithMultipliers.sub(virtualAmount);\n\n        uint256 staked = staker.amount;\n\n        // reset all staker props\n        staker.rewardDebt = 0;\n        staker.amount = 0;\n        staker.stakeStartTime = 0;\n        staker.lockDays = 0;\n        staker.nftId = 0;\n        staker.rewardToken = address(0);\n\n        _stakingToken.safeTransfer(receiver, staked);\n        if (reward > 0) {\n            pool.rewardToken.safeTransfer(receiver, reward);\n        }\n\n        emit Harvest(receiver, address(pool.rewardToken), nftId, reward);\n        emit Withdraw(receiver, address(_stakingToken), nftId, staked);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n    using AddressUpgradeable for address;\n\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/interfaces/IMintableCollection.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IMintableCollection is IERC721 {\n    function burn(uint256 tokenId) external;\n    function mint(address to, uint256 tokenId) external;\n}\n"
    },
    "contracts/interfaces/IRewardable.sol": {
      "content": "pragma solidity 0.6.12;\n\ninterface IRewardable {\n    function addRewards(address rewardToken, uint256 amount) external;\n}\n"
    },
    "contracts/UnicStakingERC721.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"./interfaces/IMintableCollection.sol\";\n\ncontract UnicStakingERC721 is AccessControl, ERC721, IMintableCollection {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        string memory baseURI\n    ) public ERC721(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _setupRole(MINTER_ROLE, _msgSender());\n    }\n\n    function burn(uint256 tokenId) public override virtual {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"UnicStakingERC721: caller is not owner nor approved\"\n        );\n        _burn(tokenId);\n    }\n\n    function setBaseURI(string memory baseURI) public {\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\n            \"UnicStakingERC721: must have admin role to change baseUri\"\n        );\n        _setBaseURI(baseURI);\n    }\n\n    function mint(address to, uint256 tokenId) public override virtual {\n        require(\n            hasRole(MINTER_ROLE, _msgSender()),\n            \"UnicStakingERC721: must have minter role to mint\"\n        );\n\n        _mint(to, tokenId);\n    }\n}\n"
    },
    "contracts/interfaces/IUnicFactory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUnicFactory {\n    event TokenCreated(address indexed caller, address indexed uToken);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function converterImplementation() external view returns (address);\n\n    function getUToken(address uToken) external view returns (uint);\n    function uTokens(uint) external view returns (address);\n    function uTokensLength() external view returns (uint);\n    function getGovernorAlpha(address uToken) external view returns (address);\n    function feeDivisor() external view returns (uint);\n    function auctionHandler() external view returns (address);\n    function vaultManager() external view returns (address);\n    function uTokenSupply() external view returns (uint);\n\n    function createUToken(\n        string calldata name,\n        string calldata symbol,\n        address proxyTransactionFactory,\n        bool enableProxyTransactions\n    ) external returns (address, address);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n    function setConverterImplementation(address) external;\n    function setFeeDivisor(uint) external;\n    function setAuctionHandler(address) external;\n    function setVaultManager(address) external;\n    function setSupply(uint) external;\n}\n"
    },
    "contracts/UnicSwap/interfaces/IERC20.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/EnumerableSet.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC721.sol\";\nimport \"./IERC721Metadata.sol\";\nimport \"./IERC721Enumerable.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"../../introspection/ERC165.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/EnumerableSet.sol\";\nimport \"../../utils/EnumerableMap.sol\";\nimport \"../../utils/Strings.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\n    using SafeMath for uint256;\n    using Address for address;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n    using Strings for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMap.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping (uint256 => string) private _tokenURIs;\n\n    // Base URI\n    string private _baseURI;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _holderTokens[owner].length();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(base, tokenId.toString()));\n    }\n\n    /**\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\n    * to the token ID if no specific URI is set for that token ID.\n    */\n    function baseURI() public view virtual returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        return _holderTokens[owner].at(index);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n        return _tokenOwners.length();\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        (uint256 tokenId, ) = _tokenOwners.at(index);\n        return tokenId;\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _tokenOwners.contains(tokenId);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     d*\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId); // internal owner\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        _holderTokens[owner].remove(tokenId);\n\n        _tokenOwners.remove(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\"); // internal owner\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _holderTokens[from].remove(tokenId);\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\n            IERC721Receiver(to).onERC721Received.selector,\n            _msgSender(),\n            from,\n            tokenId,\n            _data\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\n        bytes4 retval = abi.decode(returndata, (bytes4));\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, \"EnumerableMap: nonexistent key\"); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/UnicStakingV5.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"./interfaces/IMintableCollection.sol\";\nimport \"./interfaces/IRewardable.sol\";\nimport \"./abstract/EmergencyWithdrawable.sol\";\nimport \"./UnicStakingERC721.sol\";\nimport \"./interfaces/IUnicFactory.sol\";\nimport \"./UnicSwap/interfaces/IERC20.sol\";\n\n// This upgrade:\n//   - adds the `stakingToken` as a parameter to the emergencyWithdrawStakes function to claim tokens that don't match\n//     the current `stakingToken`\n//   - also it fixes a bug in the `pendingReward` calculation\ncontract UnicStakingV5 is Initializable, EmergencyWithdrawable, IRewardable, PausableUpgradeable {\n    using SafeMath for uint256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    struct StakerInfo {\n        uint256 nftId;\n        uint256 amount;\n        uint256 stakeStartTime;\n        uint256 lockDays;\n        uint256 rewardDebt;\n        address rewardToken;\n        uint16 multiplier;\n    }\n\n    struct LockMultiplier {\n        uint16 multiplier;\n        bool exists;\n    }\n\n    struct RewardPool {\n        IERC20Upgradeable rewardToken;\n        uint256 stakedAmount;\n        uint256 stakedAmountWithMultipliers;\n        uint256 totalRewardAmount;\n        uint256 accRewardPerShare;\n        uint256 lastRewardAmount;\n    }\n\n    IERC20Upgradeable private stakingToken;\n    IMintableCollection private nftCollection;\n    uint256 public minStakeAmount;\n    uint256 private nftStartId;\n\n    // NFT ID to staker info\n    mapping(uint256 => StakerInfo) public stakes;\n\n    // Each uToken should have its own poolcontracts/UnicStaking.sol:115:9\n    mapping(address => RewardPool) public pools;\n\n    // Mapping from days => multiplier for timelock\n    mapping(uint256 => LockMultiplier) public lockMultipliers;\n\n    uint256 private constant DIV_PRECISION = 1e18;\n\n    event AddRewards(address indexed rewardToken, uint256 amount);\n    event Staked(\n        address indexed account,\n        address indexed rewardToken,\n        uint256 nftId,\n        uint256 amount,\n        uint256 lockDays\n    );\n    event Harvest(address indexed staker, address indexed rewardToken, uint256 nftId, uint256 amount);\n    event Withdraw(address indexed staker, address indexed rewardToken, uint256 nftId, uint256 amount);\n    event LogUpdateRewards(address indexed rewardToken, uint256 totalRewards, uint256 accRewardPerShare);\n\n    modifier poolExists(address rewardToken) {\n        require(address(pools[rewardToken].rewardToken) != address(0), \"UnicStaking: Pool does not exist\");\n        _;\n    }\n\n    modifier poolNotExists(address rewardToken) {\n        require(address(pools[rewardToken].rewardToken) == address(0), \"UnicStaking: Pool does already exist\");\n        _;\n    }\n\n    IUnicFactory private factory;\n\n    function initialize(\n        IERC20Upgradeable _stakingToken,\n        IMintableCollection _nftCollection,\n        uint256 _nftStartId,\n        uint256 _minStakeAmount\n    ) public initializer {\n        __Ownable_init();\n        stakingToken = _stakingToken;\n        nftCollection = _nftCollection;\n        nftStartId = _nftStartId;\n        minStakeAmount = _minStakeAmount;\n    }\n\n    function setUnicFactory(IUnicFactory _factory) external onlyOwner {\n        factory = _factory;\n    }\n\n    // lockdays are passed as seconds, multiplier in percentage from 100 (e.g. 170 for 70% on top)\n    function setLockMultiplier(uint256 lockDays, uint16 multiplier) external onlyOwner {\n        require(multiplier >= 100, \"Minimum multiplier = 100\");\n        lockMultipliers[lockDays] = LockMultiplier({\n            multiplier: multiplier,\n            exists: true\n        });\n    }\n\n    // lockdays are passed as seconds\n    function deleteLockMultiplier(uint256 lockDays) external onlyOwner {\n        delete lockMultipliers[lockDays];\n    }\n\n    function setMinStakeAmount(uint256 _minStakeAmount) external onlyOwner {\n        minStakeAmount = _minStakeAmount;\n    }\n\n    function setNftStartId(uint256 _nftStartId) external onlyOwner {\n        nftStartId = _nftStartId;\n    }\n\n    /**\n     * @param amount Amount of staking tokens\n     * @param lockDays How many days the staker wants to lock\n     * @param rewardToken The desired reward token to stake the tokens for (most likely a certain uToken)\n     */\n    function stake(uint256 amount, uint256 lockDays, address rewardToken)\n    external\n    whenNotPaused\n    poolExists(rewardToken)\n    {\n        require(\n            amount >= minStakeAmount,\n            \"UnicStaking: Amount must be greater than or equal to min stake amount\"\n        );\n        require(\n            lockMultipliers[lockDays].exists,\n            \"UnicStaking: Invalid number of lock days specified\"\n        );\n\n        updateRewards(rewardToken);\n\n        // transfer the staking tokens into the staking pool\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n\n        // now the data of the staker is persisted\n        StakerInfo storage staker = stakes[nftStartId];\n        staker.stakeStartTime = block.timestamp;\n        staker.amount = amount;\n        staker.lockDays = lockDays;\n        staker.multiplier = lockMultipliers[lockDays].multiplier;\n        staker.nftId = nftStartId;\n        staker.rewardToken = rewardToken;\n\n        RewardPool storage pool = pools[rewardToken];\n\n        // the amount with lock multiplier applied\n        uint256 virtualAmount = virtualAmount(staker.amount, staker.multiplier);\n        staker.rewardDebt = virtualAmount.mul(pool.accRewardPerShare).div(DIV_PRECISION);\n\n        pool.stakedAmount = pool.stakedAmount.add(amount);\n        pool.stakedAmountWithMultipliers = pool.stakedAmountWithMultipliers.add(virtualAmount);\n\n        nftStartId = nftStartId.add(1);\n        nftCollection.mint(msg.sender, nftStartId - 1);\n\n        emit Staked(msg.sender, rewardToken, nftStartId - 1, amount, lockDays);\n    }\n\n    function withdraw(uint256 nftId) external whenNotPaused {\n        StakerInfo storage staker = stakes[nftId];\n        require(address(staker.rewardToken) != address(0), \"UnicStaking: No staker exists\");\n        require(\n            nftCollection.ownerOf(nftId) == msg.sender,\n            \"UnicStaking: Only the owner may withdraw\"\n        );\n        require(\n            (staker.stakeStartTime.add(staker.lockDays)) < block.timestamp,\n            \"UnicStaking: Lock time not expired\"\n        );\n        updateRewards(staker.rewardToken);\n\n        RewardPool storage pool = pools[address(staker.rewardToken)];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        // lets burn the NFT first\n        nftCollection.burn(nftId);\n\n        uint256 virtualAmount = virtualAmount(staker.amount, staker.multiplier);\n\n        uint256 accumulated = virtualAmount.mul(pool.accRewardPerShare).div(DIV_PRECISION);\n        uint256 reward = accumulated.sub(staker.rewardDebt);\n\n        // reset the pool props\n        pool.stakedAmount = pool.stakedAmount.sub(staker.amount);\n        pool.stakedAmountWithMultipliers = pool.stakedAmountWithMultipliers.sub(virtualAmount);\n\n        uint256 staked = staker.amount;\n\n        // reset all staker props\n        staker.rewardDebt = 0;\n        staker.amount = 0;\n        staker.stakeStartTime = 0;\n        staker.lockDays = 0;\n        staker.nftId = 0;\n        staker.rewardToken = address(0);\n\n        stakingToken.safeTransfer(msg.sender, reward.add(staked));\n\n        emit Harvest(msg.sender, address(staker.rewardToken), nftId, reward);\n        emit Withdraw(msg.sender, address(staker.rewardToken), nftId, staked);\n    }\n\n    function updateRewards(address rewardToken) private poolExists(rewardToken) {\n        RewardPool storage pool = pools[rewardToken];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        if (pool.totalRewardAmount > pool.lastRewardAmount) {\n            if (pool.stakedAmountWithMultipliers > 0) {\n                uint256 reward = pool.totalRewardAmount.sub(pool.lastRewardAmount);\n                pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(DIV_PRECISION).div(pool.stakedAmountWithMultipliers));\n            }\n            pool.lastRewardAmount = pool.totalRewardAmount;\n            emit LogUpdateRewards(rewardToken, pool.lastRewardAmount, pool.accRewardPerShare);\n        }\n    }\n\n    function createPool(address rewardToken) external poolNotExists(rewardToken) {\n        require(\n            rewardToken == 0x94E0BAb2F6Ab1F19F4750E42d7349f2740513aD5 || // UNIC\n            rewardToken == 0x3d9233F15BB93C78a4f07B5C5F7A018630217cB3 || // first uToken (Unicly Genesis uUNICLY)\n            factory.getUToken(rewardToken) > 0,\n            \"UnicStakingV2: rewardToken must be UNIC or uToken\"\n        );\n        RewardPool memory pool = RewardPool({\n            rewardToken: IERC20Upgradeable(rewardToken),\n            stakedAmount: 0,\n            stakedAmountWithMultipliers: 0,\n            totalRewardAmount: 0,\n            accRewardPerShare: 0,\n            lastRewardAmount: 0\n        });\n        pools[rewardToken] = pool;\n    }\n\n    function addRewards(address rewardToken, uint256 amount) override external poolExists(rewardToken) {\n        require(amount > 0, \"UnicStaking: Amount must be greater than zero\");\n        IERC20Upgradeable(rewardToken).safeTransferFrom(msg.sender, address(this), amount);\n        RewardPool storage pool = pools[rewardToken];\n        pool.totalRewardAmount = pool.totalRewardAmount.add(amount);\n        emit AddRewards(rewardToken, amount);\n    }\n\n    function harvest(uint256 nftId) external whenNotPaused {\n        StakerInfo storage staker = stakes[nftId];\n        require(staker.nftId > 0, \"UnicStaking: No staker exists\");\n        require(\n            nftCollection.ownerOf(nftId) == msg.sender,\n            \"UnicStaking: Only the owner may harvest\"\n        );\n\n        updateRewards(address(staker.rewardToken));\n\n        RewardPool memory pool = pools[address(staker.rewardToken)];\n        uint256 accumulated = virtualAmount(staker.amount, staker.multiplier).mul(pool.accRewardPerShare).div(DIV_PRECISION);\n\n        uint256 reward;\n        // this needs to be considered due to roundings in reward calculation\n        if (accumulated > staker.rewardDebt) {\n            reward = accumulated.sub(staker.rewardDebt);\n        }\n\n        staker.rewardDebt = accumulated;\n\n        pool.rewardToken.safeTransfer(msg.sender, reward);\n        emit Harvest(msg.sender, address(staker.rewardToken), nftId, reward);\n    }\n\n    function pendingReward(uint256 nftId) external view returns (uint256) {\n        StakerInfo memory staker = stakes[nftId];\n        require(staker.nftId > 0, \"StakingPool: No staker exists\");\n\n        RewardPool memory pool = pools[address(staker.rewardToken)];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        uint256 accRewardPerShare = pool.accRewardPerShare;\n        // run a part from the updateRewards logic but don't persist anything\n        if (pool.totalRewardAmount > pool.lastRewardAmount) {\n            if (pool.stakedAmountWithMultipliers > 0) {\n                uint256 reward = pool.totalRewardAmount.sub(pool.lastRewardAmount);\n                accRewardPerShare = pool.accRewardPerShare.add(reward.mul(DIV_PRECISION).div(pool.stakedAmountWithMultipliers));\n            }\n        }\n\n        uint256 accumulated = virtualAmount(staker.amount, staker.multiplier).mul(accRewardPerShare).div(DIV_PRECISION);\n\n        // this can happen due to roundings in the reward calculation\n        if (staker.rewardDebt > accumulated) {\n            return 0;\n        }\n        return accumulated.sub(staker.rewardDebt);\n    }\n\n    // returns the virtual amount after having a multiplier applied\n    function virtualAmount(uint256 amount, uint256 multiplier) private view returns (uint256) {\n        return amount.mul(multiplier.mul(DIV_PRECISION).div(100)).div(DIV_PRECISION);\n    }\n\n    // returns the stake with multiplier for an nftId\n    function getStakeWithMultiplier(uint256 nftId) external view returns (uint256 stakeWithMultiplier){\n        StakerInfo memory staker = stakes[nftId];\n        stakeWithMultiplier = virtualAmount(staker.amount, staker.multiplier);\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    function getStakingToken() external view returns (address) {\n        return address(stakingToken);\n    }\n\n    // The initial deployment was done using UNIC as the staking token. We actually want to use xUNIC. That's why we\n    // needed to add this setter.\n    function setStakingToken(IERC20Upgradeable _stakingToken) external onlyOwner {\n        stakingToken = _stakingToken;\n    }\n\n    // See doc of `setStakingToken`. This allows an emergency withdrawal of staked UNIC.\n    function emergencyWithdrawStakes(uint256 nftId, address receiver, IERC20Upgradeable _stakingToken) external onlyOwner {\n        StakerInfo storage staker = stakes[nftId];\n        require(staker.nftId > 0, \"UnicStaking: No staker exists\");\n\n        updateRewards(staker.rewardToken);\n\n        RewardPool storage pool = pools[address(staker.rewardToken)];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        uint256 virtualAmount = virtualAmount(staker.amount, staker.multiplier);\n\n        uint256 accumulated = virtualAmount.mul(pool.accRewardPerShare).div(DIV_PRECISION);\n        uint256 reward = accumulated.sub(staker.rewardDebt);\n\n        // reset the pool props\n        pool.stakedAmount = pool.stakedAmount.sub(staker.amount);\n        pool.stakedAmountWithMultipliers = pool.stakedAmountWithMultipliers.sub(virtualAmount);\n\n        uint256 staked = staker.amount;\n\n        // reset all staker props\n        staker.rewardDebt = 0;\n        staker.amount = 0;\n        staker.stakeStartTime = 0;\n        staker.lockDays = 0;\n        staker.nftId = 0;\n        staker.rewardToken = address(0);\n\n        _stakingToken.safeTransfer(receiver, reward.add(staked));\n\n        emit Harvest(receiver, address(staker.rewardToken), nftId, reward);\n        emit Withdraw(receiver, address(staker.rewardToken), nftId, staked);\n    }\n}\n"
    },
    "contracts/UnicStakingV4.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"./interfaces/IMintableCollection.sol\";\nimport \"./interfaces/IRewardable.sol\";\nimport \"./abstract/EmergencyWithdrawable.sol\";\nimport \"./UnicStakingERC721.sol\";\nimport \"./interfaces/IUnicFactory.sol\";\n\n// This upgrade adds a getter/setter for the stakingToken + adds some emergency withdraw utilities\ncontract UnicStakingV4 is Initializable, EmergencyWithdrawable, IRewardable, PausableUpgradeable {\n    using SafeMath for uint256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    struct StakerInfo {\n        uint256 nftId;\n        uint256 amount;\n        uint256 stakeStartTime;\n        uint256 lockDays;\n        uint256 rewardDebt;\n        address rewardToken;\n        uint16 multiplier;\n    }\n\n    struct LockMultiplier {\n        uint16 multiplier;\n        bool exists;\n    }\n\n    struct RewardPool {\n        IERC20Upgradeable rewardToken;\n        uint256 stakedAmount;\n        uint256 stakedAmountWithMultipliers;\n        uint256 totalRewardAmount;\n        uint256 accRewardPerShare;\n        uint256 lastRewardAmount;\n    }\n\n    IERC20Upgradeable private stakingToken;\n    IMintableCollection private nftCollection;\n    uint256 public minStakeAmount;\n    uint256 private nftStartId;\n\n    // NFT ID to staker info\n    mapping(uint256 => StakerInfo) public stakes;\n\n    // Each uToken should have its own poolcontracts/UnicStaking.sol:115:9\n    mapping(address => RewardPool) public pools;\n\n    // Mapping from days => multiplier for timelock\n    mapping(uint256 => LockMultiplier) public lockMultipliers;\n\n    uint256 private constant DIV_PRECISION = 1e18;\n\n    event AddRewards(address indexed rewardToken, uint256 amount);\n    event Staked(\n        address indexed account,\n        address indexed rewardToken,\n        uint256 nftId,\n        uint256 amount,\n        uint256 lockDays\n    );\n    event Harvest(address indexed staker, address indexed rewardToken, uint256 nftId, uint256 amount);\n    event Withdraw(address indexed staker, address indexed rewardToken, uint256 nftId, uint256 amount);\n    event LogUpdateRewards(address indexed rewardToken, uint256 totalRewards, uint256 accRewardPerShare);\n\n    modifier poolExists(address rewardToken) {\n        require(address(pools[rewardToken].rewardToken) != address(0), \"UnicStaking: Pool does not exist\");\n        _;\n    }\n\n    modifier poolNotExists(address rewardToken) {\n        require(address(pools[rewardToken].rewardToken) == address(0), \"UnicStaking: Pool does already exist\");\n        _;\n    }\n\n    IUnicFactory private factory;\n\n    function initialize(\n        IERC20Upgradeable _stakingToken,\n        IMintableCollection _nftCollection,\n        uint256 _nftStartId,\n        uint256 _minStakeAmount\n    ) public initializer {\n        __Ownable_init();\n        stakingToken = _stakingToken;\n        nftCollection = _nftCollection;\n        nftStartId = _nftStartId;\n        minStakeAmount = _minStakeAmount;\n    }\n\n    function setUnicFactory(IUnicFactory _factory) external onlyOwner {\n        factory = _factory;\n    }\n\n    // lockdays are passed as seconds, multiplier in percentage from 100 (e.g. 170 for 70% on top)\n    function setLockMultiplier(uint256 lockDays, uint16 multiplier) external onlyOwner {\n        require(multiplier >= 100, \"Minimum multiplier = 100\");\n        lockMultipliers[lockDays] = LockMultiplier({\n            multiplier: multiplier,\n            exists: true\n        });\n    }\n\n    // lockdays are passed as seconds\n    function deleteLockMultiplier(uint256 lockDays) external onlyOwner {\n        delete lockMultipliers[lockDays];\n    }\n\n    function setMinStakeAmount(uint256 _minStakeAmount) external onlyOwner {\n        minStakeAmount = _minStakeAmount;\n    }\n\n    function setNftStartId(uint256 _nftStartId) external onlyOwner {\n        nftStartId = _nftStartId;\n    }\n\n    /**\n     * @param amount Amount of staking tokens\n     * @param lockDays How many days the staker wants to lock\n     * @param rewardToken The desired reward token to stake the tokens for (most likely a certain uToken)\n     */\n    function stake(uint256 amount, uint256 lockDays, address rewardToken)\n    external\n    whenNotPaused\n    poolExists(rewardToken)\n    {\n        require(\n            amount >= minStakeAmount,\n            \"UnicStaking: Amount must be greater than or equal to min stake amount\"\n        );\n        require(\n            lockMultipliers[lockDays].exists,\n            \"UnicStaking: Invalid number of lock days specified\"\n        );\n\n        updateRewards(rewardToken);\n\n        // transfer the staking tokens into the staking pool\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n\n        // now the data of the staker is persisted\n        StakerInfo storage staker = stakes[nftStartId];\n        staker.stakeStartTime = block.timestamp;\n        staker.amount = amount;\n        staker.lockDays = lockDays;\n        staker.multiplier = lockMultipliers[lockDays].multiplier;\n        staker.nftId = nftStartId;\n        staker.rewardToken = rewardToken;\n\n        RewardPool storage pool = pools[rewardToken];\n\n        // the amount with lock multiplier applied\n        uint256 virtualAmount = virtualAmount(staker.amount, staker.multiplier);\n        staker.rewardDebt = virtualAmount.mul(pool.accRewardPerShare).div(DIV_PRECISION);\n\n        pool.stakedAmount = pool.stakedAmount.add(amount);\n        pool.stakedAmountWithMultipliers = pool.stakedAmountWithMultipliers.add(virtualAmount);\n\n        nftStartId = nftStartId.add(1);\n        nftCollection.mint(msg.sender, nftStartId - 1);\n\n        emit Staked(msg.sender, rewardToken, nftStartId - 1, amount, lockDays);\n    }\n\n    function withdraw(uint256 nftId) external whenNotPaused {\n        StakerInfo storage staker = stakes[nftId];\n        require(address(staker.rewardToken) != address(0), \"UnicStaking: No staker exists\");\n        require(\n            nftCollection.ownerOf(nftId) == msg.sender,\n            \"UnicStaking: Only the owner may withdraw\"\n        );\n        require(\n            (staker.stakeStartTime.add(staker.lockDays)) < block.timestamp,\n            \"UnicStaking: Lock time not expired\"\n        );\n        updateRewards(staker.rewardToken);\n\n        RewardPool storage pool = pools[address(staker.rewardToken)];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        // lets burn the NFT first\n        nftCollection.burn(nftId);\n\n        uint256 virtualAmount = virtualAmount(staker.amount, staker.multiplier);\n\n        uint256 accumulated = virtualAmount.mul(pool.accRewardPerShare).div(DIV_PRECISION);\n        uint256 reward = accumulated.sub(staker.rewardDebt);\n\n        // reset the pool props\n        pool.stakedAmount = pool.stakedAmount.sub(staker.amount);\n        pool.stakedAmountWithMultipliers = pool.stakedAmountWithMultipliers.sub(virtualAmount);\n\n        uint256 staked = staker.amount;\n\n        // reset all staker props\n        staker.rewardDebt = 0;\n        staker.amount = 0;\n        staker.stakeStartTime = 0;\n        staker.lockDays = 0;\n        staker.nftId = 0;\n        staker.rewardToken = address(0);\n\n        stakingToken.safeTransfer(msg.sender, reward.add(staked));\n\n        emit Harvest(msg.sender, address(staker.rewardToken), nftId, reward);\n        emit Withdraw(msg.sender, address(staker.rewardToken), nftId, staked);\n    }\n\n    function updateRewards(address rewardToken) private poolExists(rewardToken) {\n        RewardPool storage pool = pools[rewardToken];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        if (pool.totalRewardAmount > pool.lastRewardAmount) {\n            if (pool.stakedAmountWithMultipliers > 0) {\n                uint256 reward = pool.totalRewardAmount.sub(pool.lastRewardAmount);\n                pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(DIV_PRECISION).div(pool.stakedAmountWithMultipliers));\n            }\n            pool.lastRewardAmount = pool.totalRewardAmount;\n            emit LogUpdateRewards(rewardToken, pool.lastRewardAmount, pool.accRewardPerShare);\n        }\n    }\n\n    function createPool(address rewardToken) external poolNotExists(rewardToken) {\n        require(\n            rewardToken == 0x94E0BAb2F6Ab1F19F4750E42d7349f2740513aD5 || // UNIC\n            rewardToken == 0x3d9233F15BB93C78a4f07B5C5F7A018630217cB3 || // first uToken (Unicly Genesis uUNICLY)\n            factory.getUToken(rewardToken) > 0,\n            \"UnicStakingV2: rewardToken must be UNIC or uToken\"\n        );\n        RewardPool memory pool = RewardPool({\n            rewardToken: IERC20Upgradeable(rewardToken),\n            stakedAmount: 0,\n            stakedAmountWithMultipliers: 0,\n            totalRewardAmount: 0,\n            accRewardPerShare: 0,\n            lastRewardAmount: 0\n        });\n        pools[rewardToken] = pool;\n    }\n\n    function addRewards(address rewardToken, uint256 amount) override external poolExists(rewardToken) {\n        require(amount > 0, \"UnicStaking: Amount must be greater than zero\");\n        IERC20Upgradeable(rewardToken).safeTransferFrom(msg.sender, address(this), amount);\n        RewardPool storage pool = pools[rewardToken];\n        pool.totalRewardAmount = pool.totalRewardAmount.add(amount);\n        emit AddRewards(rewardToken, amount);\n    }\n\n    function harvest(uint256 nftId) external whenNotPaused {\n        StakerInfo storage staker = stakes[nftId];\n        require(staker.nftId > 0, \"UnicStaking: No staker exists\");\n        require(\n            nftCollection.ownerOf(nftId) == msg.sender,\n            \"UnicStaking: Only the owner may harvest\"\n        );\n\n        updateRewards(address(staker.rewardToken));\n\n        RewardPool memory pool = pools[address(staker.rewardToken)];\n        uint256 accumulated = virtualAmount(staker.amount, staker.multiplier).mul(pool.accRewardPerShare).div(DIV_PRECISION);\n\n        uint256 reward;\n        // this needs to be considered due to roundings in reward calculation\n        if (accumulated > staker.rewardDebt) {\n            reward = accumulated.sub(staker.rewardDebt);\n        }\n\n        staker.rewardDebt = accumulated;\n\n        pool.rewardToken.safeTransfer(msg.sender, reward);\n        emit Harvest(msg.sender, address(staker.rewardToken), nftId, reward);\n    }\n\n    function pendingReward(uint256 nftId) external view returns (uint256) {\n        StakerInfo memory staker = stakes[nftId];\n        require(staker.nftId > 0, \"StakingPool: No staker exists\");\n\n        RewardPool memory pool = pools[address(staker.rewardToken)];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        uint256 accRewardPerShare = 0;\n        // run a part from the updateRewards logic but don't persist anything\n        if (pool.totalRewardAmount > pool.lastRewardAmount) {\n            if (pool.stakedAmountWithMultipliers > 0) {\n                uint256 reward = pool.totalRewardAmount.sub(pool.lastRewardAmount);\n                accRewardPerShare = pool.accRewardPerShare.add(reward.mul(DIV_PRECISION).div(pool.stakedAmountWithMultipliers));\n            }\n        }\n\n        uint256 accumulated = virtualAmount(staker.amount, staker.multiplier).mul(accRewardPerShare).div(DIV_PRECISION);\n\n        // this can happen due to roundings in the reward calculation\n        if (staker.rewardDebt > accumulated) {\n            return 0;\n        }\n        return accumulated.sub(staker.rewardDebt);\n    }\n\n    // returns the virtual amount after having a multiplier applied\n    function virtualAmount(uint256 amount, uint256 multiplier) private view returns (uint256) {\n        return amount.mul(multiplier.mul(DIV_PRECISION).div(100)).div(DIV_PRECISION);\n    }\n\n    // returns the stake with multiplier for an nftId\n    function getStakeWithMultiplier(uint256 nftId) external view returns (uint256 stakeWithMultiplier){\n        StakerInfo memory staker = stakes[nftId];\n        stakeWithMultiplier = virtualAmount(staker.amount, staker.multiplier);\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    function getStakingToken() external view returns (address) {\n        return address(stakingToken);\n    }\n\n    // The initial deployment was done using UNIC as the staking token. We actually want to use xUNIC. That's why we\n    // needed to add this setter.\n    function setStakingToken(IERC20Upgradeable _stakingToken) external onlyOwner {\n        stakingToken = _stakingToken;\n    }\n\n    // See doc of `setStakingToken`. This allows an emergency withdrawal of staked UNIC.\n    function emergencyWithdrawStakes(uint256 nftId, address receiver) external onlyOwner {\n        StakerInfo storage staker = stakes[nftId];\n        require(staker.nftId > 0, \"UnicStaking: No staker exists\");\n\n        updateRewards(staker.rewardToken);\n\n        RewardPool storage pool = pools[address(staker.rewardToken)];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        uint256 virtualAmount = virtualAmount(staker.amount, staker.multiplier);\n\n        uint256 accumulated = virtualAmount.mul(pool.accRewardPerShare).div(DIV_PRECISION);\n        uint256 reward = accumulated.sub(staker.rewardDebt);\n\n        // reset the pool props\n        pool.stakedAmount = pool.stakedAmount.sub(staker.amount);\n        pool.stakedAmountWithMultipliers = pool.stakedAmountWithMultipliers.sub(virtualAmount);\n\n        uint256 staked = staker.amount;\n\n        // reset all staker props\n        staker.rewardDebt = 0;\n        staker.amount = 0;\n        staker.stakeStartTime = 0;\n        staker.lockDays = 0;\n        staker.nftId = 0;\n        staker.rewardToken = address(0);\n\n        stakingToken.safeTransfer(receiver, reward.add(staked));\n\n        emit Harvest(receiver, address(staker.rewardToken), nftId, reward);\n        emit Withdraw(receiver, address(staker.rewardToken), nftId, staked);\n    }\n}\n"
    },
    "contracts/UnicStakingV3.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"./interfaces/IMintableCollection.sol\";\nimport \"./interfaces/IRewardable.sol\";\nimport \"./abstract/EmergencyWithdrawable.sol\";\nimport \"./UnicStakingERC721.sol\";\nimport \"./interfaces/IUnicFactory.sol\";\n\n// This upgraded version makes the adding of reward pools permissionless (for UNIC and uTokens)\ncontract UnicStakingV3 is Initializable, EmergencyWithdrawable, IRewardable, PausableUpgradeable {\n    using SafeMath for uint256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    struct StakerInfo {\n        uint256 nftId;\n        uint256 amount;\n        uint256 stakeStartTime;\n        uint256 lockDays;\n        uint256 rewardDebt;\n        address rewardToken;\n        uint16 multiplier;\n    }\n\n    struct LockMultiplier {\n        uint16 multiplier;\n        bool exists;\n    }\n\n    struct RewardPool {\n        IERC20Upgradeable rewardToken;\n        uint256 stakedAmount;\n        uint256 stakedAmountWithMultipliers;\n        uint256 totalRewardAmount;\n        uint256 accRewardPerShare;\n        uint256 lastRewardAmount;\n    }\n\n    IERC20Upgradeable private stakingToken;\n    IMintableCollection private nftCollection;\n    uint256 public minStakeAmount;\n    uint256 private nftStartId;\n\n    // NFT ID to staker info\n    mapping(uint256 => StakerInfo) public stakes;\n\n    // Each uToken should have its own poolcontracts/UnicStaking.sol:115:9\n    mapping(address => RewardPool) public pools;\n\n    // Mapping from days => multiplier for timelock\n    mapping(uint256 => LockMultiplier) public lockMultipliers;\n\n    uint256 private constant DIV_PRECISION = 1e18;\n\n    event AddRewards(address indexed rewardToken, uint256 amount);\n    event Staked(\n        address indexed account,\n        address indexed rewardToken,\n        uint256 nftId,\n        uint256 amount,\n        uint256 lockDays\n    );\n    event Harvest(address indexed staker, address indexed rewardToken, uint256 nftId, uint256 amount);\n    event Withdraw(address indexed staker, address indexed rewardToken, uint256 nftId, uint256 amount);\n    event LogUpdateRewards(address indexed rewardToken, uint256 totalRewards, uint256 accRewardPerShare);\n\n    modifier poolExists(address rewardToken) {\n        require(address(pools[rewardToken].rewardToken) != address(0), \"UnicStaking: Pool does not exist\");\n        _;\n    }\n\n    modifier poolNotExists(address rewardToken) {\n        require(address(pools[rewardToken].rewardToken) == address(0), \"UnicStaking: Pool does already exist\");\n        _;\n    }\n\n    IUnicFactory private factory;\n\n    function initialize(\n        IERC20Upgradeable _stakingToken,\n        IMintableCollection _nftCollection,\n        uint256 _nftStartId,\n        uint256 _minStakeAmount\n    ) public initializer {\n        __Ownable_init();\n        stakingToken = _stakingToken;\n        nftCollection = _nftCollection;\n        nftStartId = _nftStartId;\n        minStakeAmount = _minStakeAmount;\n    }\n\n    function setUnicFactory(IUnicFactory _factory) external onlyOwner {\n        factory = _factory;\n    }\n\n    // lockdays are passed as seconds, multiplier in percentage from 100 (e.g. 170 for 70% on top)\n    function setLockMultiplier(uint256 lockDays, uint16 multiplier) external onlyOwner {\n        require(multiplier >= 100, \"Minimum multiplier = 100\");\n        lockMultipliers[lockDays] = LockMultiplier({\n            multiplier: multiplier,\n            exists: true\n        });\n    }\n\n    // lockdays are passed as seconds\n    function deleteLockMultiplier(uint256 lockDays) external onlyOwner {\n        delete lockMultipliers[lockDays];\n    }\n\n    function setMinStakeAmount(uint256 _minStakeAmount) external onlyOwner {\n        minStakeAmount = _minStakeAmount;\n    }\n\n    function setNftStartId(uint256 _nftStartId) external onlyOwner {\n        nftStartId = _nftStartId;\n    }\n\n    /**\n     * @param amount Amount of staking tokens\n     * @param lockDays How many days the staker wants to lock\n     * @param rewardToken The desired reward token to stake the tokens for (most likely a certain uToken)\n     */\n    function stake(uint256 amount, uint256 lockDays, address rewardToken)\n    external\n    whenNotPaused\n    poolExists(rewardToken)\n    {\n        require(\n            amount >= minStakeAmount,\n            \"UnicStaking: Amount must be greater than or equal to min stake amount\"\n        );\n        require(\n            lockMultipliers[lockDays].exists,\n            \"UnicStaking: Invalid number of lock days specified\"\n        );\n\n        updateRewards(rewardToken);\n\n        // transfer the staking tokens into the staking pool\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n\n        // now the data of the staker is persisted\n        StakerInfo storage staker = stakes[nftStartId];\n        staker.stakeStartTime = block.timestamp;\n        staker.amount = amount;\n        staker.lockDays = lockDays;\n        staker.multiplier = lockMultipliers[lockDays].multiplier;\n        staker.nftId = nftStartId;\n        staker.rewardToken = rewardToken;\n\n        RewardPool storage pool = pools[rewardToken];\n\n        // the amount with lock multiplier applied\n        uint256 virtualAmount = virtualAmount(staker.amount, staker.multiplier);\n        staker.rewardDebt = virtualAmount.mul(pool.accRewardPerShare).div(DIV_PRECISION);\n\n        pool.stakedAmount = pool.stakedAmount.add(amount);\n        pool.stakedAmountWithMultipliers = pool.stakedAmountWithMultipliers.add(virtualAmount);\n\n        nftStartId = nftStartId.add(1);\n        nftCollection.mint(msg.sender, nftStartId - 1);\n\n        emit Staked(msg.sender, rewardToken, nftStartId - 1, amount, lockDays);\n    }\n\n    function withdraw(uint256 nftId) external whenNotPaused {\n        StakerInfo storage staker = stakes[nftId];\n        require(address(staker.rewardToken) != address(0), \"UnicStaking: No staker exists\");\n        require(\n            nftCollection.ownerOf(nftId) == msg.sender,\n            \"UnicStaking: Only the owner may withdraw\"\n        );\n        require(\n            (staker.stakeStartTime.add(staker.lockDays)) < block.timestamp,\n            \"UnicStaking: Lock time not expired\"\n        );\n        updateRewards(staker.rewardToken);\n\n        RewardPool storage pool = pools[address(staker.rewardToken)];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        // lets burn the NFT first\n        nftCollection.burn(nftId);\n\n        uint256 virtualAmount = virtualAmount(staker.amount, staker.multiplier);\n\n        uint256 accumulated = virtualAmount.mul(pool.accRewardPerShare).div(DIV_PRECISION);\n        uint256 reward = accumulated.sub(staker.rewardDebt);\n\n        // reset the pool props\n        pool.stakedAmount = pool.stakedAmount.sub(staker.amount);\n        pool.stakedAmountWithMultipliers = pool.stakedAmountWithMultipliers.sub(virtualAmount);\n\n        uint256 staked = staker.amount;\n\n        // reset all staker props\n        staker.rewardDebt = 0;\n        staker.amount = 0;\n        staker.stakeStartTime = 0;\n        staker.lockDays = 0;\n        staker.nftId = 0;\n        staker.rewardToken = address(0);\n\n        stakingToken.safeTransfer(msg.sender, reward.add(staked));\n\n        emit Harvest(msg.sender, address(staker.rewardToken), nftId, reward);\n        emit Withdraw(msg.sender, address(staker.rewardToken), nftId, staked);\n    }\n\n    function updateRewards(address rewardToken) private poolExists(rewardToken) {\n        RewardPool storage pool = pools[rewardToken];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        if (pool.totalRewardAmount > pool.lastRewardAmount) {\n            if (pool.stakedAmountWithMultipliers > 0) {\n                uint256 reward = pool.totalRewardAmount.sub(pool.lastRewardAmount);\n                pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(DIV_PRECISION).div(pool.stakedAmountWithMultipliers));\n            }\n            pool.lastRewardAmount = pool.totalRewardAmount;\n            emit LogUpdateRewards(rewardToken, pool.lastRewardAmount, pool.accRewardPerShare);\n        }\n    }\n\n    function createPool(address rewardToken) external poolNotExists(rewardToken) {\n        require(\n            rewardToken == 0x94E0BAb2F6Ab1F19F4750E42d7349f2740513aD5 || // UNIC\n            rewardToken == 0x3d9233F15BB93C78a4f07B5C5F7A018630217cB3 || // first uToken (Unicly Genesis uUNICLY)\n            factory.getUToken(rewardToken) > 0,\n            \"UnicStakingV2: rewardToken must be UNIC or uToken\"\n        );\n        RewardPool memory pool = RewardPool({\n            rewardToken: IERC20Upgradeable(rewardToken),\n            stakedAmount: 0,\n            stakedAmountWithMultipliers: 0,\n            totalRewardAmount: 0,\n            accRewardPerShare: 0,\n            lastRewardAmount: 0\n        });\n        pools[rewardToken] = pool;\n    }\n\n    function addRewards(address rewardToken, uint256 amount) override external poolExists(rewardToken) {\n        require(amount > 0, \"UnicStaking: Amount must be greater than zero\");\n        IERC20Upgradeable(rewardToken).safeTransferFrom(msg.sender, address(this), amount);\n        RewardPool storage pool = pools[rewardToken];\n        pool.totalRewardAmount = pool.totalRewardAmount.add(amount);\n        emit AddRewards(rewardToken, amount);\n    }\n\n    function harvest(uint256 nftId) external whenNotPaused {\n        StakerInfo storage staker = stakes[nftId];\n        require(staker.nftId > 0, \"UnicStaking: No staker exists\");\n        require(\n            nftCollection.ownerOf(nftId) == msg.sender,\n            \"UnicStaking: Only the owner may harvest\"\n        );\n\n        updateRewards(address(staker.rewardToken));\n\n        RewardPool memory pool = pools[address(staker.rewardToken)];\n        uint256 accumulated = virtualAmount(staker.amount, staker.multiplier).mul(pool.accRewardPerShare).div(DIV_PRECISION);\n\n        uint256 reward;\n        // this needs to be considered due to roundings in reward calculation\n        if (accumulated > staker.rewardDebt) {\n            reward = accumulated.sub(staker.rewardDebt);\n        }\n\n        staker.rewardDebt = accumulated;\n\n        pool.rewardToken.safeTransfer(msg.sender, reward);\n        emit Harvest(msg.sender, address(staker.rewardToken), nftId, reward);\n    }\n\n    function pendingReward(uint256 nftId) external view returns (uint256) {\n        StakerInfo memory staker = stakes[nftId];\n        require(staker.nftId > 0, \"StakingPool: No staker exists\");\n\n        RewardPool memory pool = pools[address(staker.rewardToken)];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        uint256 accRewardPerShare = 0;\n        // run a part from the updateRewards logic but don't persist anything\n        if (pool.totalRewardAmount > pool.lastRewardAmount) {\n            if (pool.stakedAmountWithMultipliers > 0) {\n                uint256 reward = pool.totalRewardAmount.sub(pool.lastRewardAmount);\n                accRewardPerShare = pool.accRewardPerShare.add(reward.mul(DIV_PRECISION).div(pool.stakedAmountWithMultipliers));\n            }\n        }\n\n        uint256 accumulated = virtualAmount(staker.amount, staker.multiplier).mul(accRewardPerShare).div(DIV_PRECISION);\n\n        // this can happen due to roundings in the reward calculation\n        if (staker.rewardDebt > accumulated) {\n            return 0;\n        }\n        return accumulated.sub(staker.rewardDebt);\n    }\n\n    // returns the virtual amount after having a multiplier applied\n    function virtualAmount(uint256 amount, uint256 multiplier) private view returns (uint256) {\n        return amount.mul(multiplier.mul(DIV_PRECISION).div(100)).div(DIV_PRECISION);\n    }\n\n    // returns the stake with multiplier for an nftId\n    function getStakeWithMultiplier(uint256 nftId) external view returns (uint256 stakeWithMultiplier){\n        StakerInfo memory staker = stakes[nftId];\n        stakeWithMultiplier = virtualAmount(staker.amount, staker.multiplier);\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "contracts/UnicStakingV2.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"./interfaces/IMintableCollection.sol\";\nimport \"./interfaces/IRewardable.sol\";\nimport \"./abstract/EmergencyWithdrawable.sol\";\nimport \"./UnicStakingERC721.sol\";\nimport \"./interfaces/IUnicFactory.sol\";\n\n// This upgraded version makes the adding of reward pools permissionless (for UNIC and uTokens)\ncontract UnicStakingV2 is Initializable, EmergencyWithdrawable, IRewardable, PausableUpgradeable {\n    using SafeMath for uint256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    struct StakerInfo {\n        uint256 nftId;\n        uint256 amount;\n        uint256 stakeStartTime;\n        uint256 lockDays;\n        uint256 rewardDebt;\n        address rewardToken;\n        uint16 multiplier;\n    }\n\n    struct LockMultiplier {\n        uint16 multiplier;\n        bool exists;\n    }\n\n    struct RewardPool {\n        IERC20Upgradeable rewardToken;\n        uint256 stakedAmount;\n        uint256 stakedAmountWithMultipliers;\n        uint256 totalRewardAmount;\n        uint256 accRewardPerShare;\n        uint256 lastRewardAmount;\n    }\n\n    IERC20Upgradeable private stakingToken;\n    IMintableCollection private nftCollection;\n    uint256 public minStakeAmount;\n    uint256 private nftStartId;\n\n    // NFT ID to staker info\n    mapping(uint256 => StakerInfo) public stakes;\n\n    // Each uToken should have its own poolcontracts/UnicStaking.sol:115:9\n    mapping(address => RewardPool) public pools;\n\n    // Mapping from days => multiplier for timelock\n    mapping(uint256 => LockMultiplier) public lockMultipliers;\n\n    uint256 private constant DIV_PRECISION = 1e18;\n\n    event AddRewards(address indexed rewardToken, uint256 amount);\n    event Staked(\n        address indexed account,\n        address indexed rewardToken,\n        uint256 nftId,\n        uint256 amount,\n        uint256 lockDays\n    );\n    event Harvest(address indexed staker, address indexed rewardToken, uint256 nftId, uint256 amount);\n    event Withdraw(address indexed staker, address indexed rewardToken, uint256 nftId, uint256 amount);\n    event LogUpdateRewards(address indexed rewardToken, uint256 totalRewards, uint256 accRewardPerShare);\n\n    modifier poolExists(address rewardToken) {\n        require(address(pools[rewardToken].rewardToken) != address(0), \"UnicStaking: Pool does not exist\");\n        _;\n    }\n\n    modifier poolNotExists(address rewardToken) {\n        require(address(pools[rewardToken].rewardToken) == address(0), \"UnicStaking: Pool does already exist\");\n        _;\n    }\n\n    IUnicFactory private factory;\n\n    function initialize(\n        IERC20Upgradeable _stakingToken,\n        IMintableCollection _nftCollection,\n        uint256 _nftStartId,\n        uint256 _minStakeAmount\n    ) public initializer {\n        __Ownable_init();\n        stakingToken = _stakingToken;\n        nftCollection = _nftCollection;\n        nftStartId = _nftStartId;\n        minStakeAmount = _minStakeAmount;\n    }\n\n    function setUnicFactory(IUnicFactory _factory) external onlyOwner {\n        factory = _factory;\n    }\n\n    // lockdays are passed as seconds, multiplier in percentage from 100 (e.g. 170 for 70% on top)\n    function setLockMultiplier(uint256 lockDays, uint16 multiplier) external onlyOwner {\n        require(multiplier >= 100, \"Minimum multiplier = 100\");\n        lockMultipliers[lockDays] = LockMultiplier({\n        multiplier: multiplier,\n        exists: true\n        });\n    }\n\n    function setMinStakeAmount(uint256 _minStakeAmount) external onlyOwner {\n        minStakeAmount = _minStakeAmount;\n    }\n\n    /**\n     * @param amount Amount of staking tokens\n     * @param lockDays How many days the staker wants to lock\n     * @param rewardToken The desired reward token to stake the tokens for (most likely a certain uToken)\n     */\n    function stake(uint256 amount, uint256 lockDays, address rewardToken)\n    external\n    whenNotPaused\n    poolExists(rewardToken)\n    {\n        require(\n            amount >= minStakeAmount,\n            \"UnicStaking: Amount must be greater than or equal to min stake amount\"\n        );\n        require(\n            lockMultipliers[lockDays].exists,\n            \"UnicStaking: Invalid number of lock days specified\"\n        );\n\n        updateRewards(rewardToken);\n\n        // transfer the staking tokens into the staking pool\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n\n        // now the data of the staker is persisted\n        StakerInfo storage staker = stakes[nftStartId];\n        staker.stakeStartTime = block.timestamp;\n        staker.amount = amount;\n        staker.lockDays = lockDays;\n        staker.multiplier = lockMultipliers[lockDays].multiplier;\n        staker.nftId = nftStartId;\n        staker.rewardToken = rewardToken;\n\n        RewardPool storage pool = pools[rewardToken];\n\n        // the amount with lock multiplier applied\n        uint256 virtualAmount = virtualAmount(staker.amount, staker.multiplier);\n        staker.rewardDebt = virtualAmount.mul(pool.accRewardPerShare).div(DIV_PRECISION);\n\n        pool.stakedAmount = pool.stakedAmount.add(amount);\n        pool.stakedAmountWithMultipliers = pool.stakedAmountWithMultipliers.add(virtualAmount);\n\n        nftStartId = nftStartId.add(1);\n        nftCollection.mint(msg.sender, nftStartId - 1);\n\n        emit Staked(msg.sender, rewardToken, nftStartId - 1, amount, lockDays);\n    }\n\n    function withdraw(uint256 nftId) external whenNotPaused {\n        StakerInfo storage staker = stakes[nftId];\n        require(address(staker.rewardToken) != address(0), \"UnicStaking: No staker exists\");\n        require(\n            nftCollection.ownerOf(nftId) == msg.sender,\n            \"UnicStaking: Only the owner may withdraw\"\n        );\n        require(\n            (staker.stakeStartTime.add(staker.lockDays)) < block.timestamp,\n            \"UnicStaking: Lock time not expired\"\n        );\n        updateRewards(staker.rewardToken);\n\n        RewardPool storage pool = pools[address(staker.rewardToken)];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        // lets burn the NFT first\n        nftCollection.burn(nftId);\n\n        uint256 virtualAmount = virtualAmount(staker.amount, staker.multiplier);\n\n        uint256 accumulated = virtualAmount.mul(pool.accRewardPerShare).div(DIV_PRECISION);\n        uint256 reward = accumulated.sub(staker.rewardDebt);\n\n        // reset the pool props\n        pool.stakedAmount = pool.stakedAmount.sub(staker.amount);\n        pool.stakedAmountWithMultipliers = pool.stakedAmountWithMultipliers.sub(virtualAmount);\n\n        uint256 staked = staker.amount;\n\n        // reset all staker props\n        staker.rewardDebt = 0;\n        staker.amount = 0;\n        staker.stakeStartTime = 0;\n        staker.lockDays = 0;\n        staker.nftId = 0;\n        staker.rewardToken = address(0);\n\n        stakingToken.safeTransfer(msg.sender, reward.add(staked));\n\n        emit Harvest(msg.sender, address(staker.rewardToken), nftId, reward);\n        emit Withdraw(msg.sender, address(staker.rewardToken), nftId, staked);\n    }\n\n    function updateRewards(address rewardToken) private poolExists(rewardToken) {\n        RewardPool storage pool = pools[rewardToken];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        if (pool.totalRewardAmount > pool.lastRewardAmount) {\n            if (pool.stakedAmountWithMultipliers > 0) {\n                uint256 reward = pool.totalRewardAmount.sub(pool.lastRewardAmount);\n                pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(DIV_PRECISION).div(pool.stakedAmountWithMultipliers));\n            }\n            pool.lastRewardAmount = pool.totalRewardAmount;\n            emit LogUpdateRewards(rewardToken, pool.lastRewardAmount, pool.accRewardPerShare);\n        }\n    }\n\n    function createPool(address rewardToken) external poolNotExists(rewardToken) {\n        require(\n            rewardToken == 0x94E0BAb2F6Ab1F19F4750E42d7349f2740513aD5 || // UNIC\n            rewardToken == 0x3d9233F15BB93C78a4f07B5C5F7A018630217cB3 || // first uToken (Unicly Genesis uUNICLY)\n            factory.getUToken(rewardToken) > 0,\n            \"UnicStakingV2: rewardToken must be UNIC or uToken\"\n        );\n        RewardPool memory pool = RewardPool({\n            rewardToken: IERC20Upgradeable(rewardToken),\n            stakedAmount: 0,\n            stakedAmountWithMultipliers: 0,\n            totalRewardAmount: 0,\n            accRewardPerShare: 0,\n            lastRewardAmount: 0\n        });\n        pools[rewardToken] = pool;\n    }\n\n    function addRewards(address rewardToken, uint256 amount) override external poolExists(rewardToken) {\n        require(amount > 0, \"UnicStaking: Amount must be greater than zero\");\n        IERC20Upgradeable(rewardToken).safeTransferFrom(msg.sender, address(this), amount);\n        RewardPool storage pool = pools[rewardToken];\n        pool.totalRewardAmount = pool.totalRewardAmount.add(amount);\n        emit AddRewards(rewardToken, amount);\n    }\n\n    function harvest(uint256 nftId) external whenNotPaused {\n        StakerInfo storage staker = stakes[nftId];\n        require(staker.nftId > 0, \"UnicStaking: No staker exists\");\n        require(\n            nftCollection.ownerOf(nftId) == msg.sender,\n            \"UnicStaking: Only the owner may harvest\"\n        );\n\n        updateRewards(address(staker.rewardToken));\n\n        RewardPool memory pool = pools[address(staker.rewardToken)];\n        uint256 accumulated = virtualAmount(staker.amount, staker.multiplier).mul(pool.accRewardPerShare).div(DIV_PRECISION);\n\n        uint256 reward;\n        // this needs to be considered due to roundings in reward calculation\n        if (accumulated > staker.rewardDebt) {\n            reward = accumulated.sub(staker.rewardDebt);\n        }\n\n        staker.rewardDebt = accumulated;\n\n        pool.rewardToken.safeTransfer(msg.sender, reward);\n        emit Harvest(msg.sender, address(staker.rewardToken), nftId, reward);\n    }\n\n    function pendingReward(uint256 nftId) external view returns (uint256) {\n        StakerInfo memory staker = stakes[nftId];\n        require(staker.nftId > 0, \"StakingPool: No staker exists\");\n\n        RewardPool memory pool = pools[address(staker.rewardToken)];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        uint256 accRewardPerShare = 0;\n        // run a part from the updateRewards logic but don't persist anything\n        if (pool.totalRewardAmount > pool.lastRewardAmount) {\n            if (pool.stakedAmountWithMultipliers > 0) {\n                uint256 reward = pool.totalRewardAmount.sub(pool.lastRewardAmount);\n                accRewardPerShare = pool.accRewardPerShare.add(reward.mul(DIV_PRECISION).div(pool.stakedAmountWithMultipliers));\n            }\n        }\n\n        uint256 accumulated = virtualAmount(staker.amount, staker.multiplier).mul(accRewardPerShare).div(DIV_PRECISION);\n\n        // this can happen due to roundings in the reward calculation\n        if (staker.rewardDebt > accumulated) {\n            return 0;\n        }\n        return accumulated.sub(staker.rewardDebt);\n    }\n\n    // returns the virtual amount after having a multiplier applied\n    function virtualAmount(uint256 amount, uint256 multiplier) private view returns (uint256) {\n        return amount.mul(multiplier.mul(DIV_PRECISION).div(100)).div(DIV_PRECISION);\n    }\n\n    // returns the stake with multiplier for an nftId\n    function getStakeWithMultiplier(uint256 nftId) external view returns (uint256 stakeWithMultiplier){\n        StakerInfo memory staker = stakes[nftId];\n        stakeWithMultiplier = virtualAmount(staker.amount, staker.multiplier);\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "contracts/ProxyCreator.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./interfaces/IUnicFactory.sol\";\nimport \"./Converter.sol\";\n\ncontract ProxyCreator is Ownable {\n    using SafeMath for uint256;\n\n    bool public isPublic;\n    bool public anyAllowed;\n    mapping(address => bool) public whitelist;\n    mapping(address => mapping(uint256 => bool)) public allowedNFTs;\n    mapping(address => bool) public contractWhitelist;\n    address public factory;\n    address public proxyTransactionFactory;\n    address public uToken;\n    address public governorAlpha;\n    uint256 public reward;\n\n    constructor(address _factory, address _uToken) public {\n        factory = _factory;\n        uToken = _uToken;\n    }\n\n    function setReward(uint256 _reward) public onlyOwner {\n        reward = _reward;\n    }\n\n    function setConstraints(address _contract, bool _contractWhitelist, uint256[] calldata _ids, bool _isAllowed, bool _anyAllowed) public onlyOwner {\n        if(_anyAllowed) {\n            anyAllowed = _anyAllowed;\n            return;\n        }\n\n        if(_contractWhitelist) {\n            contractWhitelist[_contract] = true;\n            return;\n        }\n\n        require(_ids.length < 200, \"ProxyCreator: Allow at most 200 ids at a time\");\n\n        for (uint8 i=0; i<200; i++) {\n            if (i == _ids.length) {\n                break;\n            }\n\n            allowedNFTs[_contract][_ids[i]] = _isAllowed;\n        }\n    }\n\n    function setWhiteList(address[] memory _addresses, bool _isWhitelisted, bool _isPublic) public onlyOwner {\n        if(_isPublic) {\n            isPublic = _isPublic;\n            return;\n        }\n\n        require(_addresses.length < 200, \"ProxyCreator: Set at most 200 addresses at a time\");\n\n        for (uint8 i=0; i<200; i++) {\n            if (i == _addresses.length) {\n                break;\n            }\n\n            whitelist[_addresses[i]] = _isWhitelisted;\n        }\n    }\n\n    function deposit(uint256[] calldata tokenIDs, uint256[] calldata amounts, uint256[] calldata triggerPrices, address contractAddr) public {\n        for (uint8 i=0; i<200; i++) {\n            if (i == tokenIDs.length) {\n                break;\n            }\n            require(allowedNFTs[contractAddr][tokenIDs[i]] || anyAllowed || contractWhitelist[contractAddr], \"ProxyCreator: Attempted deposit of non-whitelisted NFT\");\n\n            IERC721(contractAddr).transferFrom(msg.sender, address(this), tokenIDs[i]);\n        }\n\n        IERC721(contractAddr).setApprovalForAll(uToken, true);\n        if(isPublic) {\n            Converter(uToken).deposit(tokenIDs, amounts, triggerPrices, contractAddr);\n        }\n        else {\n            require(whitelist[msg.sender], \"ProxyCreator: User not part of whitelist\");\n            Converter(uToken).deposit(tokenIDs, amounts, triggerPrices, contractAddr);\n        }\n        \n        if(reward != 0) {\n            Converter(uToken).transfer(msg.sender, reward.mul(tokenIDs.length));\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/Converter.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/introspection/ERC165CheckerUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport \"./interfaces/IUnicFactory.sol\";\nimport \"./interfaces/IProxyTransaction.sol\";\nimport \"./interfaces/IGetAuctionInfo.sol\";\nimport \"./interfaces/IConverter.sol\";\nimport \"./abstract/ERC20VotesUpgradeable.sol\";\n\ncontract Converter is IConverter, IProxyTransaction, Initializable, ERC1155ReceiverUpgradeable, ERC20VotesUpgradeable, OwnableUpgradeable {\n    using SafeMathUpgradeable for uint;\n\n    // List of NFTs that have been deposited\n    struct NFT {\n    \taddress contractAddr;\n    \tuint256 tokenId;\n        uint256 amount;\n        uint256 triggerPrice;\n    }\n\n    mapping(uint256 => NFT) public nfts;\n    // Current index and length of nfts\n    uint256 public currentNFTIndex = 0;\n    // If active, NFTs can’t be withdrawn\n    bool public active = false;\n    address public issuer;\n    uint256 public cap;\n    address public converterTimeLock;\n\n    IUnicFactory public factory;\n\n    event Deposited(uint256[] tokenIDs, uint256[] amounts, uint256[] triggerPrices, address indexed contractAddr);\n    event Refunded();\n    event Issued();\n    event PriceUpdate(uint256[] indexed nftIndex, uint[] price);\n\n    bytes private constant VALIDATOR = bytes('JCMY');\n\n    function initialize (\n        string memory name,\n        string memory symbol,\n        address _issuer,\n        address _factory\n    )\n        public\n        initializer\n        returns (bool)\n    {\n        __Ownable_init();\n        __ERC20_init(name, symbol);\n        issuer = _issuer;\n        factory = IUnicFactory(_factory);\n        cap = factory.uTokenSupply();\n        return true;\n    }\n\n    function burn(address _account, uint256 _amount) public {\n        require(msg.sender == factory.auctionHandler(), \"Converter: Only auction handler can burn\");\n        super._burn(_account, _amount);\n    }\n\n    function setCurator(address _issuer) external {\n        require(active, \"Converter: Tokens have not been issued yet\");\n        require(msg.sender == factory.vaultManager() || msg.sender == issuer, \"Converter: Not vault manager or issuer\");\n\n        issuer = _issuer;\n    }\n\n    function setTriggers(uint256[] calldata _nftIndex, uint256[] calldata _triggerPrices) external {\n        require(msg.sender == issuer, \"Converter: Only issuer can set trigger prices\");\n        require(_nftIndex.length <= 50, \"Converter: A maximum of 50 trigger prices can be set at once\");\n        for (uint8 i = 0; i < 50; i++) {\n            if (_nftIndex.length == i){\n                break;\n            }\n\n            require(!IGetAuctionInfo(factory.auctionHandler()).onAuction(address(this), _nftIndex[i]), \"Converter: Already on auction\");\n            nfts[_nftIndex[i]].triggerPrice = _triggerPrices[i];\n        }\n\n        emit PriceUpdate(_nftIndex, _triggerPrices);\n    }\n\n    function setConverterTimeLock(address _converterTimeLock) public override {\n        require(msg.sender == address(factory), \"Converter: Only factory can set converterTimeLock\");\n        converterTimeLock = _converterTimeLock;\n    }\n\n    // deposits an nft using the transferFrom action of the NFT contractAddr\n    function deposit(uint256[] calldata tokenIDs, uint256[] calldata amounts, uint256[] calldata triggerPrices, address contractAddr) external {\n        require(msg.sender == issuer, \"Converter: Only issuer can deposit\");\n        require(tokenIDs.length <= 50, \"Converter: A maximum of 50 tokens can be deposited in one go\");\n        require(tokenIDs.length > 0, \"Converter: You must specify at least one token ID\");\n\n        if (ERC165CheckerUpgradeable.supportsInterface(contractAddr, 0xd9b67a26)){\n            IERC1155Upgradeable(contractAddr).safeBatchTransferFrom(msg.sender, address(this), tokenIDs, amounts, VALIDATOR);\n\n            for (uint8 i = 0; i < 50; i++){\n                if (tokenIDs.length == i){\n                    break;\n                }\n                nfts[currentNFTIndex++] = NFT(contractAddr, tokenIDs[i], amounts[i], triggerPrices[i]);\n            }\n        }\n        else {\n            for (uint8 i = 0; i < 50; i++){\n                if (tokenIDs.length == i){\n                    break;\n                }\n                IERC721Upgradeable(contractAddr).transferFrom(msg.sender, address(this), tokenIDs[i]);\n                nfts[currentNFTIndex++] = NFT(contractAddr, tokenIDs[i], 1, triggerPrices[i]);\n            }\n        }\n\n        emit Deposited(tokenIDs, amounts, triggerPrices, contractAddr);\n    }\n\n    // Function that locks NFT collateral and issues the uTokens to the issuer\n    function issue() external {\n        require(msg.sender == issuer, \"Converter: Only issuer can issue the tokens\");\n        require(active == false, \"Converter: Token is already active\");\n\n        active = true;\n        address feeTo = factory.feeTo();\n        uint256 feeAmount = 0;\n        if (feeTo != address(0)) {\n            feeAmount = cap.div(factory.feeDivisor());\n            _mint(feeTo, feeAmount);\n        }\n\n        uint256 amount = cap - feeAmount;\n        _mint(issuer, amount);\n\n        emit Issued();\n    }\n\n    // Function that allows NFTs to be refunded (prior to issue being called)\n    function refund(address _to) external {\n        require(!active, \"Converter: Contract is already active - cannot refund\");\n        require(msg.sender == issuer, \"Converter: Only issuer can refund\");\n\n        // Only transfer maximum of 50 at a time to limit gas per call\n        uint8 _i = 0;\n        uint256 _index = currentNFTIndex;\n        bytes memory data;\n\n        while (_index > 0 && _i < 50){\n            NFT memory nft = nfts[_index - 1];\n\n            if (ERC165CheckerUpgradeable.supportsInterface(nft.contractAddr, 0xd9b67a26)){\n                IERC1155Upgradeable(nft.contractAddr).safeTransferFrom(address(this), _to, nft.tokenId, nft.amount, data);\n            }\n            else {\n                IERC721Upgradeable(nft.contractAddr).safeTransferFrom(address(this), _to, nft.tokenId);\n            }\n\n            delete nfts[_index - 1];\n\n            _index--;\n            _i++;\n        }\n\n        currentNFTIndex = _index;\n\n        emit Refunded();\n    }\n\n    function claimNFT(uint256 _nftIndex, address _to) external returns (bool) {\n        require(msg.sender == factory.auctionHandler(), \"Converter: Not auction handler\");\n\n        if (ERC165CheckerUpgradeable.supportsInterface(nfts[_nftIndex].contractAddr, 0xd9b67a26)){\n            bytes memory data;\n            IERC1155Upgradeable(nfts[_nftIndex].contractAddr).safeTransferFrom(address(this), _to, nfts[_nftIndex].tokenId, nfts[_nftIndex].amount, data);\n        }\n        else {\n            IERC721Upgradeable(nfts[_nftIndex].contractAddr).safeTransferFrom(address(this), _to, nfts[_nftIndex].tokenId);\n        }\n\n        return true;\n    }\n\n    /**\n     * ERC1155 Token ERC1155Receiver\n     */\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) override external returns(bytes4) {\n        if(keccak256(_data) == keccak256(VALIDATOR)){\n            return 0xf23a6e61;\n        }\n    }\n\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) override external returns(bytes4) {\n        if(keccak256(_data) == keccak256(VALIDATOR)){\n            return 0xbc197c81;\n        }\n    }\n\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n        // Move voting rights\n        _moveDelegates(_delegates[from], _delegates[to], amount);\n    }\n\n    /**\n     * @dev implements the proxy transaction used by {ConverterTimeLock-executeTransaction}\n     */\n    function forwardCall(address target, uint256 value, bytes calldata callData) external override payable returns (bool success, bytes memory returnData) {\n        require(msg.sender == converterTimeLock, \"Converter: Caller is not the converterTimeLock contract\");\n        return target.call{value: value}(callData);\n    }\n\n    function getBlockTimestamp() internal view returns (uint) {\n        // solium-disable-next-line security/no-block-members\n        return block.timestamp;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/introspection/ERC165CheckerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165CheckerUpgradeable {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) &&\n            _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool[] memory) {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        // success determines whether the staticcall succeeded and result determines\n        // whether the contract at account indicates support of _interfaceId\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\n\n        return (success && result);\n    }\n\n    /**\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return success true if the STATICCALL succeeded, false otherwise\n     * @return result true if the STATICCALL succeeded and the contract at account\n     * indicates support of the interface with identifier interfaceId, false otherwise\n     */\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\n        private\n        view\n        returns (bool, bool)\n    {\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\n        if (result.length < 32) return (false, false);\n        return (success, abi.decode(result, (bool)));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"../../introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\n    function __ERC1155Receiver_init() internal initializer {\n        __ERC165_init_unchained();\n        __ERC1155Receiver_init_unchained();\n    }\n\n    function __ERC1155Receiver_init_unchained() internal initializer {\n        _registerInterface(\n            ERC1155ReceiverUpgradeable(address(0)).onERC1155Received.selector ^\n            ERC1155ReceiverUpgradeable(address(0)).onERC1155BatchReceived.selector\n        );\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/interfaces/IProxyTransaction.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IProxyTransaction {\n    function forwardCall(address target, uint256 value, bytes calldata callData) external payable returns (bool success, bytes memory returnData);\n}\n"
    },
    "contracts/interfaces/IGetAuctionInfo.sol": {
      "content": "pragma solidity 0.6.12;\n\ninterface IGetAuctionInfo {\n    function onAuction(address uToken, uint nftIndexForUToken) external view returns (bool);\n}"
    },
    "contracts/interfaces/IConverter.sol": {
      "content": "pragma solidity 0.6.12;\n\ninterface IConverter {\n    function setConverterTimeLock(address _converterTimeLock) external;\n}\n"
    },
    "contracts/abstract/ERC20VotesUpgradeable.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\n\n/**\n * Expand the ERC20Burnable contract to include a governance voting feature.\n */\nabstract contract ERC20VotesUpgradeable is ERC20BurnableUpgradeable  {\n    using SafeMathUpgradeable for uint256;\n\n    // Copied and modified from YAM code:\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\n    // Which is copied and modified from COMPOUND:\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\n\n    /// @dev A record of each accounts delegate\n    mapping (address => address) internal _delegates;\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint256 votes;\n    }\n\n    /// @notice A record of votes checkpoints for each account, by index\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping (address => uint32) public numCheckpoints;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    /// @notice A record of states for signing / validating signatures\n    mapping (address => uint) public nonces;\n\n    /// @notice An event thats emitted when an account changes its delegate\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /// @notice An event thats emitted when a delegate account's vote balance changes\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegator The address to get delegatee for\n     */\n    function delegates(address delegator)\n    external\n    view\n    returns (address)\n    {\n        return _delegates[delegator];\n    }\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) external {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * @notice Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(\n        address delegatee,\n        uint nonce,\n        uint expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n    external\n    {\n        bytes32 domainSeparator = keccak256(\n            abi.encode(\n                DOMAIN_TYPEHASH,\n                keccak256(bytes(name())),\n                getChainId(),\n                address(this)\n            )\n        );\n\n        bytes32 structHash = keccak256(\n            abi.encode(\n                DELEGATION_TYPEHASH,\n                delegatee,\n                nonce,\n                expiry\n            )\n        );\n\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                domainSeparator,\n                structHash\n            )\n        );\n\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"UNIC::delegateBySig: invalid signature\");\n        require(nonce == nonces[signatory]++, \"UNIC::delegateBySig: invalid nonce\");\n        require(now <= expiry, \"UNIC::delegateBySig: signature expired\");\n        return _delegate(signatory, delegatee);\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account)\n    external\n    view\n    returns (uint256)\n    {\n        uint32 nCheckpoints = numCheckpoints[account];\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint blockNumber)\n    external\n    view\n    returns (uint256)\n    {\n        require(blockNumber < block.number, \"UNIC::getPriorVotes: not yet determined\");\n\n        uint32 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n            return 0;\n        }\n\n        uint32 lower = 0;\n        uint32 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock < blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    function _delegate(address delegator, address delegatee)\n    internal\n    {\n        address currentDelegate = _delegates[delegator];\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying UNICs (not scaled);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                // decrease old representative\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n                uint256 srcRepNew = srcRepOld.sub(amount);\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                // increase new representative\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n                uint256 dstRepNew = dstRepOld.add(amount);\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        address delegatee,\n        uint32 nCheckpoints,\n        uint256 oldVotes,\n        uint256 newVotes\n    )\n    internal\n    {\n        uint32 blockNumber = safe32(block.number, \"UNIC::_writeCheckpoint: block number exceeds 32 bits\");\n\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function getChainId() internal pure returns (uint) {\n        uint256 chainId;\n        assembly { chainId := chainid() }\n        return chainId;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../introspection/IERC165Upgradeable.sol\";\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"./ERC20Upgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC20Burnable_init_unchained();\n    }\n\n    function __ERC20Burnable_init_unchained() internal initializer {\n    }\n    using SafeMathUpgradeable for uint256;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"./IERC20Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n    uint256[44] private __gap;\n}\n"
    },
    "contracts/PointShop.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/introspection/ERC165Checker.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./Converter.sol\";\nimport \"./PointFarm.sol\";\n\ncontract PointShop is ERC1155Receiver, Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // List of NFTs that have been deposited\n    struct NFT {\n    \taddress contractAddr;\n    \tuint256 tokenId;\n        uint256 amount;\n        uint256 price;\n    }\n\n    // Track whether uToken has a shop\n    mapping(address => bool) public shopExists;\n    // Map uToken to internal NFT id to NFT\n    mapping(address => mapping(uint256 => NFT)) public nfts;\n    // Length of NFTs in each shop\n    mapping(address => uint256) public currentNFTIndex;\n    // Number of redeemed NFTs in each shop\n    mapping(address => uint256) public redeemedNFTs;\n\n    mapping(address => bool) public isPublic;\n    mapping(address => bool) public notAnyAllowed;\n\n    // Map uToken to address to boolean\n    mapping(address => mapping(address => bool)) public isShopAdmin;\n    // Map uToken to contract address to token ID to boolean\n    mapping(address => mapping(address => mapping(uint256 => bool))) public allowedNFTs;\n\n    address public farm;\n\n    bytes private constant VALIDATOR = bytes('JCNH');\n\n    event Deposited(address uToken, uint256[] tokenIDs, uint256[] amounts, address contractAddr);\n\n    constructor(\n        address _farm\n    )\n        public\n    {\n        farm = _farm;\n    }\n\n    function setConstraints(address _uToken, address _contract, uint256[] calldata _ids, bool _isAllowed, bool _notAnyAllowed) public {\n        // Check if issuer OR shopAdmin\n        require(Converter(_uToken).issuer() == msg.sender || isShopAdmin[_uToken][msg.sender], \"PointShop: Only shop admin can set constraints\");\n\n        if(_notAnyAllowed) {\n            notAnyAllowed[_uToken] = _notAnyAllowed;\n            return;\n        }\n\n        require(_ids.length < 200, \"PointShop: Allow at most 200 ids at a time\");\n\n        for (uint8 i=0; i<200; i++) {\n            if (i == _ids.length) {\n                break;\n            }\n\n            allowedNFTs[_uToken][_contract][_ids[i]] = _isAllowed;\n        }\n    }\n\n    function setAdmin(address _uToken, address[] memory _addresses, bool _isAdmin) public {\n        require(Converter(_uToken).issuer() == msg.sender, \"PointShop: Only issuer can set this permission\");\n\n        require(_addresses.length < 200, \"ProxyCreator: Set at most 200 addresses at a time\");\n\n        for (uint8 i=0; i<200; i++) {\n            if (i == _addresses.length) {\n                break;\n            }\n\n            isShopAdmin[_uToken][_addresses[i]] = _isAdmin;\n        }\n    }\n\n    function setPublic(address _uToken, bool _isPublic) public {\n        // Check if issuer OR shopAdmin\n        require(Converter(_uToken).issuer() == msg.sender || isShopAdmin[_uToken][msg.sender], \"PointShop: Only shop admin can set this permission\");\n\n        isPublic[_uToken] = _isPublic;\n    }\n\n    // deposits an nft using the transferFrom action of the NFT contractAddr\n    function deposit(address _uToken, uint256[] calldata tokenIDs, uint256[] calldata amounts, uint256[] calldata prices, address contractAddr) external {\n        if(notAnyAllowed[_uToken]) {\n            for (uint8 i=0; i<200; i++) {\n                if (i == tokenIDs.length) {\n                    break;\n                }\n\n                require(allowedNFTs[_uToken][contractAddr][tokenIDs[i]], \"PointShop: Attempted deposit of non-whitelisted NFT\");\n            }\n        }\n        // Check if issuer OR shop admin OR isPublic\n        require(Converter(_uToken).issuer() == msg.sender ||\n        isShopAdmin[_uToken][msg.sender] || isPublic[_uToken], \"PointShop: Only shop admin can add to shop\");\n        require(tokenIDs.length <= 50, \"PointShop: A maximum of 50 tokens can be deposited in one go\");\n        require(tokenIDs.length > 0, \"PointShop: You must specify at least one token ID\");\n\n        if (ERC165Checker.supportsInterface(contractAddr, 0xd9b67a26)){\n            IERC1155(contractAddr).safeBatchTransferFrom(msg.sender, address(this), tokenIDs, amounts, VALIDATOR);\n\n            for (uint8 i = 0; i < 50; i++){\n                if (tokenIDs.length == i){\n                    break;\n                }\n                nfts[_uToken][currentNFTIndex[_uToken]++] = NFT(contractAddr, tokenIDs[i], amounts[i], prices[i]);\n            }\n        }\n        else {\n            for (uint8 i = 0; i < 50; i++){\n                if (tokenIDs.length == i){\n                    break;\n                }\n                IERC721(contractAddr).transferFrom(msg.sender, address(this), tokenIDs[i]);\n                nfts[_uToken][currentNFTIndex[_uToken]++] = NFT(contractAddr, tokenIDs[i], 1, prices[i]);\n            }\n        }\n\n        emit Deposited(_uToken, tokenIDs, amounts, contractAddr);\n    }\n\n    // Edit existing NFT structs (prices) in shop\n    function modifyShop(address _uToken, uint256[] calldata internalIDs, uint256[] calldata prices) public {\n        require(internalIDs.length <= 50, \"PointShop: A maximum of 50 NFTs can be modified in one go\");\n        require(internalIDs.length > 0, \"PointShop: You must specify at least one internal ID\");\n        // Check if issuer OR shop admin\n        require(Converter(_uToken).issuer() == msg.sender ||\n        isShopAdmin[_uToken][msg.sender], \"PointShop: Only shop admin can modify shop\");\n\n        for (uint8 i = 0; i < 50; i++){\n            if (internalIDs.length == i){\n                break;\n            }\n            NFT storage currentNFT = nfts[_uToken][internalIDs[i]];\n            currentNFT.price = prices[i];\n        }\n    }\n\n    // Function that adds to PointFarm\n    function add(address _uToken, bool _withUpdate) public {\n        require(Converter(_uToken).issuer() == msg.sender ||\n        isShopAdmin[_uToken][msg.sender] || isPublic[_uToken], \"PointShop: Only shop admin can add shop to farm\");\n        require(!shopExists[_uToken], \"PointShop: Already added\");\n        PointFarm(farm).add(IERC20(_uToken), _withUpdate);\n        shopExists[_uToken] = true;\n    }\n\n    // Function that redeems points for NFTs\n    function redeem(address _uToken, uint256 internalID) public {\n        PointFarm(farm).burn(msg.sender, PointFarm(farm).shopIDs(_uToken), nfts[_uToken][internalID].price);\n        NFT storage currentNFT = nfts[_uToken][internalID];\n        currentNFT.amount = 0;\n        if (ERC165Checker.supportsInterface(nfts[_uToken][internalID].contractAddr, 0xd9b67a26)){\n            IERC1155(nfts[_uToken][internalID].contractAddr).safeTransferFrom(address(this), msg.sender, nfts[_uToken][internalID].tokenId, nfts[_uToken][internalID].amount, VALIDATOR);\n        }\n        else {\n            IERC721(nfts[_uToken][internalID].contractAddr).transferFrom(address(this), msg.sender, nfts[_uToken][internalID].tokenId);\n        }\n    }\n\n    /**\n     * ERC1155 Token ERC1155Receiver\n     */\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) override external returns(bytes4) {\n        if(keccak256(_data) == keccak256(VALIDATOR)){\n            return 0xf23a6e61;\n        }\n    }\n\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) override external returns(bytes4) {\n        if(keccak256(_data) == keccak256(VALIDATOR)){\n            return 0xbc197c81;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC1155Receiver.sol\";\nimport \"../../introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    constructor() internal {\n        _registerInterface(\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\n            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) &&\n            _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool[] memory) {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        // success determines whether the staticcall succeeded and result determines\n        // whether the contract at account indicates support of _interfaceId\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\n\n        return (success && result);\n    }\n\n    /**\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return success true if the STATICCALL succeeded, false otherwise\n     * @return result true if the STATICCALL succeeded and the contract at account\n     * indicates support of the interface with identifier interfaceId, false otherwise\n     */\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\n        private\n        view\n        returns (bool, bool)\n    {\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\n        if (result.length < 32) return (false, false);\n        return (success, abi.decode(result, (bool)));\n    }\n}\n"
    },
    "contracts/PointFarm.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// Copied from https://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChef.sol\n// Modified by 0xLeia\n\ncontract PointFarm is ERC1155Burnable, ERC1155Receiver, Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    bytes private constant VALIDATOR = bytes('JCNH');\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount;     // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of points\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accPointsPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accPointsPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 uToken;           // Address of LP token contract.\n        uint256 lastRewardBlock;  // Last block number that points distribution occurs.\n        uint256 accPointsPerShare; // Accumulated points per share, times 1e18. See below.\n    }\n\n    // Whitelist mapping of address to bool\n    mapping(address => bool) public whitelist;\n    // Mapping of uToken to shopIDs\n    mapping(address => uint256) public shopIDs;\n    uint256 public currentShopIndex = 0;\n    // Points created per block.\n    uint256 public pointsPerBlock;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n    // The block number when pointfarming starts.\n    uint256 public startBlock;\n\n    address public shop;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    // New events so that the graph works\n    event Add(address uToken, bool withUpdate);\n    event MassUpdatePools();\n    event UpdatePool(uint256 pid);\n    event URI(string _uri);\n\n    constructor(\n        uint256 _pointsPerBlock,\n        uint256 _startBlock,\n        string memory _uri\n    )\n        public\n        ERC1155(_uri)\n    {\n        pointsPerBlock = _pointsPerBlock;\n        startBlock = _startBlock;\n    }\n\n    function setURI(string memory newuri) public onlyOwner {\n        _setURI(newuri);\n        emit URI(newuri);\n    }\n\n    // Unless being used for redeem, points are non transferrable\n    function safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) override virtual public {\n        require(from == address(this) || to == address(this), \"Points can not be transferred out\");\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) override virtual public {\n        require(from == address(this) || to == address(this), \"Points can not be transferred out\");\n        super.safeTransferFrom(from, to, id, amount, data);\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new uToken to the pool. Can only be called by the shop contract.\n    function add(IERC20 _uToken, bool _withUpdate) public {\n        require(msg.sender == shop, \"PointFarm: Only shop contract can add\");\n        require(!whitelist[address(_uToken)]);\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        poolInfo.push(PoolInfo({\n            uToken: _uToken,\n            lastRewardBlock: lastRewardBlock,\n            accPointsPerShare: 0\n        }));\n\n        whitelist[address(_uToken)] = true;\n        shopIDs[address(_uToken)] = currentShopIndex++;\n\n        emit Add(address(_uToken), _withUpdate);\n    }\n\n    // Return rewards over the given _from to _to block.\n    function getRewards(uint256 _from, uint256 _to) public view returns (uint256) {\n        return _to.sub(_from).mul(pointsPerBlock);\n    }\n\n    // View function to see pending points on frontend.\n    function pendingPoints(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accPointsPerShare = pool.accPointsPerShare;\n        uint256 uTokenSupply = pool.uToken.balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && uTokenSupply != 0) {\n            uint256 pointReward = getRewards(pool.lastRewardBlock, block.number);\n            accPointsPerShare = accPointsPerShare.add(pointReward.mul(1e18).div(uTokenSupply));\n        }\n        return user.amount.mul(accPointsPerShare).div(1e18).sub(user.rewardDebt);\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n\n        emit MassUpdatePools();\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 uTokenSupply = pool.uToken.balanceOf(address(this));\n        if (uTokenSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 pointReward = getRewards(pool.lastRewardBlock, block.number);\n        pool.accPointsPerShare = pool.accPointsPerShare.add(pointReward.mul(1e18).div(uTokenSupply));\n        pool.lastRewardBlock = block.number;\n\n        emit UpdatePool(_pid);\n    }\n\n    // Deposit uTokens to PointFarm to farm points.\n    function deposit(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accPointsPerShare).div(1e18).sub(user.rewardDebt);\n            if(pending > 0) {\n                bytes memory data;\n                _mint(msg.sender, _pid, pending, data);\n            }\n        }\n        if(_amount > 0) {\n            pool.uToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n            user.amount = user.amount.add(_amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accPointsPerShare).div(1e18);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw uTokens from PointFarm.\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accPointsPerShare).div(1e18).sub(user.rewardDebt);\n        if(pending > 0) {\n            bytes memory data;\n            _mint(msg.sender, _pid, pending, data);\n        }\n        if(_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.uToken.safeTransfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accPointsPerShare).div(1e18);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        pool.uToken.safeTransfer(address(msg.sender), amount);\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n\n    // Set mint rate\n    function setMintRules(uint256 _pointsPerBlock) public onlyOwner {\n        pointsPerBlock = _pointsPerBlock;\n    }\n\n    function setStartBlock(uint256 _startBlock) public onlyOwner {\n        require(block.number < startBlock, \"start block can not be modified after it has passed\");\n        require(block.number < _startBlock, \"new start block needs to be in the future\");\n        startBlock = _startBlock;\n    }\n\n    // Change shop address\n    function setShop(address _shop) public onlyOwner {\n        shop = _shop;\n    }\n\n    /**\n     * ERC1155 Token ERC1155Receiver\n     */\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) override external returns(bytes4) {\n        if(keccak256(_data) == keccak256(VALIDATOR)){\n            return 0xf23a6e61;\n        }\n    }\n\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) override external returns(bytes4) {\n        if(keccak256(_data) == keccak256(VALIDATOR)){\n            return 0xbc197c81;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./ERC1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(address account, uint256 id, uint256 value) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155MetadataURI.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../introspection/ERC165.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n *\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using SafeMath for uint256;\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping (uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\n     *\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\n     */\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\n\n    /*\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\n     */\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor (string memory uri_) public {\n        _setURI(uri_);\n\n        // register the supported interfaces to conform to ERC1155 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC1155);\n\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) external view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    )\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][from] = _balances[id][from].sub(amount, \"ERC1155: insufficient balance for transfer\");\n        _balances[id][to] = _balances[id][to].add(amount);\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            _balances[id][from] = _balances[id][from].sub(\n                amount,\n                \"ERC1155: insufficient balance for transfer\"\n            );\n            _balances[id][to] = _balances[id][to].add(amount);\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][account] = _balances[id][account].add(amount);\n        emit TransferSingle(operator, address(0), account, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `account`\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        _balances[id][account] = _balances[id][account].sub(\n            amount,\n            \"ERC1155: burn amount exceeds balance\"\n        );\n\n        emit TransferSingle(operator, account, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\n\n        for (uint i = 0; i < ids.length; i++) {\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\n                amounts[i],\n                \"ERC1155: burn amount exceeds balance\"\n            );\n        }\n\n        emit TransferBatch(operator, account, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        internal\n        virtual\n    { }\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    )\n        private\n    {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        private\n    {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "contracts/UnicVester.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./UnicSwap/interfaces/IUnicSwapV2Factory.sol\";\nimport \"./UnicSwap/interfaces/IUnicSwapV2Pair.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/math/Math.sol\";\n\ncontract UnicVester is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IUnicSwapV2Factory public factory;\n    address public bar;\n    address public unic;\n    address public weth;\n\n    uint256 public vestingDuration;\n\n    mapping(address => Schedule) public vestings;\n    mapping(address => bool) public initialized;\n\n    struct Schedule {\n        uint256 amount;\n        uint256 start;\n        uint256 end;\n    }\n\n    constructor(IUnicSwapV2Factory _factory, address _bar, address _unic, address _weth) public {\n        factory = _factory;\n        unic = _unic;\n        bar = _bar;\n        weth = _weth;\n    }\n\n    // Initializes vesting schedule for new uToken\n    function initialize(address token) onlyOwner public {\n        require(!initialized[token], \"UnicVester: Already initialized token\");\n        vestings[token] = Schedule(\n            {\n                amount: IERC20(token).balanceOf(address(this)),\n                start: getBlockTimestamp(),\n                end: getBlockTimestamp().add(vestingDuration)\n            }\n        );\n    }\n\n    // Set protocol's vesting schedule for future uTokens\n    function setSchedule(uint256 _vestingDuration) onlyOwner public {\n        vestingDuration = _vestingDuration;\n    }\n    \n    function swap(address token) onlyOwner public {\n        require(msg.sender == tx.origin, \"do not convert from contract\");\n\n        Schedule storage vestingInfo = vestings[token];\n        require(vestingInfo.start < vestingInfo.end, \"UnicVester: Fully vested and swapped\");\n        uint256 currentTime = getBlockTimestamp();\n        uint256 timeVested = Math.min(currentTime.sub(vestingInfo.start), vestingInfo.end.sub(vestingInfo.start));\n        uint256 amountVested = Math.min(vestingInfo.amount.mul(timeVested).div(vestingInfo.end.sub(vestingInfo.start)), IERC20(token).balanceOf(address(this)));\n        vestingInfo.start = currentTime;\n        if(vestingInfo.amount < amountVested) {\n            vestingInfo.amount = 0;\n        }\n        else {\n            vestingInfo.amount = vestingInfo.amount.sub(amountVested);\n        }\n        uint256 wethAmount = _toWETH(token, amountVested);\n        _toUNIC(wethAmount);\n    }\n\n    // Converts token passed as an argument to WETH\n    function _toWETH(address token, uint amountIn) internal returns (uint256) {\n        // If the passed token is Unic, don't convert anything\n        if (token == unic) {\n            _safeTransfer(token, bar, amountIn);\n            return 0;\n        }\n        // If the passed token is WETH, don't convert anything\n        if (token == weth) {\n            _safeTransfer(token, factory.getPair(weth, unic), amountIn);\n            return amountIn;\n        }\n        // If the target pair doesn't exist, don't convert anything\n        IUnicSwapV2Pair pair = IUnicSwapV2Pair(factory.getPair(token, weth));\n        if (address(pair) == address(0)) {\n            return 0;\n        }\n        // Choose the correct reserve to swap from\n        (uint reserve0, uint reserve1,) = pair.getReserves();\n        address token0 = pair.token0();\n        (uint reserveIn, uint reserveOut) = token0 == token ? (reserve0, reserve1) : (reserve1, reserve0);\n        // Calculate information required to swap\n        uint amountInWithFee = amountIn.mul(997);\n        uint amountOut = amountInWithFee.mul(reserveOut) / reserveIn.mul(1000).add(amountInWithFee);\n        (uint amount0Out, uint amount1Out) = token0 == token ? (uint(0), amountOut) : (amountOut, uint(0));\n        _safeTransfer(token, address(pair), amountIn);\n        pair.swap(amount0Out, amount1Out, factory.getPair(weth, unic), new bytes(0));\n        return amountOut;\n    }\n\n    // Converts WETH to Unic\n    function _toUNIC(uint256 amountIn) internal {\n        IUnicSwapV2Pair pair = IUnicSwapV2Pair(factory.getPair(weth, unic));\n        // Choose WETH as input token\n        (uint reserve0, uint reserve1,) = pair.getReserves();\n        address token0 = pair.token0();\n        (uint reserveIn, uint reserveOut) = token0 == weth ? (reserve0, reserve1) : (reserve1, reserve0);\n        // Calculate information required to swap\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        uint amountOut = numerator / denominator;\n        (uint amount0Out, uint amount1Out) = token0 == weth ? (uint(0), amountOut) : (amountOut, uint(0));\n        // Swap WETH for Unic\n        pair.swap(amount0Out, amount1Out, bar, new bytes(0));\n    }\n\n    // Wrapper for safeTransfer\n    function _safeTransfer(address token, address to, uint256 amount) internal {\n        IERC20(token).safeTransfer(to, amount);\n    }\n\n    function getBlockTimestamp() internal view returns (uint) {\n        // solium-disable-next-line security/no-block-members\n        return block.timestamp;\n    }\n}"
    },
    "contracts/UnicSwap/interfaces/IUnicSwapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUnicSwapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/UnicSwap/interfaces/IUnicSwapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUnicSwapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@openzeppelin/contracts/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "contracts/Zap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./interfaces/IZap.sol\";\nimport \"./interfaces/IUniclyXUnicVault.sol\";\nimport \"./UnicSwap/interfaces/IUnicFarm.sol\";\nimport \"./UnicSwap/interfaces/IUnicSwapV2Pair.sol\";\nimport \"./UnicSwap/interfaces/IUnicSwapV2Router02.sol\";\n\ncontract Zap is IZap, OwnableUpgradeable {\n    using SafeMath for uint;\n    using SafeERC20 for IERC20;\n\n    /* ========== CONSTANT VARIABLES ========== */\n\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n    address private constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address private constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address private constant UNIC = 0x94E0BAb2F6Ab1F19F4750E42d7349f2740513aD5;\n\n    IUnicFarm private constant UNIC_FARM = IUnicFarm(0x4A25E4DF835B605A5848d2DB450fA600d96ee818);\n    IUnicSwapV2Router02 private constant UNIC_ROUTER = IUnicSwapV2Router02(0xE6E90bC9F3b95cdB69F48c7bFdd0edE1386b135a);\n    IUnicSwapV2Router02 private constant UNI_ROUTER = IUnicSwapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n    /* ========== STATE VARIABLES ========== */\n\n    mapping(address => bool) private notLP;\n    mapping(address => bool) private uniclySupported;\n    mapping(address => address) private routePairAddresses;\n    mapping(address => bool) private haveApprovedToken;\n\n    IUniclyXUnicVault private xUnicVault;\n\n    /* ========== INITIALIZER ========== */\n\n    function initialize(address _xUnicVault) external initializer {\n        __Ownable_init();\n        require(owner() != address(0), \"Zap: owner must be set\");\n\n        setNotLP(WETH);\n        setNotLP(USDT);\n        setNotLP(USDC);\n        setNotLP(DAI);\n        setNotLP(UNIC);\n\n        setUniclySupported(WETH);\n        setUniclySupported(UNIC);\n\n        xUnicVault = IUniclyXUnicVault(_xUnicVault);\n    }\n\n    receive() external payable {}\n\n    /* ========== View Functions ========== */\n\n    function isNotUniclySupported(address _address) public view returns (bool) {\n        return !uniclySupported[_address];\n    }\n\n    function isLP(address _address) public view returns (bool) {\n        return !notLP[_address];\n    }\n\n    function routePair(address _address) external view returns(address) {\n        return routePairAddresses[_address];\n    }\n\n    /* ========== External Functions ========== */\n\n    function zapInTokenAndDeposit(address _from, uint amount, uint _pid) external override {\n        (IERC20 lpToken,,,,) = UNIC_FARM.poolInfo(_pid);\n        zapInTokenFor(_from, amount, address(lpToken));\n        _approveTokenIfNeeded(address(lpToken));\n        uint depositAmount = lpToken.balanceOf(address(this));\n        xUnicVault.depositFor(_pid, depositAmount, msg.sender);\n    }\n\n    function zapInAndDeposit(uint _pid) external override payable {\n        (IERC20 lpToken,,,,) = UNIC_FARM.poolInfo(_pid);\n        _swapETHToLP(address(lpToken), msg.value);\n        _approveTokenIfNeeded(address(lpToken));\n        uint depositAmount = lpToken.balanceOf(address(this));\n        xUnicVault.depositFor(_pid, depositAmount, msg.sender);\n    }\n\n    /* ========== Private Functions ========== */\n\n    function zapInTokenFor(address _from, uint amount, address _to) private {\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\n        _approveTokenIfNeeded(_from);\n\n        if (isLP(_to)) {\n            IUnicSwapV2Pair pair = IUnicSwapV2Pair(_to);\n            address token0 = pair.token0();\n            address token1 = pair.token1();\n            if (_from == token0 || _from == token1) {\n                // swap half amount for other\n                address other = _from == token0 ? token1 : token0;\n                _approveTokenIfNeeded(other);\n                uint sellAmount = amount.div(2);\n                uint otherAmount = _swap(_from, sellAmount, other);\n                UNIC_ROUTER.addLiquidity(_from, other, amount.sub(sellAmount), otherAmount, 0, 0, address(this), block.timestamp);\n            } else {\n                uint ethAmount = _swapTokenForETH(_from, amount);\n                _swapETHToLP(_to, ethAmount);\n            }\n        } else {\n            _swap(_from, amount, _to);\n        }\n    }\n\n    function _swapETHToLP(address lp, uint amount) private {\n        if (!isLP(lp)) {\n            _swapETHForToken(lp, amount);\n        } else {\n            // lp\n            IUnicSwapV2Pair pair = IUnicSwapV2Pair(lp);\n            address token0 = pair.token0();\n            address token1 = pair.token1();\n            if (token0 == WETH || token1 == WETH) {\n                address token = token0 == WETH ? token1 : token0;\n                uint swapValue = amount.div(2);\n                uint tokenAmount = _swapETHForToken(token, swapValue);\n\n                _approveTokenIfNeeded(token);\n                UNIC_ROUTER.addLiquidityETH{value : amount.sub(swapValue)}(token, tokenAmount, 0, 0, address(this), block.timestamp);\n            } else {\n                uint swapValue = amount.div(2);\n                uint token0Amount = _swapETHForToken(token0, swapValue);\n                uint token1Amount = _swapETHForToken(token1, amount.sub(swapValue));\n\n                _approveTokenIfNeeded(token0);\n                _approveTokenIfNeeded(token1);\n                UNIC_ROUTER.addLiquidity(token0, token1, token0Amount, token1Amount, 0, 0, address(this), block.timestamp);\n            }\n        }\n    }\n\n    function _swapETHForToken(address token, uint value) private returns (uint) {\n        address[] memory path;\n\n        if (routePairAddresses[token] != address(0)) {\n            path = new address[](3);\n            path[0] = WETH;\n            path[1] = routePairAddresses[token];\n            path[2] = token;\n        } else {\n            path = new address[](2);\n            path[0] = WETH;\n            path[1] = token;\n        }\n\n        uint[] memory amounts = UNIC_ROUTER.swapExactETHForTokens{value : value}(0, path, address(this), block.timestamp);\n        return amounts[amounts.length - 1];\n    }\n\n    function _swapTokenForETH(address token, uint amount) private returns (uint) {\n        address[] memory path;\n        if (routePairAddresses[token] != address(0)) {\n            path = new address[](3);\n            path[0] = token;\n            path[1] = routePairAddresses[token];\n            path[2] = WETH;\n        } else {\n            path = new address[](2);\n            path[0] = token;\n            path[1] = WETH;\n        }\n\n        uint[] memory amounts;\n        if (isNotUniclySupported(token)) {\n            amounts = UNI_ROUTER.swapExactTokensForETH(amount, 0, path, address(this), block.timestamp);\n        } else {\n            amounts = UNIC_ROUTER.swapExactTokensForETH(amount, 0, path, address(this), block.timestamp);\n        }\n        return amounts[amounts.length - 1];\n    }\n\n    function _swap(address _from, uint amount, address _to) private returns (uint) {\n        address intermediate = routePairAddresses[_from];\n        if (intermediate == address(0)) {\n            intermediate = routePairAddresses[_to];\n        }\n\n        address[] memory path;\n        if (intermediate != address(0) && (_from == WETH || _to == WETH)) {\n            // [WETH, BUSD, VAI] or [VAI, BUSD, WETH]\n            path = new address[](3);\n            path[0] = _from;\n            path[1] = intermediate;\n            path[2] = _to;\n        } else if (intermediate != address(0) && (_from == intermediate || _to == intermediate)) {\n            // [VAI, BUSD] or [BUSD, VAI]\n            path = new address[](2);\n            path[0] = _from;\n            path[1] = _to;\n        } else if (intermediate != address(0) && routePairAddresses[_from] == routePairAddresses[_to]) {\n            // [VAI, DAI] or [VAI, USDC]\n            path = new address[](3);\n            path[0] = _from;\n            path[1] = intermediate;\n            path[2] = _to;\n        } else if (routePairAddresses[_from] != address(0) && routePairAddresses[_from] != address(0) && routePairAddresses[_from] != routePairAddresses[_to]) {\n            // routePairAddresses[xToken] = xRoute\n            // [VAI, BUSD, WETH, xRoute, xToken]\n            path = new address[](5);\n            path[0] = _from;\n            path[1] = routePairAddresses[_from];\n            path[2] = WETH;\n            path[3] = routePairAddresses[_to];\n            path[4] = _to;\n        } else if (intermediate != address(0) && routePairAddresses[_from] != address(0)) {\n            // [VAI, BUSD, WETH, BUNNY]\n            path = new address[](4);\n            path[0] = _from;\n            path[1] = intermediate;\n            path[2] = WETH;\n            path[3] = _to;\n        } else if (intermediate != address(0) && routePairAddresses[_to] != address(0)) {\n            // [BUNNY, WETH, BUSD, VAI]\n            path = new address[](4);\n            path[0] = _from;\n            path[1] = WETH;\n            path[2] = intermediate;\n            path[3] = _to;\n        } else if (_from == WETH || _to == WETH) {\n            // [WETH, BUNNY] or [BUNNY, WETH]\n            path = new address[](2);\n            path[0] = _from;\n            path[1] = _to;\n        } else {\n            // [USDT, BUNNY] or [BUNNY, USDT]\n            path = new address[](3);\n            path[0] = _from;\n            path[1] = WETH;\n            path[2] = _to;\n        }\n\n        uint[] memory amounts = UNIC_ROUTER.swapExactTokensForTokens(amount, 0, path, address(this), block.timestamp);\n        return amounts[amounts.length - 1];\n    }\n\n    function _approveTokenIfNeeded(address token) private {\n        if (!haveApprovedToken[token]) {\n            IERC20(token).safeApprove(address(UNIC_ROUTER), uint(- 1));\n            IERC20(token).safeApprove(address(UNI_ROUTER), uint(- 1));\n            IERC20(token).safeApprove(address(xUnicVault), uint(- 1));\n            haveApprovedToken[token] = true;\n        }\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function setRoutePairAddress(address asset, address route) external onlyOwner {\n        routePairAddresses[asset] = route;\n    }\n\n    function setUniclySupported(address token) public onlyOwner {\n        uniclySupported[token] = true;\n    }\n\n    function setNotLP(address token) public onlyOwner {\n        notLP[token] = true;\n    }\n\n    function withdraw(address token) external onlyOwner {\n        if (token == address(0)) {\n            payable(owner()).transfer(address(this).balance);\n            return;\n        }\n\n        IERC20(token).transfer(owner(), IERC20(token).balanceOf(address(this)));\n    }\n}"
    },
    "contracts/interfaces/IZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\ninterface IZap {\n    function zapInTokenAndDeposit(address _from, uint amount, uint _pid) external;\n    function zapInAndDeposit(uint _pid) external payable;\n}"
    },
    "contracts/interfaces/IUniclyXUnicVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\ninterface IUniclyXUnicVault {\n    function depositFor(uint256 _pid, uint256 _amount, address _user) external;\n}"
    },
    "contracts/UnicSwap/interfaces/IUnicFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IUnicFarm {\n    function pendingUnic(uint256 _pid, address _user) external view returns (uint256);\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function poolInfo(uint256 _pid) external view returns (IERC20, uint256, uint256, uint256, address);\n\n    function poolLength() external view returns (uint256);\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n}"
    },
    "contracts/UnicSwap/interfaces/IUnicSwapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUnicSwapV2Router01.sol';\n\ninterface IUnicSwapV2Router02 is IUnicSwapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n/*\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    */\n}"
    },
    "contracts/UnicSwap/interfaces/IUnicSwapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUnicSwapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/UnicSwap/UnicSwapV2Router02.sol": {
      "content": "pragma solidity =0.6.12;\n\nimport './interfaces/IUnicSwapV2Factory.sol';\nimport './libraries/TransferHelper.sol';\n\nimport './interfaces/IUnicSwapV2Router02.sol';\nimport './libraries/UnicSwapV2Library.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport './interfaces/IWETH.sol';\n\ncontract UnicSwapV2Router02 is IUnicSwapV2Router02 {\n    using SafeMath for uint;\n\n    address public immutable override factory;\n    address public immutable override WETH;\n\n    modifier ensure(uint deadline) {\n        require(deadline >= block.timestamp, 'UnicSwapV2Router: EXPIRED');\n        _;\n    }\n\n    constructor(address _factory, address _WETH) public {\n        factory = _factory;\n        WETH = _WETH;\n    }\n\n    receive() external payable {\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n    }\n\n    // **** ADD LIQUIDITY ****\n    function _addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin\n    ) internal virtual returns (uint amountA, uint amountB) {\n        // create the pair if it doesn't exist yet\n        if (IUnicSwapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) {\n            IUnicSwapV2Factory(factory).createPair(tokenA, tokenB);\n        }\n        (uint reserveA, uint reserveB) = UnicSwapV2Library.getReserves(factory, tokenA, tokenB);\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n        } else {\n            uint amountBOptimal = UnicSwapV2Library.quote(amountADesired, reserveA, reserveB);\n            if (amountBOptimal <= amountBDesired) {\n                require(amountBOptimal >= amountBMin, 'UnicSwapV2Router: INSUFFICIENT_B_AMOUNT');\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n            } else {\n                uint amountAOptimal = UnicSwapV2Library.quote(amountBDesired, reserveB, reserveA);\n                assert(amountAOptimal <= amountADesired);\n                require(amountAOptimal >= amountAMin, 'UnicSwapV2Router: INSUFFICIENT_A_AMOUNT');\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n            }\n        }\n    }\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n        address pair = UnicSwapV2Library.pairFor(factory, tokenA, tokenB);\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\n        liquidity = IUnicSwapV2Pair(pair).mint(to);\n    }\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\n        (amountToken, amountETH) = _addLiquidity(\n            token,\n            WETH,\n            amountTokenDesired,\n            msg.value,\n            amountTokenMin,\n            amountETHMin\n        );\n        address pair = UnicSwapV2Library.pairFor(factory, token, WETH);\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n        IWETH(WETH).deposit{value: amountETH}();\n        assert(IWETH(WETH).transfer(pair, amountETH));\n        liquidity = IUnicSwapV2Pair(pair).mint(to);\n        // refund dust eth, if any\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n    }\n\n    // **** REMOVE LIQUIDITY ****\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\n        address pair = UnicSwapV2Library.pairFor(factory, tokenA, tokenB);\n        IUnicSwapV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n        (uint amount0, uint amount1) = IUnicSwapV2Pair(pair).burn(to);\n        (address token0,) = UnicSwapV2Library.sortTokens(tokenA, tokenB);\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n        require(amountA >= amountAMin, 'UnicSwapV2Router: INSUFFICIENT_A_AMOUNT');\n        require(amountB >= amountBMin, 'UnicSwapV2Router: INSUFFICIENT_B_AMOUNT');\n    }\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {\n        (amountToken, amountETH) = removeLiquidity(\n            token,\n            WETH,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            address(this),\n            deadline\n        );\n        TransferHelper.safeTransfer(token, to, amountToken);\n        IWETH(WETH).withdraw(amountETH);\n        TransferHelper.safeTransferETH(to, amountETH);\n    }\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external virtual override returns (uint amountA, uint amountB) {\n        address pair = UnicSwapV2Library.pairFor(factory, tokenA, tokenB);\n        uint value = approveMax ? uint(-1) : liquidity;\n        IUnicSwapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\n    }\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external virtual override returns (uint amountToken, uint amountETH) {\n        address pair = UnicSwapV2Library.pairFor(factory, token, WETH);\n        uint value = approveMax ? uint(-1) : liquidity;\n        IUnicSwapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\n    }\n\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountETH) {\n        (, amountETH) = removeLiquidity(\n            token,\n            WETH,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            address(this),\n            deadline\n        );\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\n        IWETH(WETH).withdraw(amountETH);\n        TransferHelper.safeTransferETH(to, amountETH);\n    }\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external virtual override returns (uint amountETH) {\n        address pair = UnicSwapV2Library.pairFor(factory, token, WETH);\n        uint value = approveMax ? uint(-1) : liquidity;\n        IUnicSwapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\n            token, liquidity, amountTokenMin, amountETHMin, to, deadline\n        );\n    }\n\n    // **** SWAP ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\n        for (uint i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0,) = UnicSwapV2Library.sortTokens(input, output);\n            uint amountOut = amounts[i + 1];\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n            address to = i < path.length - 2 ? UnicSwapV2Library.pairFor(factory, output, path[i + 2]) : _to;\n            IUnicSwapV2Pair(UnicSwapV2Library.pairFor(factory, input, output)).swap(\n                amount0Out, amount1Out, to, new bytes(0)\n            );\n        }\n    }\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n        amounts = UnicSwapV2Library.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UnicSwapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UnicSwapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n        amounts = UnicSwapV2Library.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, 'UnicSwapV2Router: EXCESSIVE_INPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UnicSwapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[0] == WETH, 'UnicSwapV2Router: INVALID_PATH');\n        amounts = UnicSwapV2Library.getAmountsOut(factory, msg.value, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UnicSwapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(IWETH(WETH).transfer(UnicSwapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n    }\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[path.length - 1] == WETH, 'UnicSwapV2Router: INVALID_PATH');\n        amounts = UnicSwapV2Library.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, 'UnicSwapV2Router: EXCESSIVE_INPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UnicSwapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[path.length - 1] == WETH, 'UnicSwapV2Router: INVALID_PATH');\n        amounts = UnicSwapV2Library.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UnicSwapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UnicSwapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[0] == WETH, 'UnicSwapV2Router: INVALID_PATH');\n        amounts = UnicSwapV2Library.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= msg.value, 'UnicSwapV2Router: EXCESSIVE_INPUT_AMOUNT');\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(IWETH(WETH).transfer(UnicSwapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n        // refund dust eth, if any\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\n    }\n\n    /*\n    // **** SWAP (supporting fee-on-transfer tokens) ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\n        for (uint i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0,) = UnicSwapV2Library.sortTokens(input, output);\n            IUnicSwapV2Pair pair = IUnicSwapV2Pair(UnicSwapV2Library.pairFor(factory, input, output));\n            uint amountInput;\n            uint amountOutput;\n            { // scope to avoid stack too deep errors\n            (uint reserve0, uint reserve1,) = pair.getReserves();\n            (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n            amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\n            amountOutput = UnicSwapV2Library.getAmountOut(amountInput, reserveInput, reserveOutput);\n            }\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\n            address to = i < path.length - 2 ? UnicSwapV2Library.pairFor(factory, output, path[i + 2]) : _to;\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) {\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UnicSwapV2Library.pairFor(factory, path[0], path[1]), amountIn\n        );\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(path, to);\n        require(\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n            'UnicSwapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\n        );\n    }\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n    {\n        require(path[0] == WETH, 'UnicSwapV2Router: INVALID_PATH');\n        uint amountIn = msg.value;\n        IWETH(WETH).deposit{value: amountIn}();\n        assert(IWETH(WETH).transfer(UnicSwapV2Library.pairFor(factory, path[0], path[1]), amountIn));\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(path, to);\n        require(\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n            'UnicSwapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\n        );\n    }\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n        virtual\n        override\n        ensure(deadline)\n    {\n        require(path[path.length - 1] == WETH, 'UnicSwapV2Router: INVALID_PATH');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UnicSwapV2Library.pairFor(factory, path[0], path[1]), amountIn\n        );\n        _swapSupportingFeeOnTransferTokens(path, address(this));\n        uint amountOut = IERC20(WETH).balanceOf(address(this));\n        require(amountOut >= amountOutMin, 'UnicSwapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n        IWETH(WETH).withdraw(amountOut);\n        TransferHelper.safeTransferETH(to, amountOut);\n    }\n    */\n    // **** LIBRARY FUNCTIONS ****\n    function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {\n        return UnicSwapV2Library.quote(amountA, reserveA, reserveB);\n    }\n\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)\n        public\n        pure\n        virtual\n        override\n        returns (uint amountOut)\n    {\n        return UnicSwapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)\n        public\n        pure\n        virtual\n        override\n        returns (uint amountIn)\n    {\n        return UnicSwapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);\n    }\n\n    function getAmountsOut(uint amountIn, address[] memory path)\n        public\n        view\n        virtual\n        override\n        returns (uint[] memory amounts)\n    {\n        return UnicSwapV2Library.getAmountsOut(factory, amountIn, path);\n    }\n\n    function getAmountsIn(uint amountOut, address[] memory path)\n        public\n        view\n        virtual\n        override\n        returns (uint[] memory amounts)\n    {\n        return UnicSwapV2Library.getAmountsIn(factory, amountOut, path);\n    }\n}\n"
    },
    "contracts/UnicSwap/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}"
    },
    "contracts/UnicSwap/libraries/UnicSwapV2Library.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport '../interfaces/IUnicSwapV2Pair.sol';\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nlibrary UnicSwapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UnicSwapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UnicSwapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'bfcc62b757e2ca00eee45a5dd8129354c7b4f88da9cbdfe4da3b2a55bf698633' // init code hash\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUnicSwapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UnicSwapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UnicSwapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UnicSwapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UnicSwapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UnicSwapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UnicSwapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UnicSwapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UnicSwapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"
    },
    "contracts/UnicSwap/interfaces/IWETH.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}"
    },
    "contracts/UnicSwap/UnicSwapV2Pair.sol": {
      "content": "pragma solidity =0.6.12;\n\nimport './UnicSwapV2ERC20.sol';\nimport './libraries/Math.sol';\nimport './libraries/UQ112x112.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport './interfaces/IUnicSwapV2Factory.sol';\nimport './interfaces/IUnicSwapV2Callee.sol';\n\ncontract UnicSwapV2Pair is UnicSwapV2ERC20 {\n    using SafeMath  for uint;\n    using UQ112x112 for uint224;\n\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n\n    address public factory;\n    address public token0;\n    address public token1;\n\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\n\n    uint public price0CumulativeLast;\n    uint public price1CumulativeLast;\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n\n    uint private unlocked = 1;\n    modifier lock() {\n        require(unlocked == 1, 'UnicSwap: LOCKED');\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n\n    function _safeTransfer(address token, address to, uint value) private {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'UnicSwap: TRANSFER_FAILED');\n    }\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    constructor() public {\n        factory = msg.sender;\n    }\n\n    // called once by the factory at time of deployment\n    function initialize(address _token0, address _token1) external {\n        require(msg.sender == factory, 'UnicSwap: FORBIDDEN'); // sufficient check\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    // update reserves and, on the first call per block, price accumulators\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UnicSwap: OVERFLOW');\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n            // * never overflows, and + overflow is desired\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n        }\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\n        address feeTo = IUnicSwapV2Factory(factory).feeTo();\n        feeOn = feeTo != address(0);\n        uint _kLast = kLast; // gas savings\n        if (feeOn) {\n            if (_kLast != 0) {\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\n                uint rootKLast = Math.sqrt(_kLast);\n                if (rootK > rootKLast) {\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\n                    uint denominator = rootK.mul(5).add(rootKLast);\n                    uint liquidity = numerator / denominator;\n                    if (liquidity > 0) _mint(feeTo, liquidity);\n                }\n            }\n        } else if (_kLast != 0) {\n            kLast = 0;\n        }\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function mint(address to) external lock returns (uint liquidity) {\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        uint balance0 = IERC20(token0).balanceOf(address(this));\n        uint balance1 = IERC20(token1).balanceOf(address(this));\n        uint amount0 = balance0.sub(_reserve0);\n        uint amount1 = balance1.sub(_reserve1);\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        if (_totalSupply == 0) {\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n        } else {\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n        }\n        require(liquidity > 0, 'UnicSwap: INSUFFICIENT_LIQUIDITY_MINTED');\n        _mint(to, liquidity);\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        address _token0 = token0;                                // gas savings\n        address _token1 = token1;                                // gas savings\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\n        uint liquidity = balanceOf[address(this)];\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n        require(amount0 > 0 && amount1 > 0, 'UnicSwap: INSUFFICIENT_LIQUIDITY_BURNED');\n        _burn(address(this), liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\n        require(amount0Out > 0 || amount1Out > 0, 'UnicSwap: INSUFFICIENT_OUTPUT_AMOUNT');\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UnicSwap: INSUFFICIENT_LIQUIDITY');\n\n        uint balance0;\n        uint balance1;\n        { // scope for _token{0,1}, avoids stack too deep errors\n        address _token0 = token0;\n        address _token1 = token1;\n        require(to != _token0 && to != _token1, 'UnicSwap: INVALID_TO');\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n        if (data.length > 0) IUnicSwapV2Callee(to).unicSwapV2Call(msg.sender, amount0Out, amount1Out, data);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, 'UnicSwap: INSUFFICIENT_INPUT_AMOUNT');\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UnicSwap: K');\n        }\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n    function skim(address to) external lock {\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n    }\n\n    // force reserves to match balances\n    function sync() external lock {\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n    }\n}\n"
    },
    "contracts/UnicSwap/UnicSwapV2ERC20.sol": {
      "content": "pragma solidity =0.6.12;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\ncontract UnicSwapV2ERC20 {\n    using SafeMath for uint;\n\n    string public constant name = 'UnicSwap LP Token';\n    string public constant symbol = 'UPT';\n    uint8 public constant decimals = 18;\n    uint  public totalSupply;\n    mapping(address => uint) public balanceOf;\n    mapping(address => mapping(address => uint)) public allowance;\n\n    bytes32 public DOMAIN_SEPARATOR;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint) public nonces;\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    constructor() public {\n        uint chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(name)),\n                keccak256(bytes('1')),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function _mint(address to, uint value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint value) internal {\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint value) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(address from, address to, uint value) private {\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n        require(deadline >= block.timestamp, 'UnicSwap: EXPIRED');\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'UnicSwap: INVALID_SIGNATURE');\n        _approve(owner, spender, value);\n    }\n}\n"
    },
    "contracts/UnicSwap/libraries/Math.sol": {
      "content": "pragma solidity =0.6.12;\n\n// a library for performing various math operations\n\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/UnicSwap/libraries/UQ112x112.sol": {
      "content": "pragma solidity 0.6.12;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n"
    },
    "contracts/UnicSwap/interfaces/IUnicSwapV2Callee.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUnicSwapV2Callee {\n    function unicSwapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\n"
    },
    "contracts/UnicSwap/UnicSwapV2Factory.sol": {
      "content": "pragma solidity =0.6.12;\n\nimport './interfaces/IUnicSwapV2Factory.sol';\nimport './UnicSwapV2Pair.sol';\n\ncontract UnicSwapV2Factory is IUnicSwapV2Factory {\n    address public override feeTo;\n    address public override feeToSetter;\n\n    mapping(address => mapping(address => address)) public override getPair;\n    address[] public override allPairs;\n\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    constructor(address _feeToSetter) public {\n        feeToSetter = _feeToSetter;\n    }\n\n    function allPairsLength() external override view returns (uint) {\n        return allPairs.length;\n    }\n\n    function pairCodeHash() external pure returns (bytes32) {\n        return keccak256(type(UnicSwapV2Pair).creationCode);\n    }\n\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\n        require(tokenA != tokenB, 'UnicSwap: IDENTICAL_ADDRESSES');\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UnicSwap: ZERO_ADDRESS');\n        require(getPair[token0][token1] == address(0), 'UnicSwap: PAIR_EXISTS'); // single check is sufficient\n        bytes memory bytecode = type(UnicSwapV2Pair).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        assembly {\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        UnicSwapV2Pair(pair).initialize(token0, token1);\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\n        allPairs.push(pair);\n        emit PairCreated(token0, token1, pair, allPairs.length);\n    }\n\n    function setFeeTo(address _feeTo) external override {\n        require(msg.sender == feeToSetter, 'UnicSwap: FORBIDDEN');\n        feeTo = _feeTo;\n    }\n\n    function setFeeToSetter(address _feeToSetter) external override {\n        require(msg.sender == feeToSetter, 'UnicSwap: FORBIDDEN');\n        feeToSetter = _feeToSetter;\n    }\n}\n"
    },
    "contracts/UnicPumper.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./UnicSwap/interfaces/IUnicSwapV2Factory.sol\";\nimport \"./UnicSwap/interfaces/IUnicSwapV2Pair.sol\";\n\n// COPIED FROM: https://github.com/sushiswap/sushiswap/blob/master/contracts/SushiMaker.sol\n// Modified by 0xLeia\n// UnicPumper generates rewards for xUNIC holders by trading tokens collected from fees for UNIC\n\ncontract UnicPumper {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IUnicSwapV2Factory public factory;\n    address public bar;\n    address public unic;\n    address public weth;\n\n    constructor(IUnicSwapV2Factory _factory, address _bar, address _unic, address _weth) public {\n        factory = _factory;\n        unic = _unic;\n        bar = _bar;\n        weth = _weth;\n    }\n\n    function convert(address token0, address token1) public {\n        // At least we try to make front-running harder to do.\n        require(msg.sender == tx.origin, \"do not convert from contract\");\n        IUnicSwapV2Pair pair = IUnicSwapV2Pair(factory.getPair(token0, token1));\n        pair.transfer(address(pair), pair.balanceOf(address(this)));\n        (uint amount0, uint amount1) = pair.burn(address(this));\n        // First we convert everything to WETH\n        uint256 wethAmount = _toWETH(token0, amount0) + _toWETH(token1, amount1);\n        // Then we convert the WETH to Unic\n        _toSUSHI(wethAmount);\n    }\n\n    // Converts token passed as an argument to WETH\n    function _toWETH(address token, uint amountIn) internal returns (uint256) {\n        // If the passed token is Unic, don't convert anything\n        if (token == unic) {\n            _safeTransfer(token, bar, amountIn);\n            return 0;\n        }\n        // If the passed token is WETH, don't convert anything\n        if (token == weth) {\n            _safeTransfer(token, factory.getPair(weth, unic), amountIn);\n            return amountIn;\n        }\n        // If the target pair doesn't exist, don't convert anything\n        IUnicSwapV2Pair pair = IUnicSwapV2Pair(factory.getPair(token, weth));\n        if (address(pair) == address(0)) {\n            return 0;\n        }\n        // Choose the correct reserve to swap from\n        (uint reserve0, uint reserve1,) = pair.getReserves();\n        address token0 = pair.token0();\n        (uint reserveIn, uint reserveOut) = token0 == token ? (reserve0, reserve1) : (reserve1, reserve0);\n        // Calculate information required to swap\n        uint amountInWithFee = amountIn.mul(997);\n        uint amountOut = amountInWithFee.mul(reserveOut) / reserveIn.mul(1000).add(amountInWithFee);\n        (uint amount0Out, uint amount1Out) = token0 == token ? (uint(0), amountOut) : (amountOut, uint(0));\n        _safeTransfer(token, address(pair), amountIn);\n        pair.swap(amount0Out, amount1Out, factory.getPair(weth, unic), new bytes(0));\n        return amountOut;\n    }\n\n    // Converts WETH to Unic\n    function _toSUSHI(uint256 amountIn) internal {\n        IUnicSwapV2Pair pair = IUnicSwapV2Pair(factory.getPair(weth, unic));\n        // Choose WETH as input token\n        (uint reserve0, uint reserve1,) = pair.getReserves();\n        address token0 = pair.token0();\n        (uint reserveIn, uint reserveOut) = token0 == weth ? (reserve0, reserve1) : (reserve1, reserve0);\n        // Calculate information required to swap\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        uint amountOut = numerator / denominator;\n        (uint amount0Out, uint amount1Out) = token0 == weth ? (uint(0), amountOut) : (amountOut, uint(0));\n        // Swap WETH for Unic\n        pair.swap(amount0Out, amount1Out, bar, new bytes(0));\n    }\n\n    // Wrapper for safeTransfer\n    function _safeTransfer(address token, address to, uint256 amount) internal {\n        IERC20(token).safeTransfer(to, amount);\n    }\n}"
    },
    "contracts/UniclyXUnicVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./UnicSwap/interfaces/IUnicFarm.sol\";\nimport \"./UnicSwap/interfaces/IUnicGallery.sol\";\n\ncontract UniclyXUnicVault is OwnableUpgradeable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address public constant XUNIC = address(0xA62fB0c2Fb3C7b27797dC04e1fEA06C0a2Db919a);\n    address public constant UNIC = address(0x94E0BAb2F6Ab1F19F4750E42d7349f2740513aD5);\n    address public constant UNIC_MASTERCHEF = address(0x4A25E4DF835B605A5848d2DB450fA600d96ee818);\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // How much to remove when calculating user shares\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        uint256 totalLPTokens; // The total LP tokens staked (we must keep this, see readme file)\n        uint256 accXUNICPerShare; //Accumulated UNICs per share, times 1e12\n    }\n\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    // Info of each pool.\n    mapping(uint256 => PoolInfo) public poolInfo;\n\n    // Gas optimization for approving tokens to unic chef\n    mapping(address => bool) public haveApprovedToken;\n\n    address public devaddr;\n    // For better precision\n    uint256 public devFeeDenominator = 1000;\n    // For gas optimization, do not update every pool in do hard work, only the ones that haven't been updated for ~12 hours\n    uint256 public  minBlocksToUpdatePoolInDoHardWork = 3600;\n\n    // Events\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event UpdatePool(uint256 pid);\n    event Dev(address devaddr);\n    event DoHardWork(uint256 numberOfUpdatedPools);\n\n    function initialize(address _devaddr) external initializer {\n        __Ownable_init();\n        devaddr = _devaddr;\n        IERC20(UNIC).approve(XUNIC, uint256(~0));\n    }\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        uint256 pending = (pool.accXUNICPerShare.mul(user.amount).div(1e12)).sub(user.rewardDebt);\n        if (pending > 0) {\n            safexUNICTransfer(msg.sender, pending);\n        }\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.totalLPTokens = pool.totalLPTokens.sub(_amount);\n            IUnicFarm(UNIC_MASTERCHEF).withdraw(_pid, _amount);\n            (IERC20 lpToken,,,,) = IUnicFarm(UNIC_MASTERCHEF).poolInfo(_pid);\n            lpToken.safeTransfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accXUNICPerShare).div(1e12);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Deposit LP tokens to MasterChef for unics allocation.\n    function deposit(uint256 _pid, uint256 _amount) public {\n        depositFor(_pid, _amount, msg.sender);\n    }\n\n    // Deposit LP tokens for someone else than msg.sender, mainly for zap functionality\n    function depositFor(uint256 _pid, uint256 _amount, address _user) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 pending = (pool.accXUNICPerShare.mul(user.amount).div(1e12)).sub(user.rewardDebt);\n            if (pending > 0) {\n                safexUNICTransfer(_user, pending);\n            }\n        }\n        if (_amount > 0) {\n            (IERC20 lpToken,,,,) = IUnicFarm(UNIC_MASTERCHEF).poolInfo(_pid);\n            lpToken.safeTransferFrom(\n                address(msg.sender),\n                address(this),\n                _amount\n            );\n            if (!haveApprovedToken[address(lpToken)]) {\n                lpToken.approve(UNIC_MASTERCHEF, uint256(~0));\n                haveApprovedToken[address(lpToken)] = true;\n            }\n            IUnicFarm(UNIC_MASTERCHEF).deposit(_pid, _amount);\n            user.amount = user.amount.add(_amount);\n            pool.totalLPTokens = pool.totalLPTokens.add(_amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accXUNICPerShare).div(1e12);\n        emit Deposit(_user, _pid, _amount);\n    }\n\n    function doHardWork() public {\n        uint256 numberOfUpdatedPools = 0;\n        for (uint256 _pid = 0; _pid < IUnicFarm(UNIC_MASTERCHEF).poolLength(); _pid++) {\n            if (poolInfo[_pid].totalLPTokens > 0) {\n                (,,uint256 lastRewardBlock,,) = IUnicFarm(UNIC_MASTERCHEF).poolInfo(_pid);\n                if (block.number - minBlocksToUpdatePoolInDoHardWork > lastRewardBlock) {\n                    numberOfUpdatedPools = numberOfUpdatedPools.add(1);\n                    updatePool(_pid);\n                }\n            }\n        }\n        emit DoHardWork(numberOfUpdatedPools);\n    }\n\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n\n        uint256 prevXUNICBalance = IERC20(XUNIC).balanceOf(address(this));\n        IUnicFarm(UNIC_MASTERCHEF).deposit(_pid, 0);\n        uint256 UNICBalance = IERC20(UNIC).balanceOf(address(this));\n        if (UNICBalance > 0 && pool.totalLPTokens > 0) {\n            IUnicGallery(XUNIC).enter(UNICBalance);\n            uint256 addedXUNICs = IERC20(XUNIC).balanceOf(address(this)).sub(prevXUNICBalance);\n            uint256 devAmount = addedXUNICs.mul(100).div(devFeeDenominator); // For better precision\n            IERC20(XUNIC).transfer(devaddr, devAmount);\n            addedXUNICs = addedXUNICs.sub(devAmount);\n            pool.accXUNICPerShare = pool.accXUNICPerShare.add(addedXUNICs.mul(1e12).div(pool.totalLPTokens));\n        }\n\n        emit UpdatePool(_pid);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) external {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        pool.totalLPTokens = pool.totalLPTokens.sub(amount);\n        IUnicFarm(UNIC_MASTERCHEF).withdraw(_pid, amount);\n        (IERC20 lpToken,,,,) = IUnicFarm(UNIC_MASTERCHEF).poolInfo(_pid);\n        lpToken.safeTransfer(address(msg.sender), amount);\n        if (pool.totalLPTokens > 0) {\n            // In case there are still users in that pool, we are using the claimed UNICs from `withdraw` to add to the share\n            // In case there aren't anymore users in that pool, the next pool that will get updated will receive the claimed UNICs\n            updatePool(_pid);\n        }\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n\n    // salvage purpose only for when stupid people send tokens here\n    function withdrawToken(address tokenToWithdraw, uint256 amount) external onlyOwner {\n        require(tokenToWithdraw != XUNIC, \"Can't salvage xunic\");\n        IERC20(tokenToWithdraw).transfer(msg.sender, amount);\n    }\n\n    // Safe unic transfer function, just in case if rounding error causes pool to not have enough xUNICs.\n    function safexUNICTransfer(address _to, uint256 _amount) internal {\n        uint256 xUNICBal = IERC20(XUNIC).balanceOf(address(this));\n        if (_amount > xUNICBal) {\n            IERC20(XUNIC).transfer(_to, xUNICBal);\n        } else {\n            IERC20(XUNIC).transfer(_to, _amount);\n        }\n    }\n\n    // Update dev address by the previous dev.\n    function dev(address _devaddr) public {\n        require(msg.sender == devaddr, \"dev: wut?\");\n        devaddr = _devaddr;\n\n        emit Dev(_devaddr);\n    }\n\n    // ------------- VIEW --------------\n\n    // Current rate of xUNIC\n    function getxUNICRate() public view returns (uint256) {\n        uint256 xUNICBalance = IERC20(UNIC).balanceOf(XUNIC);\n        uint256 xUNICSupply = IERC20(XUNIC).totalSupply();\n\n        return xUNICBalance.mul(1e18).div(xUNICSupply);\n    }\n\n    function pendingxUNICs(uint256 _pid, address _user) public view returns (uint256) {\n        PoolInfo memory pool = poolInfo[_pid];\n        UserInfo memory user = userInfo[_pid][_user];\n\n        // for frontend\n        uint256 notClaimedUNICs = IUnicFarm(UNIC_MASTERCHEF).pendingUnic(_pid, address(this));\n        if (notClaimedUNICs > 0) {\n            uint256 xUNICRate = getxUNICRate();\n            uint256 accXUNICPerShare = pool.accXUNICPerShare.add(notClaimedUNICs.mul(1e18).div(xUNICRate).mul(1e12).div(pool.totalLPTokens));\n            return (accXUNICPerShare.mul(user.amount).div(1e12)).sub(user.rewardDebt);\n        }\n        uint256 pendingXUNICs = (pool.accXUNICPerShare.mul(user.amount).div(1e12)).sub(user.rewardDebt);\n        return pendingXUNICs;\n    }\n\n}"
    },
    "contracts/UnicSwap/interfaces/IUnicGallery.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solhint-disable\npragma solidity 0.6.12;\n\ninterface IUnicGallery {\n    function enter(uint256 _amount) external;\n}"
    },
    "contracts/ProxyToken.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ProxyToken is ERC20(\"Beeple Proxy LP Token\", \"uBEEPLE-LP\") {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address public lpToken;\n\n    function swapIn(uint256 _amount) public {\n        IERC20(lpToken).transferFrom(msg.sender, address(this), _amount);\n        _mint(msg.sender, _amount);\n    }\n\n    function swapOut(uint256 _amount) public {\n        _burn(msg.sender, _amount);\n        IERC20(lpToken).transfer(msg.sender, _amount);\n    }\n\n    constructor(\n        address _lpToken\n    ) public {\n        lpToken = _lpToken;\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "contracts/UnicGallery.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n// Copied from SushiBar: https://github.com/sushiswap/sushiswap/blob/master/contracts/SushiBar.sol\n// Modified by 0xLeia\n\n// UnicGallery is the coolest gallery in town. You come in with some Unic, and leave with more! The longer you stay, the more Unic you get.\n//\n// This contract handles swapping to and from xUnic, UnicSwap's staking token.\ncontract UnicGallery is ERC20(\"UnicGallery\", \"xUNIC\") {\n    using SafeMath for uint256;\n    IERC20 public unic;\n\n    // Define the Unic token contract\n    constructor(IERC20 _unic) public {\n        unic = _unic;\n    }\n\n    // Enter the gallery. Pay some UNICs. Earn some shares.\n    // Locks Unic and mints xUnic\n    function enter(uint256 _amount) public {\n        // Gets the amount of Unic locked in the contract\n        uint256 totalUnic = unic.balanceOf(address(this));\n        // Gets the amount of xUnic in existence\n        uint256 totalShares = totalSupply();\n        // If no xUnic exists, mint it 1:1 to the amount put in\n        if (totalShares == 0 || totalUnic == 0) {\n            _mint(msg.sender, _amount);\n        } \n        // Calculate and mint the amount of xUnic the Unic is worth. The ratio will change overtime, as xUnic is burned/minted and Unic deposited + gained from fees / withdrawn.\n        else {\n            uint256 what = _amount.mul(totalShares).div(totalUnic);\n            _mint(msg.sender, what);\n        }\n        // Lock the Unic in the contract\n        unic.transferFrom(msg.sender, address(this), _amount);\n    }\n\n    // Leave the gallery. Claim back your UNICs.\n    // Unclocks the staked + gained Unic and burns xUnic\n    function leave(uint256 _share) public {\n        // Gets the amount of xUnic in existence\n        uint256 totalShares = totalSupply();\n        // Calculates the amount of Unic the xUnic is worth\n        uint256 what = _share.mul(unic.balanceOf(address(this))).div(totalShares);\n        _burn(msg.sender, _share);\n        unic.transfer(msg.sender, what);\n    }\n}"
    },
    "contracts/PolygonUnic.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\n\n// Unic with Governance.\ncontract Unic is ERC20, ERC20Capped, ERC20Burnable, Ownable {\n    constructor (address _manager) \n        public \n        ERC20(\"UNIC\", \"UNIC\")\n        ERC20Capped(1_000_000e18)\n    {\n        manager = _manager;\n    }\n\n    address public manager;\n\n    /**\n     * @notice called when token is deposited on root chain\n     * @dev Should be callable only by ChildChainManager\n     * Should handle deposit by minting the required amount for user\n     * Make sure minting is done only by this function\n     * @param user user address for whom deposit is being done\n     * @param depositData abi encoded amount\n     */\n    function deposit(address user, bytes calldata depositData)\n        external\n    {\n        require(msg.sender == manager, \"Unic: INSUFFICIENT_PERMISSIONS\");\n        uint256 amount = abi.decode(depositData, (uint256));\n        _mint(user, amount);\n    }\n\n    /**\n     * @notice called when user wants to withdraw tokens back to root chain\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\n     * @param amount amount of tokens to withdraw\n     */\n    function withdraw(uint256 amount) external {\n        _burn(msg.sender, amount);\n    }\n\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Capped) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Capped.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20Capped is ERC20 {\n    using SafeMath for uint256;\n\n    uint256 private _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor (uint256 cap_) internal {\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap_;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - minted tokens must not cause the total supply to go over the cap.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        if (from == address(0)) { // When minting tokens\n            require(totalSupply().add(amount) <= cap(), \"ERC20Capped: cap exceeded\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/MockERC721.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MockERC721 is ERC721, Ownable {\n    constructor(\n        string memory name,\n        string memory symbol\n    ) public ERC721(name, symbol) { }\n\n    /**\n    * @dev Mints a new NFT.\n    * @param _to The address that will own the minted NFT.\n    * @param _tokenId of the NFT to be minted by the msg.sender.\n    */\n    function mint (\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        onlyOwner\n    {\n        super._mint(_to, _tokenId);\n    }\n}"
    },
    "contracts/UnicFarm.sol": {
      "content": "pragma solidity 0.6.12;\n\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./Unic.sol\";\n//import \"./Converter.sol\";\n\n// Copied from https://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChef.sol\n// Modified by 0xLeia\n\n// UnicFarm is where liquidity providers on UnicSwap can stake their LP tokens for UNIC rewards\n// The ownership of UnicFarm will be transferred to a governance smart contract once UNIC has been sufficiently distributed\n\ncontract UnicFarm is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount;     // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of UNICs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accUnicPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accUnicPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken;           // Address of LP token contract.\n        uint256 allocPoint;       // How many allocation points assigned to this pool. UNICs to distribute per block.\n        uint256 lastRewardBlock;  // Last block number that UNICs distribution occurs.\n        uint256 accUnicPerShare; // Accumulated UNICs per share, times 1e12. See below.\n        address uToken;\n    }\n\n    // The UNIC TOKEN!\n    Unic public unic;\n    // Dev address.\n    address public devaddr;\n    // Mint rate controllers\n    uint256 public mintRateMultiplier;\n    uint256 public mintRateDivider;\n    // Blocks per tranche used to calculate current mint rate (6500 blocks per day * 30 = 195000)\n    uint256 public blocksPerTranche;\n    // Current tranche\n    uint256 public tranche = 0;\n    // Whitelist mapping of address to bool\n    mapping(address => bool) public whitelist;\n    // UNIC tokens created per block.\n    uint256 public unicPerBlock;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The block number when UNIC mining starts.\n    uint256 public startBlock;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    // New events so that the graph works\n    event Add(uint256 allocPoint, address lpToken, bool withUpdate);\n    event Set(uint256 pid, uint256 allocPoint, bool withUpdate);\n    event MassUpdatePools();\n    event UpdatePool(uint256 pid);\n    event Dev(address devaddr);\n\n    constructor(\n        Unic _unic,\n        address _devaddr,\n        uint256 _mintRateMultiplier,\n        uint256 _mintRateDivider,\n        uint256 _unicPerBlock,\n        uint256 _startBlock,\n        uint256 _blocksPerTranche\n    ) public {\n        unic = _unic;\n        devaddr = _devaddr;\n        mintRateMultiplier = _mintRateMultiplier;\n        mintRateDivider = _mintRateDivider;\n        unicPerBlock = _unicPerBlock;\n        startBlock = _startBlock;\n        blocksPerTranche = _blocksPerTranche;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // address(0) for uToken if there's no uToken involved. Input uToken address if there is.\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate, address _uToken) public onlyOwner {\n        require(!whitelist[address(_lpToken)]);\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(PoolInfo({\n            lpToken: _lpToken,\n            allocPoint: _allocPoint,\n            lastRewardBlock: lastRewardBlock,\n            accUnicPerShare: 0,\n            uToken: _uToken\n        }));\n\n        whitelist[address(_lpToken)] = true;\n\n        emit Add(_allocPoint, address(_lpToken), _withUpdate);\n    }\n\n    // Update the given pool's UNIC allocation point. Can only be called by the owner.\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n\n        emit Set(_pid, _allocPoint, _withUpdate);\n    }\n\n    // Return rewards over the given _from to _to block.\n    // Rewards accumulate for a maximum of 195000 blocks.\n    function getRewards(uint256 _from, uint256 _to) public view returns (uint256) {\n        uint256 lastTrancheBlock = startBlock.add(tranche.mul(blocksPerTranche));\n        if (_to.sub(_from) > blocksPerTranche) {\n            _from = _to.sub(blocksPerTranche);\n        }\n\n        if (_from > lastTrancheBlock) {\n            return _to.sub(_from).mul(unicPerBlock);\n        } else {\n            // Use prior mint rate for blocks staked before last tranche block\n            return lastTrancheBlock.sub(_from).mul(unicPerBlock).mul(mintRateDivider).div(mintRateMultiplier).add(\n                _to.sub(lastTrancheBlock).mul(unicPerBlock)\n            );\n        }\n    }\n\n    // View function to see pending UNICs on frontend.\n    function pendingUnic(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accUnicPerShare = pool.accUnicPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 unicReward = getRewards(pool.lastRewardBlock, block.number).mul(pool.allocPoint).div(totalAllocPoint);\n            accUnicPerShare = accUnicPerShare.add(unicReward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(accUnicPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n\n        emit MassUpdatePools();\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        /*\n        if (pool.uToken != address(0) && pool.allocPoint > 0) {\n            if (Converter(pool.uToken).unlockVotes() >= Converter(pool.uToken)._threshold()) {\n                totalAllocPoint = totalAllocPoint.sub(pool.allocPoint);\n                pool.allocPoint = 0;\n                emit Set(_pid, 0, false);\n            }\n        }\n        */\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        // Update block rewards and tranche based on block height\n        if (block.number >= startBlock.add(tranche.mul(blocksPerTranche)).add(blocksPerTranche)) {\n            tranche++;\n            unicPerBlock = unicPerBlock.mul(mintRateMultiplier).div(mintRateDivider);\n        }\n        uint256 unicReward = getRewards(pool.lastRewardBlock, block.number).mul(pool.allocPoint).div(totalAllocPoint);\n        unic.mint(devaddr, unicReward.div(9));\n        unic.mint(address(this), unicReward);\n        pool.accUnicPerShare = pool.accUnicPerShare.add(unicReward.mul(1e12).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n\n        emit UpdatePool(_pid);\n    }\n\n    // Deposit LP tokens to UnicFarm for UNIC allocation.\n    function deposit(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accUnicPerShare).div(1e12).sub(user.rewardDebt);\n            if(pending > 0) {\n                safeUnicTransfer(msg.sender, pending);\n            }\n        }\n        if(_amount > 0) {\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n            user.amount = user.amount.add(_amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accUnicPerShare).div(1e12);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens from UnicFarm.\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accUnicPerShare).div(1e12).sub(user.rewardDebt);\n        if(pending > 0) {\n            safeUnicTransfer(msg.sender, pending);\n        }\n        if(_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accUnicPerShare).div(1e12);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n\n    // Safe unic transfer function, just in case if rounding error causes pool to not have enough UNICs.\n    function safeUnicTransfer(address _to, uint256 _amount) internal {\n        uint256 unicBal = unic.balanceOf(address(this));\n        if (_amount > unicBal) {\n            unic.transfer(_to, unicBal);\n        } else {\n            unic.transfer(_to, _amount);\n        }\n    }\n\n    // Update dev address by the previous dev.\n    function dev(address _devaddr) public {\n        require(msg.sender == devaddr, \"dev: wut?\");\n        devaddr = _devaddr;\n\n        emit Dev(_devaddr);\n    }\n\n    // Set mint rate\n    function setMintRules(uint256 _mintRateMultiplier, uint256 _mintRateDivider, uint256 _unicPerBlock, uint256 _blocksPerTranche) public onlyOwner {\n        require(_mintRateDivider > 0, \"no dividing by zero\");\n        require(_blocksPerTranche > 0, \"zero blocks per tranche not allowed\");\n        mintRateMultiplier = _mintRateMultiplier;\n        mintRateDivider = _mintRateDivider;\n        unicPerBlock = _unicPerBlock;\n        blocksPerTranche = _blocksPerTranche;\n    }\n\n    function setStartBlock(uint256 _startBlock) public onlyOwner {\n        require(block.number < startBlock, \"start block can not be modified after it has passed\");\n        require(block.number < _startBlock, \"new start block needs to be in the future\");\n        startBlock = _startBlock;\n    }\n}\n"
    },
    "contracts/Unic.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\n\n// Unic with Governance.\ncontract Unic is ERC20, ERC20Capped, ERC20Burnable, Ownable {\n    constructor () \n        public \n        ERC20(\"UNIC\", \"UNIC\")\n        ERC20Capped(1_000_000e18)\n    {\n        // Mint 1 UNIC to me because I deserve it\n        _mint(_msgSender(), 1e18);\n        _moveDelegates(address(0), _delegates[_msgSender()], 1e18);\n    }\n\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner.\n    function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {\n        _mint(_to, _amount);\n        _moveDelegates(address(0), _delegates[_to], _amount);\n        return true;\n    }\n\n    // Copied and modified from YAM code:\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\n    // Which is copied and modified from COMPOUND:\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\n\n    /// @dev A record of each accounts delegate\n    mapping (address => address) internal _delegates;\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint256 votes;\n    }\n\n    /// @notice A record of votes checkpoints for each account, by index\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping (address => uint32) public numCheckpoints;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    /// @notice A record of states for signing / validating signatures\n    mapping (address => uint) public nonces;\n\n      /// @notice An event thats emitted when an account changes its delegate\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /// @notice An event thats emitted when a delegate account's vote balance changes\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegator The address to get delegatee for\n     */\n    function delegates(address delegator)\n        external\n        view\n        returns (address)\n    {\n        return _delegates[delegator];\n    }\n\n   /**\n    * @notice Delegate votes from `msg.sender` to `delegatee`\n    * @param delegatee The address to delegate votes to\n    */\n    function delegate(address delegatee) external {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * @notice Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(\n        address delegatee,\n        uint nonce,\n        uint expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n        external\n    {\n        bytes32 domainSeparator = keccak256(\n            abi.encode(\n                DOMAIN_TYPEHASH,\n                keccak256(bytes(name())),\n                getChainId(),\n                address(this)\n            )\n        );\n\n        bytes32 structHash = keccak256(\n            abi.encode(\n                DELEGATION_TYPEHASH,\n                delegatee,\n                nonce,\n                expiry\n            )\n        );\n\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                domainSeparator,\n                structHash\n            )\n        );\n\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"UNIC::delegateBySig: invalid signature\");\n        require(nonce == nonces[signatory]++, \"UNIC::delegateBySig: invalid nonce\");\n        require(now <= expiry, \"UNIC::delegateBySig: signature expired\");\n        return _delegate(signatory, delegatee);\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account)\n        external\n        view\n        returns (uint256)\n    {\n        uint32 nCheckpoints = numCheckpoints[account];\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint blockNumber)\n        external\n        view\n        returns (uint256)\n    {\n        require(blockNumber < block.number, \"UNIC::getPriorVotes: not yet determined\");\n\n        uint32 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n            return 0;\n        }\n\n        uint32 lower = 0;\n        uint32 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock < blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    function _delegate(address delegator, address delegatee)\n        internal\n    {\n        address currentDelegate = _delegates[delegator];\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying UNICs (not scaled);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                // decrease old representative\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n                uint256 srcRepNew = srcRepOld.sub(amount);\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                // increase new representative\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n                uint256 dstRepNew = dstRepOld.add(amount);\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        address delegatee,\n        uint32 nCheckpoints,\n        uint256 oldVotes,\n        uint256 newVotes\n    )\n        internal\n    {\n        uint32 blockNumber = safe32(block.number, \"UNIC::_writeCheckpoint: block number exceeds 32 bits\");\n\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function getChainId() internal pure returns (uint) {\n        uint256 chainId;\n        assembly { chainId := chainid() }\n        return chainId;\n    }\n\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Capped) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}"
    },
    "contracts/ProxyFarmer.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./UnicFarm.sol\";\n\ncontract ProxyFarmer {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 public unic;\n    IERC20 public token;\n    address public farm;\n    address public xunic;\n    uint256 public pid;\n    bool public initialized = false;\n\n    function initialize() external {\n        require(!initialized, \"ProxyFarmer: Already initialized\");\n        token.approve(farm, 1);\n        UnicFarm(farm).deposit(pid, 1);\n        initialized = true;\n    }\n\n    function rewardXUNIC() public {\n        require(initialized, \"ProxyFarmer: Not initialized\");\n        UnicFarm(farm).deposit(pid, 0);\n        unic.transfer(xunic, unic.balanceOf(address(this)));\n    }\n\n    constructor(\n        IERC20 _unic,\n        IERC20 _token,\n        address _farm,\n        address _xunic,\n        uint256 _pid\n    ) public {\n        unic = _unic;\n        token = _token;\n        farm = _farm;\n        xunic = _xunic;\n        pid = _pid;\n    }\n}"
    },
    "contracts/LockedLP.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./UnicFarm.sol\";\n\ncontract LockedLP is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n \n    struct LockedInfo {\n        uint256 amount;\n        uint unlockDate;\n    }\n\n    // Limit locking functionality to collection issuer\n    // LP token contract address to locked info\n    mapping (address => LockedInfo) public locks;\n    // pairs to creators\n    mapping (address => address) public poolCreators;\n    // creators to pairs\n    mapping (address => address) public pairs;\n    // Already staked amounts\n    mapping (address => uint256) public staked;\n    address public unic;\n    address public farm;\n\n    struct PoolInfo {\n        IERC20 lpToken;           // Address of LP token contract.\n        uint256 allocPoint;       // How many allocation points assigned to this pool. UNICs to distribute per block.\n        uint256 lastRewardBlock;  // Last block number that UNICs distribution occurs.\n        uint256 accUnicPerShare; // Accumulated UNICs per share, times 1e12. See UnicFarm contract.\n        address uToken;\n    }\n\n    // Will be set by me for ease of use of this tool. Setting pool creator is the only thing owner can do.\n    // Other people can fork this contract and use it themselves though.\n    function setPoolCreator(address _pair, address _creator) external onlyOwner {\n        require(poolCreators[_pair] == address(0), \"LockedLP: Pool creator already set\");\n        poolCreators[_pair] = _creator;\n        pairs[_creator] = _pair;\n    }\n\n    function lock(address _pair, uint256 _amount, uint _unlockDate) external {\n        require(pairs[msg.sender] == _pair, \"LockedLP: Pool creator only\");\n        require(getBlockTimestamp() < _unlockDate, \"LockedLP: Unlock must be in future\");\n        LockedInfo storage info = locks[_pair];\n        if (info.amount > 0) {\n            require(getBlockTimestamp() < info.unlockDate, \"LockedLP: Already past unlock date\");\n            IERC20(_pair).transferFrom(msg.sender, address(this), _amount);\n            info.amount = info.amount.add(_amount);\n        }\n        else {\n            IERC20(_pair).transferFrom(msg.sender, address(this), _amount);\n            locks[_pair] = LockedInfo(_amount, _unlockDate);\n        }\n    }\n\n    function unlock(address _pair) external {\n        require(pairs[msg.sender] == _pair, \"LockedLP: Pool creator only\");\n        LockedInfo storage info = locks[_pair];\n        require(getBlockTimestamp() > info.unlockDate, \"LockedLP: You have not reached the unlock date\");\n        require(staked[_pair] == 0, \"LockedLP: Unstake first\");\n        uint256 transferAmount = info.amount;\n        info.amount = 0;\n        IERC20(_pair).transfer(msg.sender, transferAmount);\n    }\n\n    function stake(uint256 _pid) external {\n        (IERC20 lpToken, , , , ) = UnicFarm(farm).poolInfo(_pid);\n        address pair = address(lpToken);\n        require(pairs[msg.sender] == pair, \"LockedLP: Pool creator only\");\n        uint256 amount = (locks[pair]).amount.sub(staked[pair]);\n        staked[pair] = staked[pair].add(amount);\n        uint256 balance = UnicFarm(farm).pendingUnic(_pid, address(this));\n        if (amount > 0) {\n            lpToken.approve(farm, amount);\n        }\n        UnicFarm(farm).deposit(_pid, amount);\n        if (balance > 0) {\n            IERC20(unic).safeTransfer(poolCreators[pair], balance);\n        }\n    }\n\n    function unstake(uint256 _pid) external {\n        (IERC20 lpToken, , , , ) = UnicFarm(farm).poolInfo(_pid);\n        address pair = address(lpToken);\n        require(pairs[msg.sender] == pair, \"LockedLP: Pool creator only\");\n        uint256 amount = staked[pair];\n        uint256 balance = UnicFarm(farm).pendingUnic(_pid, address(this));\n        UnicFarm(farm).withdraw(_pid, amount);\n        if (balance > 0) {\n            IERC20(unic).safeTransfer(poolCreators[pair], balance);\n        }\n        staked[pair] = 0;\n    }\n\n    function setUnlockDate(address _pair, uint _unlockDate) external {\n        require(pairs[msg.sender] == _pair, \"LockedLP: Pool creator only\");\n        LockedInfo storage info = locks[_pair];\n        require(info.unlockDate < _unlockDate, \"LockedLP: New unlock date must be after current unlock date\");\n        info.unlockDate = _unlockDate;\n    }\n\n    function getBlockTimestamp() internal view returns (uint) {\n        // solium-disable-next-line security/no-block-members\n        return block.timestamp;\n    }\n\n    constructor(\n        address _unic,\n        address _farm\n    ) public {\n        unic = _unic;\n        farm = _farm;\n    }\n}"
    },
    "contracts/GovernorAlpha.sol": {
      "content": "// COPIED FROM https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/GovernorAlpha.sol\n// Copyright 2020 Compound Labs, Inc.\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Ctrl+f for XXX to see all the modifications.\n// uint96s are changed to uint256s for simplicity and safety.\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"./Unic.sol\";\n\ncontract GovernorAlpha {\n    /// @notice The name of this contract\n    // XXX: string public constant name = \"Compound Governor Alpha\";\n    string public constant name = \"Unicly Governor Alpha\";\n\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\n    // XXX: function quorumVotes() public pure returns (uint) { return 400000e18; } // 400,000 = 4% of Comp\n    function quorumVotes() public view returns (uint) { return unic.totalSupply() / 16; } // 6.25% of Supply\n\n    /// @notice The number of votes required in order for a voter to become a proposer\n    // function proposalThreshold() public pure returns (uint) { return 100000e18; } // 100,000 = 1% of Comp\n    function proposalThreshold() public view returns (uint) { return unic.totalSupply() / 50; } // 2% of Supply\n\n    /// @notice The maximum number of actions that can be included in a proposal\n    function proposalMaxOperations() public pure returns (uint) { return 10; } // 10 actions\n\n    /// @notice The delay before voting on a proposal may take place, once proposed\n    function votingDelay() public pure returns (uint) { return 1; } // 1 block\n\n    /// @notice The duration of voting on a proposal, in blocks\n    function votingPeriod() public pure returns (uint) { return 17280; } // ~3 days in blocks (assuming 15s blocks)\n\n    /// @notice The address of the Compound Protocol Timelock\n    TimelockInterface public timelock;\n\n    /// @notice The address of the Compound governance token\n    // XXX: CompInterface public comp;\n    Unic public unic;\n\n    /// @notice The address of the Governor Guardian\n    address public guardian;\n\n    /// @notice The total number of proposals\n    uint public proposalCount;\n\n    struct Proposal {\n        /// @notice Unique id for looking up a proposal\n        uint id;\n\n        /// @notice Creator of the proposal\n        address proposer;\n\n        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\n        uint eta;\n\n        /// @notice the ordered list of target addresses for calls to be made\n        address[] targets;\n\n        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\n        uint[] values;\n\n        /// @notice The ordered list of function signatures to be called\n        string[] signatures;\n\n        /// @notice The ordered list of calldata to be passed to each call\n        bytes[] calldatas;\n\n        /// @notice The block at which voting begins: holders must delegate their votes prior to this block\n        uint startBlock;\n\n        /// @notice The block at which voting ends: votes must be cast prior to this block\n        uint endBlock;\n\n        /// @notice Current number of votes in favor of this proposal\n        uint forVotes;\n\n        /// @notice Current number of votes in opposition to this proposal\n        uint againstVotes;\n\n        /// @notice Flag marking whether the proposal has been canceled\n        bool canceled;\n\n        /// @notice Flag marking whether the proposal has been executed\n        bool executed;\n\n        /// @notice Receipts of ballots for the entire set of voters\n        mapping (address => Receipt) receipts;\n    }\n\n    /// @notice Ballot receipt record for a voter\n    struct Receipt {\n        /// @notice Whether or not a vote has been cast\n        bool hasVoted;\n\n        /// @notice Whether or not the voter supports the proposal\n        bool support;\n\n        /// @notice The number of votes the voter had, which were cast\n        uint256 votes;\n    }\n\n    /// @notice Possible states that a proposal may be in\n    enum ProposalState {\n        Pending,\n        Active,\n        Canceled,\n        Defeated,\n        Succeeded,\n        Queued,\n        Expired,\n        Executed\n    }\n\n    /// @notice The official record of all proposals ever proposed\n    mapping (uint => Proposal) public proposals;\n\n    /// @notice The latest proposal for each proposer\n    mapping (address => uint) public latestProposalIds;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,bool support)\");\n\n    /// @notice An event emitted when a new proposal is created\n    event ProposalCreated(uint id, address proposer, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, uint startBlock, uint endBlock, string description);\n\n    /// @notice An event emitted when a vote has been cast on a proposal\n    event VoteCast(address voter, uint proposalId, bool support, uint votes);\n\n    /// @notice An event emitted when a proposal has been canceled\n    event ProposalCanceled(uint id);\n\n    /// @notice An event emitted when a proposal has been queued in the Timelock\n    event ProposalQueued(uint id, uint eta);\n\n    /// @notice An event emitted when a proposal has been executed in the Timelock\n    event ProposalExecuted(uint id);\n\n    constructor(address timelock_, address unic_, address guardian_) public {\n        timelock = TimelockInterface(timelock_);\n        unic = Unic(unic_);\n        guardian = guardian_;\n    }\n\n    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) public returns (uint) {\n        require(unic.getPriorVotes(msg.sender, sub256(block.number, 1)) > proposalThreshold(), \"GovernorAlpha::propose: proposer votes below proposal threshold\");\n        require(targets.length == values.length && targets.length == signatures.length && targets.length == calldatas.length, \"GovernorAlpha::propose: proposal function information arity mismatch\");\n        require(targets.length != 0, \"GovernorAlpha::propose: must provide actions\");\n        require(targets.length <= proposalMaxOperations(), \"GovernorAlpha::propose: too many actions\");\n\n        uint latestProposalId = latestProposalIds[msg.sender];\n        if (latestProposalId != 0) {\n          ProposalState proposersLatestProposalState = state(latestProposalId);\n          require(proposersLatestProposalState != ProposalState.Active, \"GovernorAlpha::propose: one live proposal per proposer, found an already active proposal\");\n          require(proposersLatestProposalState != ProposalState.Pending, \"GovernorAlpha::propose: one live proposal per proposer, found an already pending proposal\");\n        }\n\n        uint startBlock = add256(block.number, votingDelay());\n        uint endBlock = add256(startBlock, votingPeriod());\n\n        proposalCount++;\n        Proposal memory newProposal = Proposal({\n            id: proposalCount,\n            proposer: msg.sender,\n            eta: 0,\n            targets: targets,\n            values: values,\n            signatures: signatures,\n            calldatas: calldatas,\n            startBlock: startBlock,\n            endBlock: endBlock,\n            forVotes: 0,\n            againstVotes: 0,\n            canceled: false,\n            executed: false\n        });\n\n        proposals[newProposal.id] = newProposal;\n        latestProposalIds[newProposal.proposer] = newProposal.id;\n\n        emit ProposalCreated(newProposal.id, msg.sender, targets, values, signatures, calldatas, startBlock, endBlock, description);\n        return newProposal.id;\n    }\n\n    function queue(uint proposalId) public {\n        require(state(proposalId) == ProposalState.Succeeded, \"GovernorAlpha::queue: proposal can only be queued if it is succeeded\");\n        Proposal storage proposal = proposals[proposalId];\n        uint eta = add256(block.timestamp, timelock.delay());\n        for (uint i = 0; i < proposal.targets.length; i++) {\n            _queueOrRevert(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta);\n        }\n        proposal.eta = eta;\n        emit ProposalQueued(proposalId, eta);\n    }\n\n    function _queueOrRevert(address target, uint value, string memory signature, bytes memory data, uint eta) internal {\n        require(!timelock.queuedTransactions(keccak256(abi.encode(target, value, signature, data, eta))), \"GovernorAlpha::_queueOrRevert: proposal action already queued at eta\");\n        timelock.queueTransaction(target, value, signature, data, eta);\n    }\n\n    function execute(uint proposalId) public payable {\n        require(state(proposalId) == ProposalState.Queued, \"GovernorAlpha::execute: proposal can only be executed if it is queued\");\n        Proposal storage proposal = proposals[proposalId];\n        proposal.executed = true;\n        for (uint i = 0; i < proposal.targets.length; i++) {\n            timelock.executeTransaction.value(proposal.values[i])(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\n        }\n        emit ProposalExecuted(proposalId);\n    }\n\n    function cancel(uint proposalId) public {\n        ProposalState state = state(proposalId);\n        require(state != ProposalState.Executed, \"GovernorAlpha::cancel: cannot cancel executed proposal\");\n\n        Proposal storage proposal = proposals[proposalId];\n        require(msg.sender == guardian || unic.getPriorVotes(proposal.proposer, sub256(block.number, 1)) < proposalThreshold(), \"GovernorAlpha::cancel: proposer above threshold\");\n\n        proposal.canceled = true;\n        for (uint i = 0; i < proposal.targets.length; i++) {\n            timelock.cancelTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\n        }\n\n        emit ProposalCanceled(proposalId);\n    }\n\n    function getActions(uint proposalId) public view returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas) {\n        Proposal storage p = proposals[proposalId];\n        return (p.targets, p.values, p.signatures, p.calldatas);\n    }\n\n    function getReceipt(uint proposalId, address voter) public view returns (Receipt memory) {\n        return proposals[proposalId].receipts[voter];\n    }\n\n    function state(uint proposalId) public view returns (ProposalState) {\n        require(proposalCount >= proposalId && proposalId > 0, \"GovernorAlpha::state: invalid proposal id\");\n        Proposal storage proposal = proposals[proposalId];\n        if (proposal.canceled) {\n            return ProposalState.Canceled;\n        } else if (block.number <= proposal.startBlock) {\n            return ProposalState.Pending;\n        } else if (block.number <= proposal.endBlock) {\n            return ProposalState.Active;\n        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotes()) {\n            return ProposalState.Defeated;\n        } else if (proposal.eta == 0) {\n            return ProposalState.Succeeded;\n        } else if (proposal.executed) {\n            return ProposalState.Executed;\n        } else if (block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())) {\n            return ProposalState.Expired;\n        } else {\n            return ProposalState.Queued;\n        }\n    }\n\n    function castVote(uint proposalId, bool support) public {\n        return _castVote(msg.sender, proposalId, support);\n    }\n\n    function castVoteBySig(uint proposalId, bool support, uint8 v, bytes32 r, bytes32 s) public {\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"GovernorAlpha::castVoteBySig: invalid signature\");\n        return _castVote(signatory, proposalId, support);\n    }\n\n    function _castVote(address voter, uint proposalId, bool support) internal {\n        require(state(proposalId) == ProposalState.Active, \"GovernorAlpha::_castVote: voting is closed\");\n        Proposal storage proposal = proposals[proposalId];\n        Receipt storage receipt = proposal.receipts[voter];\n        require(receipt.hasVoted == false, \"GovernorAlpha::_castVote: voter already voted\");\n        uint256 votes = unic.getPriorVotes(voter, proposal.startBlock);\n\n        if (support) {\n            proposal.forVotes = add256(proposal.forVotes, votes);\n        } else {\n            proposal.againstVotes = add256(proposal.againstVotes, votes);\n        }\n\n        receipt.hasVoted = true;\n        receipt.support = support;\n        receipt.votes = votes;\n\n        emit VoteCast(voter, proposalId, support, votes);\n    }\n\n    function __acceptAdmin() public {\n        require(msg.sender == guardian, \"GovernorAlpha::__acceptAdmin: sender must be gov guardian\");\n        timelock.acceptAdmin();\n    }\n\n    function __abdicate() public {\n        require(msg.sender == guardian, \"GovernorAlpha::__abdicate: sender must be gov guardian\");\n        guardian = address(0);\n    }\n\n    function __queueSetTimelockPendingAdmin(address newPendingAdmin, uint eta) public {\n        require(msg.sender == guardian, \"GovernorAlpha::__queueSetTimelockPendingAdmin: sender must be gov guardian\");\n        timelock.queueTransaction(address(timelock), 0, \"setPendingAdmin(address)\", abi.encode(newPendingAdmin), eta);\n    }\n\n    function __executeSetTimelockPendingAdmin(address newPendingAdmin, uint eta) public {\n        require(msg.sender == guardian, \"GovernorAlpha::__executeSetTimelockPendingAdmin: sender must be gov guardian\");\n        timelock.executeTransaction(address(timelock), 0, \"setPendingAdmin(address)\", abi.encode(newPendingAdmin), eta);\n    }\n\n    function add256(uint256 a, uint256 b) internal pure returns (uint) {\n        uint c = a + b;\n        require(c >= a, \"addition overflow\");\n        return c;\n    }\n\n    function sub256(uint256 a, uint256 b) internal pure returns (uint) {\n        require(b <= a, \"subtraction underflow\");\n        return a - b;\n    }\n\n    function getChainId() internal pure returns (uint) {\n        uint chainId;\n        assembly { chainId := chainid() }\n        return chainId;\n    }\n}\n\ninterface TimelockInterface {\n    function delay() external view returns (uint);\n    function GRACE_PERIOD() external view returns (uint);\n    function acceptAdmin() external;\n    function queuedTransactions(bytes32 hash) external view returns (bool);\n    function queueTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external returns (bytes32);\n    function cancelTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external;\n    function executeTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external payable returns (bytes memory);\n}\n"
    },
    "contracts/AdvStakingProxyFarmer.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./UnicFarm.sol\";\nimport \"./UnicStaking.sol\";\n\ncontract AdvStakingProxyFarmer {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 public unic;\n    IERC20 public token;\n    address public farm;\n    address public staking;\n    uint256 public pid;\n    bool public initialized = false;\n    uint256 private constant MAX_INT = 2**256 - 1;\n\n    function initialize() external {\n        require(!initialized, \"AdvStakingProxyFarmer: Already initialized\");\n        token.approve(farm, 1);\n        unic.approve(staking, MAX_INT);\n        UnicFarm(farm).deposit(pid, 1);\n        initialized = true;\n    }\n\n    function addRewards() public {\n        require(initialized, \"AdvStakingProxyFarmer: Not initialized\");\n        UnicFarm(farm).deposit(pid, 0);\n        UnicStaking(staking).addRewards(address(unic), unic.balanceOf(address(this)));\n    }\n\n    constructor(\n        IERC20 _unic,\n        IERC20 _token,\n        address _farm,\n        address _staking,\n        uint256 _pid\n    ) public {\n        unic = _unic;\n        token = _token;\n        farm = _farm;\n        staking = _staking;\n        pid = _pid;\n    }\n}"
    },
    "contracts/UnicStaking.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"./interfaces/IMintableCollection.sol\";\nimport \"./interfaces/IRewardable.sol\";\nimport \"./abstract/EmergencyWithdrawable.sol\";\nimport \"./UnicStakingERC721.sol\";\n\ncontract UnicStaking is Initializable, EmergencyWithdrawable, IRewardable, PausableUpgradeable {\n    using SafeMath for uint256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    struct StakerInfo {\n        uint256 nftId;\n        uint256 amount;\n        uint256 stakeStartTime;\n        uint256 lockDays;\n        uint256 rewardDebt;\n        address rewardToken;\n        uint16 multiplier;\n    }\n\n    struct LockMultiplier {\n        uint16 multiplier;\n        bool exists;\n    }\n\n    struct RewardPool {\n        IERC20Upgradeable rewardToken;\n        uint256 stakedAmount;\n        uint256 stakedAmountWithMultipliers;\n        uint256 totalRewardAmount;\n        uint256 accRewardPerShare;\n        uint256 lastRewardAmount;\n    }\n\n    IERC20Upgradeable private stakingToken;\n    IMintableCollection private nftCollection;\n    uint256 public minStakeAmount;\n    uint256 private nftStartId;\n\n    // NFT ID to staker info\n    mapping(uint256 => StakerInfo) public stakes;\n\n    // Each uToken should have its own poolcontracts/UnicStaking.sol:115:9\n    mapping(address => RewardPool) public pools;\n\n    // Mapping from days => multiplier for timelock\n    mapping(uint256 => LockMultiplier) public lockMultipliers;\n\n    uint256 private constant DIV_PRECISION = 1e18;\n\n    event AddRewards(address indexed rewardToken, uint256 amount);\n    event Staked(\n        address indexed account,\n        address indexed rewardToken,\n        uint256 nftId,\n        uint256 amount,\n        uint256 lockDays\n    );\n    event Harvest(address indexed staker, address indexed rewardToken, uint256 nftId, uint256 amount);\n    event Withdraw(address indexed staker, address indexed rewardToken, uint256 nftId, uint256 amount);\n    event LogUpdateRewards(address indexed rewardToken, uint256 totalRewards, uint256 accRewardPerShare);\n\n    modifier poolExists(address rewardToken) {\n        require(address(pools[rewardToken].rewardToken) != address(0), \"UnicStaking: Pool does not exist\");\n        _;\n    }\n\n    modifier poolNotExists(address rewardToken) {\n        require(address(pools[rewardToken].rewardToken) == address(0), \"UnicStaking: Pool does already exist\");\n        _;\n    }\n\n    function initialize(\n        IERC20Upgradeable _stakingToken,\n        IMintableCollection _nftCollection,\n        uint256 _nftStartId,\n        uint256 _minStakeAmount\n    ) public initializer {\n        __Ownable_init();\n        stakingToken = _stakingToken;\n        nftCollection = _nftCollection;\n        nftStartId = _nftStartId;\n        minStakeAmount = _minStakeAmount;\n    }\n\n    // lockdays are passed as seconds, multiplier in percentage from 100 (e.g. 170 for 70% on top)\n    function setLockMultiplier(uint256 lockDays, uint16 multiplier) external onlyOwner {\n        require(multiplier >= 100, \"Minimum multiplier = 100\");\n        lockMultipliers[lockDays] = LockMultiplier({\n            multiplier: multiplier,\n            exists: true\n        });\n    }\n\n    function setMinStakeAmount(uint256 _minStakeAmount) external onlyOwner {\n        minStakeAmount = _minStakeAmount;\n    }\n\n    /**\n     * @param amount Amount of staking tokens\n     * @param lockDays How many days the staker wants to lock\n     * @param rewardToken The desired reward token to stake the tokens for (most likely a certain uToken)\n     */\n    function stake(uint256 amount, uint256 lockDays, address rewardToken)\n        external\n        whenNotPaused\n        poolExists(rewardToken)\n    {\n        require(\n            amount >= minStakeAmount,\n            \"UnicStaking: Amount must be greater than or equal to min stake amount\"\n        );\n        require(\n            lockMultipliers[lockDays].exists,\n            \"UnicStaking: Invalid number of lock days specified\"\n        );\n\n        updateRewards(rewardToken);\n\n        // transfer the staking tokens into the staking pool\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n\n        // now the data of the staker is persisted\n        StakerInfo storage staker = stakes[nftStartId];\n        staker.stakeStartTime = block.timestamp;\n        staker.amount = amount;\n        staker.lockDays = lockDays;\n        staker.multiplier = lockMultipliers[lockDays].multiplier;\n        staker.nftId = nftStartId;\n        staker.rewardToken = rewardToken;\n\n        RewardPool storage pool = pools[rewardToken];\n\n        // the amount with lock multiplier applied\n        uint256 virtualAmount = virtualAmount(staker.amount, staker.multiplier);\n        staker.rewardDebt = virtualAmount.mul(pool.accRewardPerShare).div(DIV_PRECISION);\n\n        pool.stakedAmount = pool.stakedAmount.add(amount);\n        pool.stakedAmountWithMultipliers = pool.stakedAmountWithMultipliers.add(virtualAmount);\n\n        nftStartId = nftStartId.add(1);\n        nftCollection.mint(msg.sender, nftStartId - 1);\n\n        emit Staked(msg.sender, rewardToken, nftStartId - 1, amount, lockDays);\n    }\n\n    function withdraw(uint256 nftId) external whenNotPaused {\n        StakerInfo storage staker = stakes[nftId];\n        require(address(staker.rewardToken) != address(0), \"UnicStaking: No staker exists\");\n        require(\n            nftCollection.ownerOf(nftId) == msg.sender,\n            \"UnicStaking: Only the owner may withdraw\"\n        );\n        require(\n            (staker.stakeStartTime.add(staker.lockDays)) < block.timestamp,\n            \"UnicStaking: Lock time not expired\"\n        );\n        updateRewards(staker.rewardToken);\n\n        RewardPool storage pool = pools[address(staker.rewardToken)];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        // lets burn the NFT first\n        nftCollection.burn(nftId);\n\n        uint256 virtualAmount = virtualAmount(staker.amount, staker.multiplier);\n\n        uint256 accumulated = virtualAmount.mul(pool.accRewardPerShare).div(DIV_PRECISION);\n        uint256 reward = accumulated.sub(staker.rewardDebt);\n\n        // reset the pool props\n        pool.stakedAmount = pool.stakedAmount.sub(staker.amount);\n        pool.stakedAmountWithMultipliers = pool.stakedAmountWithMultipliers.sub(virtualAmount);\n\n        uint256 staked = staker.amount;\n\n        // reset all staker props\n        staker.rewardDebt = 0;\n        staker.amount = 0;\n        staker.stakeStartTime = 0;\n        staker.lockDays = 0;\n        staker.nftId = 0;\n        staker.rewardToken = address(0);\n\n        stakingToken.safeTransfer(msg.sender, reward.add(staked));\n\n        emit Harvest(msg.sender, address(staker.rewardToken), nftId, reward);\n        emit Withdraw(msg.sender, address(staker.rewardToken), nftId, staked);\n    }\n\n    function updateRewards(address rewardToken) private poolExists(rewardToken) {\n        RewardPool storage pool = pools[rewardToken];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        if (pool.totalRewardAmount > pool.lastRewardAmount) {\n            if (pool.stakedAmountWithMultipliers > 0) {\n                uint256 reward = pool.totalRewardAmount.sub(pool.lastRewardAmount);\n                pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(DIV_PRECISION).div(pool.stakedAmountWithMultipliers));\n            }\n            pool.lastRewardAmount = pool.totalRewardAmount;\n            emit LogUpdateRewards(rewardToken, pool.lastRewardAmount, pool.accRewardPerShare);\n        }\n    }\n\n    function createPool(address rewardToken) external onlyOwner poolNotExists(rewardToken) {\n        RewardPool memory pool = RewardPool({\n            rewardToken: IERC20Upgradeable(rewardToken),\n            stakedAmount: 0,\n            stakedAmountWithMultipliers: 0,\n            totalRewardAmount: 0,\n            accRewardPerShare: 0,\n            lastRewardAmount: 0\n        });\n        pools[rewardToken] = pool;\n    }\n\n    function addRewards(address rewardToken, uint256 amount) override external poolExists(rewardToken) {\n        require(amount > 0, \"UnicStaking: Amount must be greater than zero\");\n        IERC20Upgradeable(rewardToken).safeTransferFrom(msg.sender, address(this), amount);\n        RewardPool storage pool = pools[rewardToken];\n        pool.totalRewardAmount = pool.totalRewardAmount.add(amount);\n        emit AddRewards(rewardToken, amount);\n    }\n\n    function harvest(uint256 nftId) external whenNotPaused {\n        StakerInfo storage staker = stakes[nftId];\n        require(staker.nftId > 0, \"UnicStaking: No staker exists\");\n        require(\n            nftCollection.ownerOf(nftId) == msg.sender,\n            \"UnicStaking: Only the owner may harvest\"\n        );\n\n        updateRewards(address(staker.rewardToken));\n\n        RewardPool memory pool = pools[address(staker.rewardToken)];\n        uint256 accumulated = virtualAmount(staker.amount, staker.multiplier).mul(pool.accRewardPerShare).div(DIV_PRECISION);\n\n        uint256 reward;\n        // this needs to be considered due to roundings in reward calculation\n        if (accumulated > staker.rewardDebt) {\n            reward = accumulated.sub(staker.rewardDebt);\n        }\n\n        staker.rewardDebt = accumulated;\n\n        pool.rewardToken.safeTransfer(msg.sender, reward);\n        emit Harvest(msg.sender, address(staker.rewardToken), nftId, reward);\n    }\n\n    function pendingReward(uint256 nftId) external view returns (uint256) {\n        StakerInfo memory staker = stakes[nftId];\n        require(staker.nftId > 0, \"StakingPool: No staker exists\");\n\n        RewardPool memory pool = pools[address(staker.rewardToken)];\n        require(address(pool.rewardToken) != address(0), \"UnicStaking: Pool gone\");\n\n        uint256 accRewardPerShare = 0;\n        // run a part from the updateRewards logic but don't persist anything\n        if (pool.totalRewardAmount > pool.lastRewardAmount) {\n            if (pool.stakedAmountWithMultipliers > 0) {\n                uint256 reward = pool.totalRewardAmount.sub(pool.lastRewardAmount);\n                accRewardPerShare = pool.accRewardPerShare.add(reward.mul(DIV_PRECISION).div(pool.stakedAmountWithMultipliers));\n            }\n        }\n\n        uint256 accumulated = virtualAmount(staker.amount, staker.multiplier).mul(accRewardPerShare).div(DIV_PRECISION);\n\n        // this can happen due to roundings in the reward calculation\n        if (staker.rewardDebt > accumulated) {\n            return 0;\n        }\n        return accumulated.sub(staker.rewardDebt);\n    }\n\n    // returns the virtual amount after having a multiplier applied\n    function virtualAmount(uint256 amount, uint256 multiplier) private view returns (uint256) {\n        return amount.mul(multiplier.mul(DIV_PRECISION).div(100)).div(DIV_PRECISION);\n    }\n\n    // returns the stake with multiplier for an nftId\n    function getStakeWithMultiplier(uint256 nftId) external view returns (uint256 stakeWithMultiplier){\n        StakerInfo memory staker = stakes[nftId];\n        stakeWithMultiplier = virtualAmount(staker.amount, staker.multiplier);\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/UnicSwap/UnicSwapRouterIncentivized.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\nimport \"../interfaces/IProtocolUnicRewards.sol\";\nimport \"./interfaces/IUnicSwapV2Router02.sol\";\n\ncontract UnicSwapRouterIncentivized is Initializable, PausableUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    uint256 private constant ONE_ETHER = 1 ether;\n\n    IUnicSwapV2Router02 public router;\n    IProtocolUnicRewards public rewarder;\n\n    struct WhitelistEntry {\n        bool whitelisted;\n    }\n\n    uint256 public rewardPerEth;\n    uint256 public budgetPerBlock;\n    uint256 public totalRewardsGiven;\n    bool public whitelistEnabled;\n\n    mapping(address => WhitelistEntry) public whitelist;\n\n    function initialize(\n        address routerAddress,\n        address rewarderAddress,\n        uint256 rewardPerEthAmount,\n        uint256 budgetPerBlockAmount\n    ) public initializer {\n        router = IUnicSwapV2Router02(routerAddress);\n        rewarder = IProtocolUnicRewards(rewarderAddress);\n        rewardPerEth = rewardPerEthAmount;\n        budgetPerBlock = budgetPerBlockAmount;\n\n        totalRewardsGiven = 0;\n        whitelistEnabled = false;\n\n        __Ownable_init();\n    }\n\n    function _assignReward(uint256 value, address[] calldata path) private {\n        bool assignReward = true;\n        if (whitelistEnabled) {\n            for (uint8 i = 0; i < path.length; i++) {\n                if (!whitelist[path[i]].whitelisted) {\n                    assignReward = false;\n                    break;\n                }\n            }\n        }\n\n        if (assignReward && value > 0) {\n            uint256 reward = value.mul(rewardPerEth).div(ONE_ETHER);\n\n            if (budgetPerBlock > 0) {\n                uint256 actualReward = totalRewardsGiven.add(reward).sub(block.number.mul(budgetPerBlock));\n                totalRewardsGiven += actualReward;\n\n                rewarder.reward(msg.sender, actualReward);\n            } else {\n                rewarder.reward(msg.sender, reward);\n            }\n        }\n    }\n\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    whenNotPaused\n    nonReentrant\n    returns (uint[] memory amounts)\n    {\n        _assignReward(msg.value, path);\n        return router.swapExactETHForTokens(amountOutMin, path, to, deadline);\n    }\n\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    whenNotPaused\n    nonReentrant\n    returns (uint[] memory amounts)\n    {\n        amounts = router.swapExactTokensForETH(amountIn, amountOutMin, path, to, deadline);\n\n        if (amounts.length > 0) {\n            _assignReward(amounts[amounts.length - 1], path);\n        }\n\n        return amounts;\n    }\n\n    function addToWhitelist(address tokenAddress, bool whitelisted) external onlyOwner {\n        whitelist[tokenAddress] = WhitelistEntry({\n            whitelisted: whitelisted\n        });\n    }\n\n    function setWhitelistEnabled(bool enabled) external onlyOwner {\n        whitelistEnabled = enabled;\n    }\n\n    function setRewardPerEth(uint256 rewardPerEthAmount) external onlyOwner {\n        rewardPerEth = rewardPerEthAmount;\n    }\n\n    function setBudgetPerBlock(uint256 budgetPerBlockAmount) external onlyOwner {\n        budgetPerBlock = budgetPerBlockAmount;\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "contracts/interfaces/IProtocolUnicRewards.sol": {
      "content": "pragma solidity 0.6.12;\n\ninterface IProtocolUnicRewards {\n    function reward(address userAddress, uint256 amount) external;\n    function harvest() external;\n}\n"
    },
    "contracts/ProtocolUnicRewards.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\nimport \"./abstract/EmergencyWithdrawable.sol\";\nimport \"./interfaces/IProtocolUnicRewards.sol\";\n\ncontract ProtocolUnicRewards is Initializable, IProtocolUnicRewards, PausableUpgradeable, EmergencyWithdrawable {\n    using SafeMathUpgradeable for uint256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    struct UserInfo {\n        uint256 unicEarned;\n        uint256 unicHarvested;\n    }\n\n    IERC20Upgradeable public unic;\n    mapping(address => UserInfo) public userInfo;\n\n    event LogUnicAdded(address indexed user, uint256 amount);\n    event LogUnicHarvested(address indexed user, uint256 amount);\n\n    function initialize(address unicAddress) public initializer {\n        unic = IERC20Upgradeable(unicAddress);\n        __Ownable_init();\n    }\n\n    function reward(address userAddress, uint256 amount) override external whenNotPaused {\n        require(amount > 0, \"ProtocolUnicRewards: Amount must be greater than zero\");\n\n        UserInfo storage currentUser = userInfo[userAddress];\n        currentUser.unicEarned = currentUser.unicEarned.add(amount);\n\n        emit LogUnicAdded(userAddress, amount);\n    }\n\n    function harvest() override external whenNotPaused {\n        uint256 availableReward = userInfo[msg.sender].unicEarned.sub(userInfo[msg.sender].unicHarvested);\n\n        require(availableReward > 0, \"ProtocolUnicRewards: No rewards available\");\n        require(unic.balanceOf(address(this)) > availableReward, \"ProtocolUnicRewards: Not enough balance to harvest\");\n\n        userInfo[msg.sender].unicHarvested = userInfo[msg.sender].unicHarvested.add(availableReward);\n        unic.transfer(msg.sender, availableReward);\n        emit LogUnicHarvested(msg.sender, availableReward);\n    }\n\n    function pendingReward() external view returns (uint256) {\n        return userInfo[msg.sender].unicEarned.sub(userInfo[msg.sender].unicHarvested);\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "contracts/UnicStakingRewardManagerV2.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport \"./interfaces/IRewardable.sol\";\nimport \"./abstract/EmergencyWithdrawable.sol\";\nimport \"./interfaces/IUnicFactory.sol\";\n\ncontract UnicStakingRewardManagerV2 is Initializable, EmergencyWithdrawable {\n    using SafeMathUpgradeable for uint256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint256 private constant MAX_INT = 2**256 - 1;\n    uint256 private constant DIV_PRECISION = 1e18;\n\n    struct RewardPool {\n        IERC20Upgradeable rewardToken;\n        address creator;\n        uint256 startTime;\n        uint256 endTime;\n        uint256 amount;\n        uint256 id;\n    }\n\n    // incremental counter for all pools\n    uint256 public poolCounter;\n\n    // the staking pool that should receive rewards from the pools later on\n    IRewardable public stakingPool;\n\n    // using the counter as the key\n    mapping(uint256 => RewardPool) public rewardPools;\n    mapping(address => RewardPool[]) public rewardPoolsByToken;\n\n    event RewardPoolAdded(address indexed rewardToken, address indexed creator, uint256 poolId, uint256 amount);\n\n    IUnicFactory private factory;\n\n    function initialize(\n        IRewardable _stakingPool\n    ) public initializer {\n        __Ownable_init();\n        stakingPool = _stakingPool;\n    }\n\n    function setUnicFactory(IUnicFactory _factory) external onlyOwner {\n        factory = _factory;\n    }\n\n    function addRewardPool(IERC20Upgradeable rewardToken, uint256 startTime, uint256 endTime, uint256 amount) external {\n        require(\n            address(rewardToken) == 0x94E0BAb2F6Ab1F19F4750E42d7349f2740513aD5 || // UNIC\n            address(rewardToken) == 0x3d9233F15BB93C78a4f07B5C5F7A018630217cB3 || // first uToken (Unicly Genesis uUNICLY)\n            factory.getUToken(address(rewardToken)) > 0,\n            \"UnicStakingRewardManagerV2: rewardToken must be UNIC or uToken\"\n        );\n        require(startTime > block.timestamp, \"Start time should be in the future\");\n        require(endTime > startTime, \"End time must be after start time\");\n\n        rewardToken.approve(address(stakingPool), MAX_INT);\n        rewardToken.safeTransferFrom(msg.sender, address(this), amount);\n        poolCounter = poolCounter.add(1);\n\n        RewardPool memory pool = RewardPool({\n            creator: msg.sender,\n            rewardToken: rewardToken,\n            startTime: startTime,\n            endTime: endTime,\n            amount: amount,\n            id: poolCounter\n        });\n\n        rewardPools[poolCounter] = pool;\n        emit RewardPoolAdded(address(rewardToken), msg.sender, poolCounter, amount);\n    }\n\n    function distributeRewards(uint256 poolId) public {\n        RewardPool storage pool = rewardPools[poolId];\n        require(pool.startTime < block.timestamp, \"Pool not started\");\n        require(pool.amount > 0, \"Pool fully distributed\");\n\n        uint256 vestedForDistribution = pool.endTime.sub(block.timestamp).mul(DIV_PRECISION).div((pool.endTime.sub(pool.startTime))).mul(pool.amount).div(DIV_PRECISION);\n        pool.amount = pool.amount.sub(vestedForDistribution);\n\n        // if we don't have enough balance on the contract, we just distribute what we have\n        if (pool.rewardToken.balanceOf(address(this)) < vestedForDistribution) {\n            vestedForDistribution = pool.rewardToken.balanceOf(address(this));\n        }\n\n        // the staking pool only knows\n        if (vestedForDistribution > 0) {\n            stakingPool.addRewards(address(pool.rewardToken), vestedForDistribution);\n        }\n    }\n}\n"
    },
    "contracts/UnicStakingRewardManager.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport \"./interfaces/IRewardable.sol\";\nimport \"./abstract/EmergencyWithdrawable.sol\";\n\ncontract UnicStakingRewardManager is Initializable, EmergencyWithdrawable {\n    using SafeMathUpgradeable for uint256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint256 private constant MAX_INT = 2**256 - 1;\n    uint256 private constant DIV_PRECISION = 1e18;\n\n    struct RewardPool {\n        IERC20Upgradeable rewardToken;\n        address creator;\n        uint256 startTime;\n        uint256 endTime;\n        uint256 amount;\n        uint256 id;\n    }\n\n    // incremental counter for all pools\n    uint256 public poolCounter;\n\n    // the staking pool that should receive rewards from the pools later on\n    IRewardable public stakingPool;\n\n    // using the counter as the key\n    mapping(uint256 => RewardPool) public rewardPools;\n    mapping(address => RewardPool[]) public rewardPoolsByToken;\n\n    event RewardPoolAdded(address indexed rewardToken, address indexed creator, uint256 poolId, uint256 amount);\n\n    function initialize(\n        IRewardable _stakingPool\n    ) public initializer {\n        __Ownable_init();\n        stakingPool = _stakingPool;\n    }\n\n    function addRewardPool(IERC20Upgradeable rewardToken, uint256 startTime, uint256 endTime, uint256 amount) external onlyOwner {\n        require(startTime > block.timestamp, \"Start time should be in the future\");\n        require(endTime > startTime, \"End time must be after start time\");\n\n        rewardToken.approve(address(stakingPool), MAX_INT);\n        rewardToken.safeTransferFrom(msg.sender, address(this), amount);\n        poolCounter = poolCounter.add(1);\n\n        RewardPool memory pool = RewardPool({\n            creator: msg.sender,\n            rewardToken: rewardToken,\n            startTime: startTime,\n            endTime: endTime,\n            amount: amount,\n            id: poolCounter\n        });\n\n        rewardPools[poolCounter] = pool;\n        emit RewardPoolAdded(address(rewardToken), msg.sender, poolCounter, amount);\n    }\n\n    function distributeRewards(uint256 poolId) public {\n        RewardPool storage pool = rewardPools[poolId];\n        require(pool.startTime < block.timestamp, \"Pool not started\");\n        require(pool.amount > 0, \"Pool fully distributed\");\n\n        uint256 vestedForDistribution = pool.endTime.sub(block.timestamp).mul(DIV_PRECISION).div((pool.endTime.sub(pool.startTime))).mul(pool.amount).div(DIV_PRECISION);\n        pool.amount = pool.amount.sub(vestedForDistribution);\n\n        // if we don't have enough balance on the contract, we just distribute what we have\n        if (pool.rewardToken.balanceOf(address(this)) < vestedForDistribution) {\n            vestedForDistribution = pool.rewardToken.balanceOf(address(this));\n        }\n\n        // the staking pool only knows\n        if (vestedForDistribution > 0) {\n            stakingPool.addRewards(address(pool.rewardToken), vestedForDistribution);\n        }\n    }\n}\n"
    },
    "contracts/AuctionHandler.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport './interfaces/IUnicFactory.sol';\nimport './Converter.sol';\n\ncontract AuctionHandler is Initializable, OwnableUpgradeable {\n    using SafeMathUpgradeable for uint;\n\n    struct AuctionInfo {\n        uint startTime;\n        uint endTime;\n        address uToken;\n        uint256 nftIndexForUToken;\n        bool claimed;\n    }\n\n    struct Bid {\n    \taddress bidder;\n    \tuint256 amount;\n    }\n\n    // Info of each pool.\n    AuctionInfo[] public auctionInfo;\n\n    // Auction index to bid\n    mapping(uint256 => Bid) public bids;\n    // Auction index to user address to amount\n    mapping(uint256 => mapping(address => uint256)) public bidRefunds;\n    // uToken address to NFT index to auction index\n    mapping(address => mapping(uint256 => uint256)) public auctionIndex;\n    // uToken address to NFT index to bool\n    mapping(address => mapping(uint256 => bool)) public auctionStarted;\n    // uToken address to vault balances\n    mapping(address => uint256) public vaultBalances;\n\n    address public factory;\n    // 3 days\n    uint public duration;\n    // 105\n    uint8 public minBidMultiplier;\n    // 5 minutes?\n    uint public auctionExtension;\n    // 100 (1%)\n    uint8 public feeDivisor;\n\n    address public feeToSetter;\n    address public feeTo;\n\n    event AuctionCreated(uint256 indexed auctionId, address indexed uToken, uint256 nftIndexForUToken, uint startTime, uint indexed endTime);\n    event BidCreated(uint256 indexed auctionId, address indexed bidder, uint256 amount, uint indexed endTime);\n    event BidRemoved(uint256 indexed auctionId, address indexed bidder);\n    event ClaimedNFT(uint256 indexed auctionId, address indexed winner);\n\n    function initialize(\n        address _factory,\n        uint _duration,\n        uint8 _minBidMultiplier,\n        uint _auctionExtension,\n        uint8 _feeDivisor,\n        address _feeToSetter,\n        address _feeTo\n    ) public initializer {\n        __Ownable_init();\n        factory = _factory;\n        duration = _duration;\n        minBidMultiplier = _minBidMultiplier;\n        auctionExtension = _auctionExtension;\n        feeDivisor = _feeDivisor;\n        feeToSetter = _feeToSetter;\n        feeTo = _feeTo;\n    }\n\n    function auctionLength() external view returns (uint256) {\n        return auctionInfo.length;\n    }\n\n    function newAuction(address _uToken, uint256 _nftIndexForUToken) public payable {\n        require(IUnicFactory(factory).getUToken(_uToken) != 0 || IUnicFactory(factory).uTokens(0) == _uToken,\n            \"AuctionHandler: uToken contract must be valid\");\n        require(Converter(_uToken).active(), \"AuctionHandler: Can not bid on inactive uToken\");\n        (address contractAddr, , , uint256 triggerPrice) = Converter(_uToken).nfts(_nftIndexForUToken);\n        // Check that nft index exists on vault contract\n        require(contractAddr != address(0), \"AuctionHandler: NFT index must exist\");\n        // Check that bid meets reserve price\n        require(triggerPrice <= msg.value, \"AuctionHandler: Starting bid must be higher than trigger price\");\n        require(!auctionStarted[_uToken][_nftIndexForUToken], \"AuctionHandler: NFT already on auction\");\n        auctionStarted[_uToken][_nftIndexForUToken] = true;\n\n        uint256 currentIndex = auctionInfo.length;\n        uint auctionEndTime = getBlockTimestamp().add(duration);\n\n        auctionInfo.push(\n            AuctionInfo({\n                startTime: getBlockTimestamp(),\n                endTime: auctionEndTime,\n                uToken: _uToken,\n                nftIndexForUToken: _nftIndexForUToken,\n                claimed: false\n            })\n        );\n\n        auctionIndex[_uToken][_nftIndexForUToken] = currentIndex;\n        uint256 fee = msg.value.div(feeDivisor);\n        vaultBalances[_uToken] = vaultBalances[_uToken].add(msg.value.sub(fee));\n        bids[currentIndex] = Bid(msg.sender, msg.value);\n        sendFee(fee);\n\n        emit AuctionCreated(currentIndex, _uToken, _nftIndexForUToken, getBlockTimestamp(), auctionEndTime);\n        emit BidCreated(currentIndex, msg.sender, msg.value, auctionEndTime);\n    }\n\n    function bid(uint256 _auctionId) public payable {\n        AuctionInfo storage thisAuction = auctionInfo[_auctionId];\n        require(getBlockTimestamp() < thisAuction.endTime, \"AuctionHandler: Auction for NFT ended\");\n        require(Converter(thisAuction.uToken).active(), \"AuctionHandler: Can not bid on inactive uToken\");\n\n        Bid storage topBid = bids[_auctionId];\n        require(topBid.bidder != msg.sender, \"AuctionHandler: You have an active bid\");\n        require(topBid.amount.mul(minBidMultiplier) <= msg.value.mul(100), \"AuctionHandler: Bid too low\");\n        require(bidRefunds[_auctionId][msg.sender] == 0, \"AuctionHandler: Collect bid refund first\");\n\n        // Case where new top bid occurs near end time\n        // In this case we add an extension to the auction\n        if(getBlockTimestamp() > thisAuction.endTime.sub(auctionExtension)) {\n            thisAuction.endTime = thisAuction.endTime.add(auctionExtension);\n        }\n\n        bidRefunds[_auctionId][topBid.bidder] = topBid.amount;\n        uint256 fee = (msg.value.sub(topBid.amount)).div(feeDivisor);\n        vaultBalances[thisAuction.uToken] = vaultBalances[thisAuction.uToken].add(msg.value).sub(topBid.amount).sub(fee);\n\n        topBid.bidder = msg.sender;\n        topBid.amount = msg.value;\n\n        sendFee(fee);\n\n        emit BidCreated(_auctionId, msg.sender, msg.value, thisAuction.endTime);\n    }\n\n    function unbid(uint256 _auctionId) public {\n        Bid memory topBid = bids[_auctionId];\n        require(topBid.bidder != msg.sender, \"AuctionHandler: Top bidder can not unbid\");\n\n        uint256 refundAmount = bidRefunds[_auctionId][msg.sender];\n        require(refundAmount > 0, \"AuctionHandler: No bid found\");\n        bidRefunds[_auctionId][msg.sender] = 0;\n        (bool sent, bytes memory data) = msg.sender.call{value: refundAmount}(\"\");\n        require(sent, \"AuctionHandler: Failed to send Ether\");\n\n        emit BidRemoved(_auctionId, msg.sender);\n    }\n\n    // Claim NFT if address is winning bidder\n    function claim(uint256 _auctionId) public {\n        AuctionInfo storage thisAuction = auctionInfo[_auctionId];\n        require(getBlockTimestamp() > thisAuction.endTime, \"AuctionHandler: Auction is not over\");\n        require(!thisAuction.claimed, \"AuctionHandler: Already claimed\");\n        Bid memory topBid = bids[_auctionId];\n        require(msg.sender == topBid.bidder, \"AuctionHandler: Only winner can claim\");\n\n        thisAuction.claimed = true;\n\n        require(Converter(thisAuction.uToken).claimNFT(thisAuction.nftIndexForUToken, topBid.bidder), \"AuctionHandler: Claim failed\");\n\n        emit ClaimedNFT(_auctionId, topBid.bidder);\n    }\n\n    function burnAndRedeem(address _uToken, uint256 _amount) public {\n        require(vaultBalances[_uToken] > 0, \"AuctionHandler: No vault balance to redeem from\");\n\n        uint256 redeemAmount = _amount.mul(vaultBalances[_uToken]).div(IERC20Upgradeable(_uToken).totalSupply());\n        Converter(_uToken).burnFrom(msg.sender, _amount);\n        vaultBalances[_uToken] = vaultBalances[_uToken].sub(redeemAmount);\n\n        // Redeem ETH corresponding to uToken amount\n        (bool sent, bytes memory data) = msg.sender.call{value: redeemAmount}(\"\");\n        require(sent, \"AuctionHandler: Failed to send Ether\");\n    }\n\n    // This function is for fee-taking\n    function sendFee(uint256 _fees) internal {\n        // Send fee to feeTo address\n        (bool sent, bytes memory data) = feeTo.call{value: _fees}(\"\");\n        require(sent, \"AuctionHandler: Failed to send Ether\");\n    }\n\n    function setFactory(address _factory) public onlyOwner {\n        factory = _factory;\n    }\n\n    function setAuctionParameters(uint _duration, uint8 _minBidMultiplier, uint _auctionExtension, uint8 _feeDivisor) public onlyOwner {\n        require(_duration > 0 && _minBidMultiplier > 100 && _auctionExtension > 0 && _feeDivisor > 0, \"AuctionHandler: Invalid parameters\");\n        duration = _duration;\n        minBidMultiplier = _minBidMultiplier;\n        auctionExtension = _auctionExtension;\n        feeDivisor = _feeDivisor;\n    }\n\n    function setFeeTo(address _feeTo) public {\n        require(msg.sender == feeToSetter, \"AuctionHandler: Not feeToSetter\");\n        require(_feeTo != address(0), \"AuctionHandler: Fee address cannot be zero address\");\n        feeTo = _feeTo;\n    }\n\n    function setFeeToSetter(address _feeToSetter) public {\n        require(msg.sender == feeToSetter, \"AuctionHandler: Not feeToSetter\");\n        feeToSetter = _feeToSetter;\n    }\n\n    function getBlockTimestamp() internal view returns (uint) {\n        // solium-disable-next-line security/no-block-members\n        return block.timestamp;\n    }\n\n    function onAuction(address uToken, uint256 nftIndexForUToken) external view returns (bool) {\n        return auctionStarted[uToken][nftIndexForUToken];\n    }\n}\n"
    },
    "contracts/UnicFactory.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"./interfaces/IConverter.sol\";\nimport './interfaces/IUnicFactory.sol';\nimport './interfaces/IUnicConverterProxyTransactionFactory.sol';\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract UnicFactory is IUnicFactory, Initializable, OwnableUpgradeable {\n    using SafeMathUpgradeable for uint;\n\n    // Address that receives fees\n    address public override feeTo;\n\n    // Address of the converter implementation used for cheap clones\n    address public override converterImplementation;\n\n    // Address that gets to set the feeTo address\n    address public override feeToSetter;\n\n    // List of uToken addresses\n    address[] public override uTokens;\n\n    address public override auctionHandler;\n\n    address public override vaultManager;\n\n    uint256 public override feeDivisor;\n\n    uint256 public override uTokenSupply;\n\n    mapping(address => uint) public override getUToken;\n\n    mapping(address => address) public override getGovernorAlpha;\n\n    event TokenCreated(address indexed caller, address indexed uToken);\n\n    function uTokensLength() external override view returns (uint) {\n        return uTokens.length;\n    }\n\n    // Constructor just needs to know who gets to set feeTo address and default fee amount`\n    function initialize(address _feeToSetter, uint256 _feeDivisor, uint256 _uTokenSupply) public initializer {\n        __Ownable_init();\n        feeToSetter = _feeToSetter;\n        feeDivisor = _feeDivisor;\n        vaultManager = msg.sender;\n        uTokenSupply = _uTokenSupply;\n    }\n\n    function createUToken(\n        string calldata name,\n        string calldata symbol,\n        address proxyTransactionFactory,\n        bool enableProxyTransactions\n    ) external override returns (address, address) {\n        require(bytes(name).length < 32, 'UnicFactory: MAX NAME');\n        require(bytes(symbol).length < 16, 'UnicFactory: MAX TICKER');\n\n        address issuer = msg.sender;\n        address converter = deployMinimal(\n            converterImplementation,\n            abi.encodeWithSignature(\"initialize(string,string,address,address)\", name, symbol, issuer, address(this))\n        );\n        address converterGovernorAlpha;\n        if (enableProxyTransactions) {\n            address converterTimeLock;\n            (converterGovernorAlpha, converterTimeLock) = IUnicConverterProxyTransactionFactory(proxyTransactionFactory).createProxyTransaction(converter, issuer);\n            IConverter(converter).setConverterTimeLock(converterTimeLock);\n            getGovernorAlpha[converter] = converterGovernorAlpha;\n        }\n        // Populate mapping\n        getUToken[converter] = uTokens.length;\n        // Add to list\n        uTokens.push(converter);\n        emit TokenCreated(msg.sender, converter);\n\n        return (converter, address(converterGovernorAlpha));\n    }\n\n    function setFeeTo(address _feeTo) external override {\n        require(msg.sender == feeToSetter, 'Unic: FORBIDDEN');\n        feeTo = _feeTo;\n    }\n\n    function setFeeToSetter(address _feeToSetter) external override {\n        require(msg.sender == feeToSetter, 'Unic: FORBIDDEN');\n        feeToSetter = _feeToSetter;\n    }\n\n    function setConverterImplementation(address _converterImplementation) onlyOwner external override {\n        converterImplementation = _converterImplementation;\n    }\n\n    function setAuctionHandler(address _auctionHandler) onlyOwner external override {\n        auctionHandler = _auctionHandler;\n    }\n\n    function setFeeDivisor(uint256 _feeDivisor) onlyOwner external override {\n        feeDivisor = _feeDivisor;\n    }\n\n    function setVaultManager(address _vaultManager) onlyOwner external override {\n        vaultManager = _vaultManager;\n    }\n\n    function setSupply(uint256 _uTokenSupply) onlyOwner external override {\n        uTokenSupply = _uTokenSupply;\n    }\n\n    // Adapted from https://github.com/OpenZeppelin/openzeppelin-sdk/blob/v2.6.0/packages/lib/contracts/upgradeability/ProxyFactory.sol#L18\n    function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\n        // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\n        bytes20 targetBytes = bytes20(_logic);\n        assembly {\n            let clone := mload(0x40)\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(clone, 0x14), targetBytes)\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            proxy := create(0, clone, 0x37)\n        }\n\n        if (_data.length > 0) {\n            (bool success,) = proxy.call(_data);\n            require(success);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IUnicConverterProxyTransactionFactory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUnicConverterProxyTransactionFactory {\n    event UnicGovernorAlphaCreated(address indexed governorAlpha, address indexed timelock);\n\n    function createProxyTransaction(address uToken, address guardian) external returns (address, address);\n}"
    },
    "contracts/UnicConverterProxyTransactionFactory.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"./ConverterTimeLock.sol\";\nimport './interfaces/IUnicConverterGovernorAlphaFactory.sol';\nimport './interfaces/IUnicConverterProxyTransactionFactory.sol';\n\ncontract UnicConverterProxyTransactionFactory is IUnicConverterProxyTransactionFactory {\n\n    // ConverterGovernorAlphaConfig\n    address public config;\n\n    IUnicConverterGovernorAlphaFactory public governorAlphaFactory;\n\n    constructor (address _config, address _governorAlphaFactory) public {\n        config = _config;\n        governorAlphaFactory = IUnicConverterGovernorAlphaFactory(_governorAlphaFactory);\n    }\n\n    /**\n     * Creates the contracts for the proxy transaction functionality for a given uToken\n     */\n    function createProxyTransaction(address uToken, address guardian) external override returns (address, address) {\n        ConverterTimeLock converterTimeLock = new ConverterTimeLock(address(this), uToken, config);\n        address converterGovernorAlpha = governorAlphaFactory.createGovernorAlpha(uToken, guardian, address(converterTimeLock), config);\n        // Initialize timelock admin\n        converterTimeLock.setAdmin(address(converterGovernorAlpha));\n\n        emit UnicGovernorAlphaCreated(converterGovernorAlpha, address(converterTimeLock));\n        \n        return (converterGovernorAlpha, address(converterTimeLock));\n    }\n}"
    },
    "contracts/ConverterTimeLock.sol": {
      "content": "// COPIED FROM https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/GovernorAlpha.sol\n// Copyright 2020 Compound Labs, Inc.\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./interfaces/IProxyTransaction.sol\";\nimport \"./ConverterGovernorAlphaConfig.sol\";\n\n/**\n * Time lock for queued proposals to ensure the minimum delay between the end of voting and execution\n */\ncontract ConverterTimeLock {\n    using SafeMath for uint;\n\n    event NewAdmin(address indexed newAdmin);\n    event NewPendingAdmin(address indexed newPendingAdmin);\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\n\n    // @dev the corresponding ConverterGovernorAlpha\n    address public admin;\n\n    ConverterGovernorAlphaConfig public config;\n\n    mapping (bytes32 => bool) public queuedTransactions;\n\n    IProxyTransaction converter;\n\n    constructor(address admin_, address _converter, address _config) public {\n        admin = admin_;\n\n        converter = IProxyTransaction(_converter);\n        config = ConverterGovernorAlphaConfig(_config);\n    }\n\n    receive() external payable { }\n\n    /**\n     * @dev for the UnicGovernorAlphaFactory\n     */\n    function setAdmin(address _admin) public {\n        require(msg.sender == admin, \"TimeLock::acceptAdmin: Call must come from admin.\");\n        admin = _admin;\n\n        emit NewAdmin(admin);\n    }\n\n    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {\n        require(msg.sender == admin, \"TimeLock::queueTransaction: Call must come from admin.\");\n        require(eta >= getBlockTimestamp().add(config.delay()), \"TimeLock::queueTransaction: Estimated execution block must satisfy delay.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = true;\n\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\n        return txHash;\n    }\n\n    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {\n        require(msg.sender == admin, \"TimeLock::cancelTransaction: Call must come from admin.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = false;\n\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\n    }\n\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public payable returns (bytes memory) {\n        require(msg.sender == admin, \"TimeLock::executeTransaction: Call must come from admin.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        require(queuedTransactions[txHash], \"TimeLock::executeTransaction: Transaction hasn't been queued.\");\n        require(getBlockTimestamp() >= eta, \"TimeLock::executeTransaction: Transaction hasn't surpassed time lock.\");\n        require(getBlockTimestamp() <= eta.add(config.gracePeriod()), \"TimeLock::executeTransaction: Transaction is stale.\");\n\n        queuedTransactions[txHash] = false;\n\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n        }\n\n        // solium-disable-next-line security/no-call-value\n        (bool success, bytes memory returnData) = converter.forwardCall.value(value)(target, value, callData);\n        require(success, \"TimeLock::executeTransaction: Transaction execution reverted.\");\n\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\n\n        return returnData;\n    }\n\n    function getBlockTimestamp() internal view returns (uint) {\n        // solium-disable-next-line security/no-block-members\n        return block.timestamp;\n    }\n}"
    },
    "contracts/interfaces/IUnicConverterGovernorAlphaFactory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUnicConverterGovernorAlphaFactory {\n    function createGovernorAlpha(\n        address uToken,\n        address guardian,\n        address converterTimeLock,\n        address config\n    ) external returns (address);\n}"
    },
    "contracts/ConverterGovernorAlphaConfig.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ConverterGovernorAlphaConfig is Ownable {\n    uint public constant MINIMUM_DELAY = 1 days;\n    uint public constant MAXIMUM_DELAY = 30 days;\n\n    // 1000 / quorumVotesDivider = percentage needed\n    uint public quorumVotesDivider;\n    // 1000 / proposalThresholdDivider = percentage needed\n    uint public proposalThresholdDivider;\n    // The maximum number of individual transactions that can make up a proposal\n    uint public proposalMaxOperations;\n    // Time period (in blocks) during which the proposal can be voted on\n    uint public votingPeriod;\n    // Delay (in blocks) that must be waited after a proposal has been added before the voting phase begins\n    uint public votingDelay;\n\n    // Time period in which the transaction must be executed after the delay expires\n    uint public gracePeriod;\n    // Delay that must be waited after the voting period has ended and a proposal has been queued before it can be executed\n    uint public delay;\n\n    event NewQuorumVotesDivider(uint indexed newQuorumVotesDivider);\n    event NewProposalThresholdDivider(uint indexed newProposalThresholdDivider);\n    event NewProposalMaxOperations(uint indexed newProposalMaxOperations);\n    event NewVotingPeriod(uint indexed newVotingPeriod);\n    event NewVotingDelay(uint indexed newVotingDelay);\n\n    event NewGracePeriod(uint indexed newGracePeriod);\n    event NewDelay(uint indexed newDelay);\n\n    constructor () public {\n        quorumVotesDivider = 16; // 62.5%\n        proposalThresholdDivider = 2000; // 0.5%\n        proposalMaxOperations = 10;\n        votingPeriod = 17280;\n        votingDelay = 1;\n\n        gracePeriod = 14 days;\n        delay = 2 days;\n    }\n\n    function setQuorumVotesDivider(uint _quorumVotesDivider) external onlyOwner {\n        quorumVotesDivider = _quorumVotesDivider;\n        emit NewQuorumVotesDivider(_quorumVotesDivider);\n    }\n    function setProposalThresholdDivider(uint _proposalThresholdDivider) external onlyOwner {\n        proposalThresholdDivider = _proposalThresholdDivider;\n        emit NewProposalThresholdDivider(_proposalThresholdDivider);\n    }\n    function setProposalMaxOperations(uint _proposalMaxOperations) external onlyOwner {\n        proposalMaxOperations = _proposalMaxOperations;\n        emit NewProposalMaxOperations(_proposalMaxOperations);\n    }\n    function setVotingPeriod(uint _votingPeriod) external onlyOwner {\n        votingPeriod = _votingPeriod;\n        emit NewVotingPeriod(_votingPeriod);\n    }\n    function setVotingDelay(uint _votingDelay) external onlyOwner {\n        votingDelay = _votingDelay;\n        emit NewVotingDelay(_votingDelay);\n    }\n\n    function setGracePeriod(uint _gracePeriod) external onlyOwner {\n        gracePeriod = _gracePeriod;\n        emit NewGracePeriod(_gracePeriod);\n    }\n    function setDelay(uint _delay) external onlyOwner {\n        require(_delay >= MINIMUM_DELAY, \"TimeLock::setDelay: Delay must exceed minimum delay.\");\n        require(_delay <= MAXIMUM_DELAY, \"TimeLock::setDelay: Delay must not exceed maximum delay.\");\n        delay = _delay;\n        emit NewDelay(_delay);\n    }\n}\n"
    },
    "contracts/UnicConverterGovernorAlphaFactory.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport {ConverterGovernorAlpha} from \"./ConverterGovernorAlpha.sol\";\nimport './interfaces/IUnicConverterGovernorAlphaFactory.sol';\n\ncontract UnicConverterGovernorAlphaFactory is IUnicConverterGovernorAlphaFactory {\n\n    /**\n     * Creates the ConverterGovernorAlpha contract for the proxy transaction functionality for a given uToken\n     */\n    function createGovernorAlpha(\n        address uToken,\n        address guardian,\n        address converterTimeLock,\n        address config\n    ) external override returns (address) {\n        return address(new ConverterGovernorAlpha(converterTimeLock, uToken, guardian, config));\n    }\n}"
    },
    "contracts/ConverterGovernorAlpha.sol": {
      "content": "// COPIED FROM https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/GovernorAlpha.sol\n// Copyright 2020 Compound Labs, Inc.\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Ctrl+f for XXX to see all the modifications.\n// uint96s are changed to uint256s for simplicity and safety.\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"./Converter.sol\";\nimport \"./ConverterGovernorAlphaConfig.sol\";\n\ncontract ConverterGovernorAlpha {\n    /// @notice The name of this contract\n    // XXX: string public constant name = \"Compound Governor Alpha\";\n    string public constant name = \"uToken Governor Alpha\";\n\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\n    // XXX: function quorumVotes() public pure returns (uint) { return 400000e18; } // 400,000 = 4% of Comp\n    function quorumVotes() public view returns (uint) { return uToken.totalSupply() * 10 / config.quorumVotesDivider(); }\n\n    /// @notice The number of votes required in order for a voter to become a proposer\n    // XXX: function proposalThreshold() public pure returns (uint) { return 100000e18; } // 100,000 = 1% of Comp\n    function proposalThreshold() public view returns (uint) { return uToken.totalSupply() * 10 / config.proposalThresholdDivider(); }\n\n    /// @notice The maximum number of actions that can be included in a proposal\n    // XXX: function proposalMaxOperations() public pure returns (uint) { return 10; }\n    function proposalMaxOperations() public returns (uint) { return config.proposalMaxOperations(); }\n\n    /// @notice The delay before voting on a proposal may take place, once proposed\n    // XXX: function votingDelay() public pure returns (uint) { return 1; } // 1 block\n    function votingDelay() public returns (uint) { return config.votingDelay(); }\n\n    /// @notice The duration of voting on a proposal, in blocks\n    // XXX: function votingPeriod() public pure returns (uint) { return 17280; } // ~3 days in blocks (assuming 15s blocks)\n    function votingPeriod() public returns (uint) { return config.votingPeriod(); }\n\n    ConverterGovernorAlphaConfig public config;\n\n    /// @notice The address of the Compound Protocol TimeLock\n    TimeLockInterface public timelock;\n\n    /// @notice The address of the uToken\n    // XXX: CompInterface public comp;\n    Converter public uToken;\n\n    /// @notice The address of the Governor Guardian\n    address public guardian;\n\n    /// @notice The total number of proposals\n    uint public proposalCount;\n\n    struct Proposal {\n        /// @notice Unique id for looking up a proposal\n        uint id;\n\n        /// @notice Creator of the proposal\n        address proposer;\n\n        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\n        uint eta;\n\n        /// @notice the ordered list of target addresses for calls to be made\n        address[] targets;\n\n        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\n        uint[] values;\n\n        /// @notice The ordered list of function signatures to be called\n        string[] signatures;\n\n        /// @notice The ordered list of calldata to be passed to each call\n        bytes[] calldatas;\n\n        /// @notice The block at which voting begins: holders must delegate their votes prior to this block\n        uint startBlock;\n\n        /// @notice The block at which voting ends: votes must be cast prior to this block\n        uint endBlock;\n\n        /// @notice Current number of votes in favor of this proposal\n        uint forVotes;\n\n        /// @notice Current number of votes in opposition to this proposal\n        uint againstVotes;\n\n        /// @notice Flag marking whether the proposal has been canceled\n        bool canceled;\n\n        /// @notice Flag marking whether the proposal has been executed\n        bool executed;\n\n        /// @notice Receipts of ballots for the entire set of voters\n        mapping (address => Receipt) receipts;\n    }\n\n    /// @notice Ballot receipt record for a voter\n    struct Receipt {\n        /// @notice Whether or not a vote has been cast\n        bool hasVoted;\n\n        /// @notice Whether or not the voter supports the proposal\n        bool support;\n\n        /// @notice The number of votes the voter had, which were cast\n        uint256 votes;\n    }\n\n    /// @notice Possible states that a proposal may be in\n    enum ProposalState {\n        Pending,\n        Active,\n        Canceled,\n        Defeated,\n        Succeeded,\n        Queued,\n        Expired,\n        Executed\n    }\n\n    /// @notice The official record of all proposals ever proposed\n    mapping (uint => Proposal) public proposals;\n\n    /// @notice The latest proposal for each proposer\n    mapping (address => uint) public latestProposalIds;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,bool support)\");\n\n    /// @notice An event emitted when a new proposal is created\n    event ProposalCreated(uint id, address proposer, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, uint startBlock, uint endBlock, string description);\n\n    /// @notice An event emitted when a vote has been cast on a proposal\n    event VoteCast(address voter, uint proposalId, bool support, uint votes);\n\n    /// @notice An event emitted when a proposal has been canceled\n    event ProposalCanceled(uint id);\n\n    /// @notice An event emitted when a proposal has been queued in the TimeLock\n    event ProposalQueued(uint id, uint eta);\n\n    /// @notice An event emitted when a proposal has been executed in the TimeLock\n    event ProposalExecuted(uint id);\n\n    constructor(address timelock_, address _uToken, address guardian_, address _config) public {\n        timelock = TimeLockInterface(timelock_);\n        uToken = Converter(_uToken);\n        guardian = guardian_;\n        config = ConverterGovernorAlphaConfig(_config);\n    }\n\n    /**\n     * Add a proposal. The proposer's voting power must exceed the threshold, and only one active proposal is allowed per user.\n     */\n    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) public returns (uint) {\n        require(uToken.getPriorVotes(msg.sender, sub256(block.number, 1)) > proposalThreshold(), \"GovernorAlpha::propose: proposer votes below proposal threshold\");\n        require(targets.length == values.length && targets.length == signatures.length && targets.length == calldatas.length, \"GovernorAlpha::propose: proposal function information arity mismatch\");\n        require(targets.length != 0, \"GovernorAlpha::propose: must provide actions\");\n        require(targets.length <= proposalMaxOperations(), \"GovernorAlpha::propose: too many actions\");\n\n        uint latestProposalId = latestProposalIds[msg.sender];\n        if (latestProposalId != 0) {\n          ProposalState proposersLatestProposalState = state(latestProposalId);\n          require(proposersLatestProposalState != ProposalState.Active, \"GovernorAlpha::propose: one live proposal per proposer, found an already active proposal\");\n          require(proposersLatestProposalState != ProposalState.Pending, \"GovernorAlpha::propose: one live proposal per proposer, found an already pending proposal\");\n        }\n\n        uint startBlock = add256(block.number, votingDelay());\n        uint endBlock = add256(startBlock, votingPeriod());\n\n        proposalCount++;\n        Proposal memory newProposal = Proposal({\n            id: proposalCount,\n            proposer: msg.sender,\n            eta: 0,\n            targets: targets,\n            values: values,\n            signatures: signatures,\n            calldatas: calldatas,\n            startBlock: startBlock,\n            endBlock: endBlock,\n            forVotes: 0,\n            againstVotes: 0,\n            canceled: false,\n            executed: false\n        });\n\n        proposals[newProposal.id] = newProposal;\n        latestProposalIds[newProposal.proposer] = newProposal.id;\n\n        emit ProposalCreated(newProposal.id, msg.sender, targets, values, signatures, calldatas, startBlock, endBlock, description);\n        return newProposal.id;\n    }\n\n    /**\n     * Place a proposal in the ConverterTimeLock queue when the voting period has expired and the voting was successful.\n     */\n    function queue(uint proposalId) public {\n        require(state(proposalId) == ProposalState.Succeeded, \"GovernorAlpha::queue: proposal can only be queued if it is succeeded\");\n        Proposal storage proposal = proposals[proposalId];\n        uint eta = add256(block.timestamp, config.delay());\n        for (uint i = 0; i < proposal.targets.length; i++) {\n            _queueOrRevert(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta);\n        }\n        proposal.eta = eta;\n        emit ProposalQueued(proposalId, eta);\n    }\n\n    function _queueOrRevert(address target, uint value, string memory signature, bytes memory data, uint eta) internal {\n        require(!timelock.queuedTransactions(keccak256(abi.encode(target, value, signature, data, eta))), \"GovernorAlpha::_queueOrRevert: proposal action already queued at eta\");\n        timelock.queueTransaction(target, value, signature, data, eta);\n    }\n\n    /**\n     * Executes a proposal when it has been queued and the waiting time has expired.\n     */\n    function execute(uint proposalId) public payable {\n        require(state(proposalId) == ProposalState.Queued, \"GovernorAlpha::execute: proposal can only be executed if it is queued\");\n        Proposal storage proposal = proposals[proposalId];\n        proposal.executed = true;\n        for (uint i = 0; i < proposal.targets.length; i++) {\n            timelock.executeTransaction.value(proposal.values[i])(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\n        }\n        emit ProposalExecuted(proposalId);\n    }\n\n    /**\n     * Proposals can be canceled by the creator of the collection or if the voting power of the proposer falls below the threshold.\n     */\n    function cancel(uint proposalId) public {\n        ProposalState state = state(proposalId);\n        require(state != ProposalState.Executed, \"GovernorAlpha::cancel: cannot cancel executed proposal\");\n\n        Proposal storage proposal = proposals[proposalId];\n        require(msg.sender == guardian || uToken.getPriorVotes(proposal.proposer, sub256(block.number, 1)) < proposalThreshold(), \"GovernorAlpha::cancel: proposer above threshold\");\n\n        proposal.canceled = true;\n        for (uint i = 0; i < proposal.targets.length; i++) {\n            timelock.cancelTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\n        }\n\n        emit ProposalCanceled(proposalId);\n    }\n\n    function getActions(uint proposalId) public view returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas) {\n        Proposal storage p = proposals[proposalId];\n        return (p.targets, p.values, p.signatures, p.calldatas);\n    }\n\n    function getReceipt(uint proposalId, address voter) public view returns (Receipt memory) {\n        return proposals[proposalId].receipts[voter];\n    }\n\n    function state(uint proposalId) public view returns (ProposalState) {\n        require(proposalCount >= proposalId && proposalId > 0, \"GovernorAlpha::state: invalid proposal id\");\n        Proposal storage proposal = proposals[proposalId];\n        if (proposal.canceled) {\n            return ProposalState.Canceled;\n        } else if (block.number <= proposal.startBlock) {\n            return ProposalState.Pending;\n        } else if (block.number <= proposal.endBlock) {\n            return ProposalState.Active;\n        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotes()) {\n            return ProposalState.Defeated;\n        } else if (proposal.eta == 0) {\n            return ProposalState.Succeeded;\n        } else if (proposal.executed) {\n            return ProposalState.Executed;\n        } else if (block.timestamp >= add256(proposal.eta, config.gracePeriod())) {\n            return ProposalState.Expired;\n        } else {\n            return ProposalState.Queued;\n        }\n    }\n\n    function castVote(uint proposalId, bool support) public {\n        return _castVote(msg.sender, proposalId, support);\n    }\n\n    function castVoteBySig(uint proposalId, bool support, uint8 v, bytes32 r, bytes32 s) public {\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"GovernorAlpha::castVoteBySig: invalid signature\");\n        return _castVote(signatory, proposalId, support);\n    }\n\n    function _castVote(address voter, uint proposalId, bool support) internal {\n        require(state(proposalId) == ProposalState.Active, \"GovernorAlpha::_castVote: voting is closed\");\n        Proposal storage proposal = proposals[proposalId];\n        Receipt storage receipt = proposal.receipts[voter];\n        require(receipt.hasVoted == false, \"GovernorAlpha::_castVote: voter already voted\");\n        uint256 votes = uToken.getPriorVotes(voter, proposal.startBlock);\n\n        if (support) {\n            proposal.forVotes = add256(proposal.forVotes, votes);\n        } else {\n            proposal.againstVotes = add256(proposal.againstVotes, votes);\n        }\n\n        receipt.hasVoted = true;\n        receipt.support = support;\n        receipt.votes = votes;\n\n        emit VoteCast(voter, proposalId, support, votes);\n    }\n\n    function __abdicate() public {\n        require(msg.sender == guardian, \"GovernorAlpha::__abdicate: sender must be gov guardian\");\n        guardian = address(0);\n    }\n\n    function add256(uint256 a, uint256 b) internal pure returns (uint) {\n        uint c = a + b;\n        require(c >= a, \"addition overflow\");\n        return c;\n    }\n\n    function sub256(uint256 a, uint256 b) internal pure returns (uint) {\n        require(b <= a, \"subtraction underflow\");\n        return a - b;\n    }\n\n    function getChainId() internal pure returns (uint) {\n        uint chainId;\n        assembly { chainId := chainid() }\n        return chainId;\n    }\n}\n\ninterface TimeLockInterface {\n    function acceptAdmin() external;\n    function queuedTransactions(bytes32 hash) external view returns (bool);\n    function queueTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external returns (bytes32);\n    function cancelTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external;\n    function executeTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external payable returns (bytes memory);\n}\n"
    },
    "contracts/UnicStakingVotes.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\";\nimport \"./interfaces/IGetStakeWithMultiplier.sol\";\n\ncontract UnicStakingVotes is Ownable {\n    IERC721Enumerable public stakingNftContract;\n    IGetStakeWithMultiplier public stakingPoolContract;\n\n    constructor(\n        IERC721Enumerable _stakingNftContract,\n        IGetStakeWithMultiplier _stakingPoolContract\n    ) public {\n        stakingNftContract = _stakingNftContract;\n        stakingPoolContract = _stakingPoolContract;\n    }\n\n    function setStakingNftContract(IERC721Enumerable _stakingNftContract) external onlyOwner {\n        stakingNftContract = _stakingNftContract;\n    }\n\n    function setStakingPoolContract(IGetStakeWithMultiplier _stakingPoolContract) external onlyOwner {\n        stakingPoolContract = _stakingPoolContract;\n    }\n\n    //returns the balance in staked UNIC with Multiplier \n    function balanceOf(address owner) external view returns (uint256 unicWithMultiplierSum) {\n        uint256 balanceOf = stakingNftContract.balanceOf(owner);\n\n        unicWithMultiplierSum = 0; \n\n        for (uint256 i = 0; i < balanceOf; i++) {\n            unicWithMultiplierSum += stakingPoolContract.getStakeWithMultiplier(stakingNftContract.tokenOfOwnerByIndex(owner, i));\n        }\n    } \n}"
    },
    "contracts/interfaces/IGetStakeWithMultiplier.sol": {
      "content": "pragma solidity 0.6.12;\n\ninterface IGetStakeWithMultiplier {\n    function getStakeWithMultiplier(uint256 nftId) external view returns (uint256);\n}\n"
    },
    "contracts/MockERC1155.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MockERC1155 is ERC1155(\"https://token-cdn-domain/{id}.json\"), Ownable {\n    /**\n    * @dev Mints a new NFT.\n    * @param _to The address that will own the minted NFT.\n    * @param _tokenId of the NFT to be minted by the msg.sender.\n    */\n    function mint (\n        address _to,\n        uint256 _tokenId,\n        uint256 amount,\n        bytes memory data\n    )\n        external\n        onlyOwner\n    {\n        super._mint(_to, _tokenId, amount, data);\n    }\n}"
    },
    "contracts/MockERC20.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// Copied from https://github.com/sushiswap/sushiswap/blob/master/contracts/MockERC20.sol\n\ncontract MockERC20 is ERC20 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 supply\n    ) public ERC20(name, symbol) {\n        _mint(msg.sender, supply);\n    }\n}"
    },
    "contracts/TimeLock.sol": {
      "content": "// COPIED FROM https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/GovernorAlpha.sol\n// Copyright 2020 Compound Labs, Inc.\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract Timelock {\n    using SafeMath for uint;\n\n    event NewAdmin(address indexed newAdmin);\n    event NewPendingAdmin(address indexed newPendingAdmin);\n    event NewDelay(uint indexed newDelay);\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\n\n    uint public constant GRACE_PERIOD = 14 days;\n    uint public constant MINIMUM_DELAY = 2 days;\n    uint public constant MAXIMUM_DELAY = 30 days;\n\n    address public admin;\n    address public pendingAdmin;\n    uint public delay;\n    bool public admin_initialized;\n\n    mapping (bytes32 => bool) public queuedTransactions;\n\n\n    constructor(address admin_, uint delay_) public {\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::constructor: Delay must exceed minimum delay.\");\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::constructor: Delay must not exceed maximum delay.\");\n\n        admin = admin_;\n        delay = delay_;\n        admin_initialized = false;\n    }\n\n    receive() external payable { }\n\n    function setDelay(uint delay_) public {\n        require(msg.sender == address(this), \"Timelock::setDelay: Call must come from Timelock.\");\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\n        delay = delay_;\n\n        emit NewDelay(delay);\n    }\n\n    function acceptAdmin() public {\n        require(msg.sender == pendingAdmin, \"Timelock::acceptAdmin: Call must come from pendingAdmin.\");\n        admin = msg.sender;\n        pendingAdmin = address(0);\n\n        emit NewAdmin(admin);\n    }\n\n    function setPendingAdmin(address pendingAdmin_) public {\n        // allows one time setting of admin for deployment purposes\n        if (admin_initialized) {\n            require(msg.sender == address(this), \"Timelock::setPendingAdmin: Call must come from Timelock.\");\n        } else {\n            require(msg.sender == admin, \"Timelock::setPendingAdmin: First call must come from admin.\");\n            admin_initialized = true;\n        }\n        pendingAdmin = pendingAdmin_;\n\n        emit NewPendingAdmin(pendingAdmin);\n    }\n\n    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {\n        require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\n        require(eta >= getBlockTimestamp().add(delay), \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = true;\n\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\n        return txHash;\n    }\n\n    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {\n        require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = false;\n\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\n    }\n\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public payable returns (bytes memory) {\n        require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\n        require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \"Timelock::executeTransaction: Transaction is stale.\");\n\n        queuedTransactions[txHash] = false;\n\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n        }\n\n        // solium-disable-next-line security/no-call-value\n        (bool success, bytes memory returnData) = target.call.value(value)(callData);\n        require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\n\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\n\n        return returnData;\n    }\n\n    function getBlockTimestamp() internal view returns (uint) {\n        // solium-disable-next-line security/no-block-members\n        return block.timestamp;\n    }\n}"
    },
    "contracts/SimpleAuction.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n/*\ncontract SimpleAuction is Ownable {\n    using SafeMath for uint;\n\n    struct AuctionInfo {\n        address creator;\n        uint256 goal;\n        uint256 startTime;\n        uint256 endTime;\n    }\n\n    address[] public tokens;\n\n    mapping(address => uint256) public auctionIDs;\n    mapping(address => bool) public isActive;\n    mapping(address => AuctionInfo) public auctions;\n\n    function tokensLength() external view returns (uint) {\n        return tokens.length;\n    }\n\n    function intializeAuction(address _token, address _creator, uint256 _goal, uint256 _startTime, uint256 _endTime) public onlyOwner {\n        auctionIDs[_token] = tokens.length;\n        isActive[_token] = true;\n        auctions[_token] = new AuctionInfo(_creator, _goal, _startTime, _endTime);\n        tokens.push(_token);\n    }\n\n    function modifyAuction(bool _pause, address _token, address _creator, uint256 _goal, uint256 _startTime, uint256 _endTime) public onlyOwner {\n        isActive[_token] = !_pause;\n        AuctionInfo storage info = auctions[_token];\n        info = new AuctionInfo(_creator, _goal, _startTime, _endTime);\n    }\n}\n*/"
    },
    "contracts/interfaces/IUnicFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IUnicFarm {\n    //struct PoolInfo {\n        //IERC20 lpToken; // Address of LP token contract.\n        //uint256 allocPoint; // How many allocation points assigned to this pool. UNICs to distribute per block.\n        //uint256 lastRewardBlock; // Last block number that UNICs distribution occurs.\n        //uint256 accUnicPerShare; // Accumulated UNICs per share, times 1e12. See below.\n        //address uToken;\n    //}\n\n    function pendingUnic(uint256 _pid, address _user) external view returns (uint256);\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function poolInfo(uint256 _pid) external view returns (IERC20, uint256, uint256, uint256, address);\n\n    function poolLength() external view returns (uint256);\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n}\n"
    },
    "contracts/UnicSwap/MockRouter.sol": {
      "content": "pragma solidity = 0.6.12;\n\nimport './interfaces/IUnicSwapV2Router02.sol';\n\ncontract MockRouter is IUnicSwapV2Router02 {\n    address public immutable override factory;\n    address public immutable override WETH;\n\n    constructor(address _factory, address _WETH) public {\n        factory = _factory;\n        WETH = _WETH;\n    }\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external virtual override returns (uint amountA, uint amountB, uint liquidity) {\n        amountA = 0;\n        amountB = 0;\n        liquidity = 0;\n    }\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external virtual override payable returns (uint amountToken, uint amountETH, uint liquidity) {\n        amountToken = 0;\n        amountETH = 0;\n        liquidity = 0;\n    }\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) public virtual override returns (uint amountA, uint amountB) {\n        amountA = 0;\n        amountB = 0;\n    }\n\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) public virtual override returns (uint amountToken, uint amountETH) {\n        amountToken = 0;\n        amountETH = 0;\n    }\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external virtual override returns (uint amountA, uint amountB) {\n        amountA = 0;\n        amountB = 0;\n    }\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external virtual override returns (uint amountToken, uint amountETH) {\n        amountToken = 0;\n        amountETH = 0;\n    }\n\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) public virtual override returns (uint amountETH) {\n        amountETH = 0;\n    }\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external virtual override returns (uint amountETH) {\n        amountETH = 0;\n    }\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override returns (uint[] memory amounts) {\n        return amounts;\n    }\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override returns (uint[] memory amounts) {\n        return amounts;\n    }\n\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    virtual\n    override\n    payable\n    returns (uint[] memory amounts)\n    {\n        return amounts;\n    }\n\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    virtual\n    override\n    returns (uint[] memory amounts)\n    {\n        return amounts;\n    }\n\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    virtual\n    override\n    returns (uint[] memory amounts)\n    {\n        return amounts;\n    }\n\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    virtual\n    override\n    payable\n    returns (uint[] memory amounts)\n    {\n        return amounts;\n    }\n\n    function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {\n        amountB = 0;\n    }\n\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)\n    public\n    pure\n    virtual\n    override\n    returns (uint amountOut)\n    {\n        amountOut = 0;\n    }\n\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)\n    public\n    pure\n    virtual\n    override\n    returns (uint amountIn)\n    {\n        amountIn = 0;\n    }\n\n    function getAmountsOut(uint amountIn, address[] memory path)\n    public\n    view\n    virtual\n    override\n    returns (uint[] memory amounts)\n    {\n        return amounts;\n    }\n\n    function getAmountsIn(uint amountOut, address[] memory path)\n    public\n    view\n    virtual\n    override\n    returns (uint[] memory amounts)\n    {\n        return amounts;\n    }\n}\n"
    },
    "contracts/MockThirdPartyContract.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n// Test contract for proxy transactions\ncontract MockThirdPartyContract {\n\n    event Verified(bool verified);\n    event Payed(uint256 amount);\n\n    function verifyOwnership(address tokenContract, uint256 tokenId) public {\n        emit Verified(IERC721(tokenContract).ownerOf(tokenId) == msg.sender);\n    }\n\n    function pay() public payable {\n        emit Payed(msg.value);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}