{
  "address": "0x8373137DE3A421C8F3AD55D964Cf019fd28375A8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "uToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftIndexForUToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "BidCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "BidRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "ClaimedNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "auctionExtension",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctionIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctionInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "uToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftIndexForUToken",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctionStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionId",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bidRefunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bids",
      "outputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnAndRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDivisor",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_minBidMultiplier",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_auctionExtension",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_feeDivisor",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBidMultiplier",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftIndexForUToken",
          "type": "uint256"
        }
      ],
      "name": "newAuction",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "uToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftIndexForUToken",
          "type": "uint256"
        }
      ],
      "name": "onAuction",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_minBidMultiplier",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_auctionExtension",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_feeDivisor",
          "type": "uint8"
        }
      ],
      "name": "setAuctionParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionId",
          "type": "uint256"
        }
      ],
      "name": "unbid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0b3ace267e50186b498ae47ad36aff894aee2e16186d604be1d39e2bbf5f138d",
  "receipt": {
    "to": null,
    "from": "0x1e1a88bdEf16b1906b85c31c625baEf8EAabBA98",
    "contractAddress": "0x8373137DE3A421C8F3AD55D964Cf019fd28375A8",
    "transactionIndex": 25,
    "gasUsed": "2132765",
    "logsBloom": "0x
    "blockHash": "0xa63f1fdfaf4cfefc1365282cdc02e0bcf845cbcfdeb474f78d1841405357b985",
    "transactionHash": "0x0b3ace267e50186b498ae47ad36aff894aee2e16186d604be1d39e2bbf5f138d",
    "logs": [],
    "blockNumber": 10306705,
    "cumulativeGasUsed": "14030065",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ad24d1ed3bf060a5361c51d754aec405",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"uToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftIndexForUToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"BidCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"BidRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"ClaimedNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auctionExtension\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftIndexForUToken\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bidRefunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnAndRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDivisor\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_minBidMultiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_auctionExtension\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_feeDivisor\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidMultiplier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftIndexForUToken\",\"type\":\"uint256\"}],\"name\":\"newAuction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftIndexForUToken\",\"type\":\"uint256\"}],\"name\":\"onAuction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_minBidMultiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_auctionExtension\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_feeDivisor\",\"type\":\"uint8\"}],\"name\":\"setAuctionParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"unbid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuctionHandler.sol\":\"AuctionHandler\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/ERC165CheckerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165CheckerUpgradeable {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) &&\\n            _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        // success determines whether the staticcall succeeded and result determines\\n        // whether the contract at account indicates support of _interfaceId\\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\\n\\n        return (success && result);\\n    }\\n\\n    /**\\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return success true if the STATICCALL succeeded, false otherwise\\n     * @return result true if the STATICCALL succeeded and the contract at account\\n     * indicates support of the interface with identifier interfaceId, false otherwise\\n     */\\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\\n        private\\n        view\\n        returns (bool, bool)\\n    {\\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\\n        if (result.length < 32) return (false, false);\\n        return (success, abi.decode(result, (bool)));\\n    }\\n}\\n\",\"keccak256\":\"0x0a6e54697511dffc43eaf2490fa35437ed69f70ccf529568252204035f1e513c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc6dbbc2f50a7c104377798a37b2acd1a41c1242544b0bb7a9a7c863f0520eb50\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal initializer {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal initializer {\\n        _registerInterface(\\n            ERC1155ReceiverUpgradeable(address(0)).onERC1155Received.selector ^\\n            ERC1155ReceiverUpgradeable(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x119682df753fda361ec986768dd3586b2efa8399152fa35e979758f13d20533f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0x68a2498b459518376db0497bce2344169497020cd95db90d76f8312e02c40ba0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xcbc02d192c55298cf65e5695375c839eac979a597a0fbdc1635195c4d28ca5ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./ERC20Upgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC20Burnable_init_unchained();\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal initializer {\\n    }\\n    using SafeMathUpgradeable for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd0359e87fe2618573f49a95e13d9dbc31521ad64526b135618abb2a2dc362fbe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x506dd0718f9ace50588c13848167df5e04ae16abb56341afb10c31ff149bc79b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x3dab19bb4a63bcbda1ee153ca291694f92f9009fad28626126b15a8503b0e5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"contracts/AuctionHandler.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport './interfaces/IUnicFactory.sol';\\nimport './Converter.sol';\\n\\ncontract AuctionHandler is Initializable, OwnableUpgradeable {\\n    using SafeMathUpgradeable for uint;\\n\\n    struct AuctionInfo {\\n        uint startTime;\\n        uint endTime;\\n        address uToken;\\n        uint256 nftIndexForUToken;\\n        bool claimed;\\n    }\\n\\n    struct Bid {\\n    \\taddress bidder;\\n    \\tuint256 amount;\\n    }\\n\\n    // Info of each pool.\\n    AuctionInfo[] public auctionInfo;\\n\\n    // Auction index to bid\\n    mapping(uint256 => Bid) public bids;\\n    // Auction index to user address to amount\\n    mapping(uint256 => mapping(address => uint256)) public bidRefunds;\\n    // uToken address to NFT index to auction index\\n    mapping(address => mapping(uint256 => uint256)) public auctionIndex;\\n    // uToken address to NFT index to bool\\n    mapping(address => mapping(uint256 => bool)) public auctionStarted;\\n    // uToken address to vault balances\\n    mapping(address => uint256) public vaultBalances;\\n\\n    address public factory;\\n    // 3 days\\n    uint public duration;\\n    // 105\\n    uint8 public minBidMultiplier;\\n    // 5 minutes?\\n    uint public auctionExtension;\\n    // 100 (1%)\\n    uint8 public feeDivisor;\\n\\n    address public feeToSetter;\\n    address public feeTo;\\n\\n    event AuctionCreated(uint256 indexed auctionId, address indexed uToken, uint256 nftIndexForUToken, uint startTime, uint indexed endTime);\\n    event BidCreated(uint256 indexed auctionId, address indexed bidder, uint256 amount, uint indexed endTime);\\n    event BidRemoved(uint256 indexed auctionId, address indexed bidder);\\n    event ClaimedNFT(uint256 indexed auctionId, address indexed winner);\\n\\n    function initialize(\\n        address _factory,\\n        uint _duration,\\n        uint8 _minBidMultiplier,\\n        uint _auctionExtension,\\n        uint8 _feeDivisor,\\n        address _feeToSetter,\\n        address _feeTo\\n    ) public initializer {\\n        __Ownable_init();\\n        factory = _factory;\\n        duration = _duration;\\n        minBidMultiplier = _minBidMultiplier;\\n        auctionExtension = _auctionExtension;\\n        feeDivisor = _feeDivisor;\\n        feeToSetter = _feeToSetter;\\n        feeTo = _feeTo;\\n    }\\n\\n    function auctionLength() external view returns (uint256) {\\n        return auctionInfo.length;\\n    }\\n\\n    function newAuction(address _uToken, uint256 _nftIndexForUToken) public payable {\\n        require(IUnicFactory(factory).getUToken(_uToken) != 0 || IUnicFactory(factory).uTokens(0) == _uToken,\\n            \\\"AuctionHandler: uToken contract must be valid\\\");\\n        require(Converter(_uToken).active(), \\\"AuctionHandler: Can not bid on inactive uToken\\\");\\n        (address contractAddr, , , uint256 triggerPrice) = Converter(_uToken).nfts(_nftIndexForUToken);\\n        // Check that nft index exists on vault contract\\n        require(contractAddr != address(0), \\\"AuctionHandler: NFT index must exist\\\");\\n        // Check that bid meets reserve price\\n        require(triggerPrice <= msg.value, \\\"AuctionHandler: Starting bid must be higher than trigger price\\\");\\n        require(!auctionStarted[_uToken][_nftIndexForUToken], \\\"AuctionHandler: NFT already on auction\\\");\\n        auctionStarted[_uToken][_nftIndexForUToken] = true;\\n\\n        uint256 currentIndex = auctionInfo.length;\\n        uint auctionEndTime = getBlockTimestamp().add(duration);\\n\\n        auctionInfo.push(\\n            AuctionInfo({\\n                startTime: getBlockTimestamp(),\\n                endTime: auctionEndTime,\\n                uToken: _uToken,\\n                nftIndexForUToken: _nftIndexForUToken,\\n                claimed: false\\n            })\\n        );\\n\\n        auctionIndex[_uToken][_nftIndexForUToken] = currentIndex;\\n        uint256 fee = msg.value.div(feeDivisor);\\n        vaultBalances[_uToken] = vaultBalances[_uToken].add(msg.value.sub(fee));\\n        bids[currentIndex] = Bid(msg.sender, msg.value);\\n        sendFee(fee);\\n\\n        emit AuctionCreated(currentIndex, _uToken, _nftIndexForUToken, getBlockTimestamp(), auctionEndTime);\\n        emit BidCreated(currentIndex, msg.sender, msg.value, auctionEndTime);\\n    }\\n\\n    function bid(uint256 _auctionId) public payable {\\n        AuctionInfo storage thisAuction = auctionInfo[_auctionId];\\n        require(getBlockTimestamp() < thisAuction.endTime, \\\"AuctionHandler: Auction for NFT ended\\\");\\n        require(Converter(thisAuction.uToken).active(), \\\"AuctionHandler: Can not bid on inactive uToken\\\");\\n\\n        Bid storage topBid = bids[_auctionId];\\n        require(topBid.bidder != msg.sender, \\\"AuctionHandler: You have an active bid\\\");\\n        require(topBid.amount.mul(minBidMultiplier) <= msg.value.mul(100), \\\"AuctionHandler: Bid too low\\\");\\n        require(bidRefunds[_auctionId][msg.sender] == 0, \\\"AuctionHandler: Collect bid refund first\\\");\\n\\n        // Case where new top bid occurs near end time\\n        // In this case we add an extension to the auction\\n        if(getBlockTimestamp() > thisAuction.endTime.sub(auctionExtension)) {\\n            thisAuction.endTime = thisAuction.endTime.add(auctionExtension);\\n        }\\n\\n        bidRefunds[_auctionId][topBid.bidder] = topBid.amount;\\n        uint256 fee = (msg.value.sub(topBid.amount)).div(feeDivisor);\\n        vaultBalances[thisAuction.uToken] = vaultBalances[thisAuction.uToken].add(msg.value).sub(topBid.amount).sub(fee);\\n\\n        topBid.bidder = msg.sender;\\n        topBid.amount = msg.value;\\n\\n        sendFee(fee);\\n\\n        emit BidCreated(_auctionId, msg.sender, msg.value, thisAuction.endTime);\\n    }\\n\\n    function unbid(uint256 _auctionId) public {\\n        Bid memory topBid = bids[_auctionId];\\n        require(topBid.bidder != msg.sender, \\\"AuctionHandler: Top bidder can not unbid\\\");\\n\\n        uint256 refundAmount = bidRefunds[_auctionId][msg.sender];\\n        require(refundAmount > 0, \\\"AuctionHandler: No bid found\\\");\\n        bidRefunds[_auctionId][msg.sender] = 0;\\n        (bool sent, bytes memory data) = msg.sender.call{value: refundAmount}(\\\"\\\");\\n        require(sent, \\\"AuctionHandler: Failed to send Ether\\\");\\n\\n        emit BidRemoved(_auctionId, msg.sender);\\n    }\\n\\n    // Claim NFT if address is winning bidder\\n    function claim(uint256 _auctionId) public {\\n        AuctionInfo storage thisAuction = auctionInfo[_auctionId];\\n        require(getBlockTimestamp() > thisAuction.endTime, \\\"AuctionHandler: Auction is not over\\\");\\n        require(!thisAuction.claimed, \\\"AuctionHandler: Already claimed\\\");\\n        Bid memory topBid = bids[_auctionId];\\n        require(msg.sender == topBid.bidder, \\\"AuctionHandler: Only winner can claim\\\");\\n\\n        thisAuction.claimed = true;\\n\\n        require(Converter(thisAuction.uToken).claimNFT(thisAuction.nftIndexForUToken, topBid.bidder), \\\"AuctionHandler: Claim failed\\\");\\n\\n        emit ClaimedNFT(_auctionId, topBid.bidder);\\n    }\\n\\n    function burnAndRedeem(address _uToken, uint256 _amount) public {\\n        require(vaultBalances[_uToken] > 0, \\\"AuctionHandler: No vault balance to redeem from\\\");\\n\\n        uint256 redeemAmount = _amount.mul(vaultBalances[_uToken]).div(IERC20Upgradeable(_uToken).totalSupply());\\n        Converter(_uToken).burnFrom(msg.sender, _amount);\\n        vaultBalances[_uToken] = vaultBalances[_uToken].sub(redeemAmount);\\n\\n        // Redeem ETH corresponding to uToken amount\\n        (bool sent, bytes memory data) = msg.sender.call{value: redeemAmount}(\\\"\\\");\\n        require(sent, \\\"AuctionHandler: Failed to send Ether\\\");\\n    }\\n\\n    // This function is for fee-taking\\n    function sendFee(uint256 _fees) internal {\\n        // Send fee to feeTo address\\n        (bool sent, bytes memory data) = feeTo.call{value: _fees}(\\\"\\\");\\n        require(sent, \\\"AuctionHandler: Failed to send Ether\\\");\\n    }\\n\\n    function setFactory(address _factory) public onlyOwner {\\n        factory = _factory;\\n    }\\n\\n    function setAuctionParameters(uint _duration, uint8 _minBidMultiplier, uint _auctionExtension, uint8 _feeDivisor) public onlyOwner {\\n        require(_duration > 0 && _minBidMultiplier > 100 && _auctionExtension > 0 && _feeDivisor > 0, \\\"AuctionHandler: Invalid parameters\\\");\\n        duration = _duration;\\n        minBidMultiplier = _minBidMultiplier;\\n        auctionExtension = _auctionExtension;\\n        feeDivisor = _feeDivisor;\\n    }\\n\\n    function setFeeTo(address _feeTo) public {\\n        require(msg.sender == feeToSetter, \\\"AuctionHandler: Not feeToSetter\\\");\\n        require(_feeTo != address(0), \\\"AuctionHandler: Fee address cannot be zero address\\\");\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) public {\\n        require(msg.sender == feeToSetter, \\\"AuctionHandler: Not feeToSetter\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function getBlockTimestamp() internal view returns (uint) {\\n        // solium-disable-next-line security/no-block-members\\n        return block.timestamp;\\n    }\\n\\n    function onAuction(address uToken, uint256 nftIndexForUToken) external view returns (bool) {\\n        return auctionStarted[uToken][nftIndexForUToken];\\n    }\\n}\\n\",\"keccak256\":\"0x15a891e19e0b7b5b5222d3699510b727755a0d359c901a7375e4949cf690d6ad\"},\"contracts/Converter.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/ERC165CheckerUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"./interfaces/IUnicFactory.sol\\\";\\nimport \\\"./interfaces/IProxyTransaction.sol\\\";\\nimport \\\"./interfaces/IGetAuctionInfo.sol\\\";\\nimport \\\"./interfaces/IConverter.sol\\\";\\nimport \\\"./abstract/ERC20VotesUpgradeable.sol\\\";\\n\\ncontract Converter is IConverter, IProxyTransaction, Initializable, ERC1155ReceiverUpgradeable, ERC20VotesUpgradeable, OwnableUpgradeable {\\n    using SafeMathUpgradeable for uint;\\n\\n    // List of NFTs that have been deposited\\n    struct NFT {\\n    \\taddress contractAddr;\\n    \\tuint256 tokenId;\\n        uint256 amount;\\n        uint256 triggerPrice;\\n    }\\n\\n    mapping(uint256 => NFT) public nfts;\\n    // Current index and length of nfts\\n    uint256 public currentNFTIndex = 0;\\n    // If active, NFTs can\\u2019t be withdrawn\\n    bool public active = false;\\n    address public issuer;\\n    uint256 public cap;\\n    address public converterTimeLock;\\n\\n    IUnicFactory public factory;\\n\\n    event Deposited(uint256[] tokenIDs, uint256[] amounts, uint256[] triggerPrices, address indexed contractAddr);\\n    event Refunded();\\n    event Issued();\\n    event PriceUpdate(uint256[] indexed nftIndex, uint[] price);\\n\\n    bytes private constant VALIDATOR = bytes('JCMY');\\n\\n    function initialize (\\n        string memory name,\\n        string memory symbol,\\n        address _issuer,\\n        address _factory\\n    )\\n        public\\n        initializer\\n        returns (bool)\\n    {\\n        __Ownable_init();\\n        __ERC20_init(name, symbol);\\n        issuer = _issuer;\\n        factory = IUnicFactory(_factory);\\n        cap = factory.uTokenSupply();\\n        return true;\\n    }\\n\\n    function burn(address _account, uint256 _amount) public {\\n        require(msg.sender == factory.auctionHandler(), \\\"Converter: Only auction handler can burn\\\");\\n        super._burn(_account, _amount);\\n    }\\n\\n    function setCurator(address _issuer) external {\\n        require(active, \\\"Converter: Tokens have not been issued yet\\\");\\n        require(msg.sender == factory.vaultManager() || msg.sender == issuer, \\\"Converter: Not vault manager or issuer\\\");\\n\\n        issuer = _issuer;\\n    }\\n\\n    function setTriggers(uint256[] calldata _nftIndex, uint256[] calldata _triggerPrices) external {\\n        require(msg.sender == issuer, \\\"Converter: Only issuer can set trigger prices\\\");\\n        require(_nftIndex.length <= 50, \\\"Converter: A maximum of 50 trigger prices can be set at once\\\");\\n        for (uint8 i = 0; i < 50; i++) {\\n            if (_nftIndex.length == i){\\n                break;\\n            }\\n\\n            require(!IGetAuctionInfo(factory.auctionHandler()).onAuction(address(this), _nftIndex[i]), \\\"Converter: Already on auction\\\");\\n            nfts[_nftIndex[i]].triggerPrice = _triggerPrices[i];\\n        }\\n\\n        emit PriceUpdate(_nftIndex, _triggerPrices);\\n    }\\n\\n    function setConverterTimeLock(address _converterTimeLock) public override {\\n        require(msg.sender == address(factory), \\\"Converter: Only factory can set converterTimeLock\\\");\\n        converterTimeLock = _converterTimeLock;\\n    }\\n\\n    // deposits an nft using the transferFrom action of the NFT contractAddr\\n    function deposit(uint256[] calldata tokenIDs, uint256[] calldata amounts, uint256[] calldata triggerPrices, address contractAddr) external {\\n        require(msg.sender == issuer, \\\"Converter: Only issuer can deposit\\\");\\n        require(tokenIDs.length <= 50, \\\"Converter: A maximum of 50 tokens can be deposited in one go\\\");\\n        require(tokenIDs.length > 0, \\\"Converter: You must specify at least one token ID\\\");\\n\\n        if (ERC165CheckerUpgradeable.supportsInterface(contractAddr, 0xd9b67a26)){\\n            IERC1155Upgradeable(contractAddr).safeBatchTransferFrom(msg.sender, address(this), tokenIDs, amounts, VALIDATOR);\\n\\n            for (uint8 i = 0; i < 50; i++){\\n                if (tokenIDs.length == i){\\n                    break;\\n                }\\n                nfts[currentNFTIndex++] = NFT(contractAddr, tokenIDs[i], amounts[i], triggerPrices[i]);\\n            }\\n        }\\n        else {\\n            for (uint8 i = 0; i < 50; i++){\\n                if (tokenIDs.length == i){\\n                    break;\\n                }\\n                IERC721Upgradeable(contractAddr).transferFrom(msg.sender, address(this), tokenIDs[i]);\\n                nfts[currentNFTIndex++] = NFT(contractAddr, tokenIDs[i], 1, triggerPrices[i]);\\n            }\\n        }\\n\\n        emit Deposited(tokenIDs, amounts, triggerPrices, contractAddr);\\n    }\\n\\n    // Function that locks NFT collateral and issues the uTokens to the issuer\\n    function issue() external {\\n        require(msg.sender == issuer, \\\"Converter: Only issuer can issue the tokens\\\");\\n        require(active == false, \\\"Converter: Token is already active\\\");\\n\\n        active = true;\\n        address feeTo = factory.feeTo();\\n        uint256 feeAmount = 0;\\n        if (feeTo != address(0)) {\\n            feeAmount = cap.div(factory.feeDivisor());\\n            _mint(feeTo, feeAmount);\\n        }\\n\\n        uint256 amount = cap - feeAmount;\\n        _mint(issuer, amount);\\n\\n        emit Issued();\\n    }\\n\\n    // Function that allows NFTs to be refunded (prior to issue being called)\\n    function refund(address _to) external {\\n        require(!active, \\\"Converter: Contract is already active - cannot refund\\\");\\n        require(msg.sender == issuer, \\\"Converter: Only issuer can refund\\\");\\n\\n        // Only transfer maximum of 50 at a time to limit gas per call\\n        uint8 _i = 0;\\n        uint256 _index = currentNFTIndex;\\n        bytes memory data;\\n\\n        while (_index > 0 && _i < 50){\\n            NFT memory nft = nfts[_index - 1];\\n\\n            if (ERC165CheckerUpgradeable.supportsInterface(nft.contractAddr, 0xd9b67a26)){\\n                IERC1155Upgradeable(nft.contractAddr).safeTransferFrom(address(this), _to, nft.tokenId, nft.amount, data);\\n            }\\n            else {\\n                IERC721Upgradeable(nft.contractAddr).safeTransferFrom(address(this), _to, nft.tokenId);\\n            }\\n\\n            delete nfts[_index - 1];\\n\\n            _index--;\\n            _i++;\\n        }\\n\\n        currentNFTIndex = _index;\\n\\n        emit Refunded();\\n    }\\n\\n    function claimNFT(uint256 _nftIndex, address _to) external returns (bool) {\\n        require(msg.sender == factory.auctionHandler(), \\\"Converter: Not auction handler\\\");\\n\\n        if (ERC165CheckerUpgradeable.supportsInterface(nfts[_nftIndex].contractAddr, 0xd9b67a26)){\\n            bytes memory data;\\n            IERC1155Upgradeable(nfts[_nftIndex].contractAddr).safeTransferFrom(address(this), _to, nfts[_nftIndex].tokenId, nfts[_nftIndex].amount, data);\\n        }\\n        else {\\n            IERC721Upgradeable(nfts[_nftIndex].contractAddr).safeTransferFrom(address(this), _to, nfts[_nftIndex].tokenId);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * ERC1155 Token ERC1155Receiver\\n     */\\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) override external returns(bytes4) {\\n        if(keccak256(_data) == keccak256(VALIDATOR)){\\n            return 0xf23a6e61;\\n        }\\n    }\\n\\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) override external returns(bytes4) {\\n        if(keccak256(_data) == keccak256(VALIDATOR)){\\n            return 0xbc197c81;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n        // Move voting rights\\n        _moveDelegates(_delegates[from], _delegates[to], amount);\\n    }\\n\\n    /**\\n     * @dev implements the proxy transaction used by {ConverterTimeLock-executeTransaction}\\n     */\\n    function forwardCall(address target, uint256 value, bytes calldata callData) external override payable returns (bool success, bytes memory returnData) {\\n        require(msg.sender == converterTimeLock, \\\"Converter: Caller is not the converterTimeLock contract\\\");\\n        return target.call{value: value}(callData);\\n    }\\n\\n    function getBlockTimestamp() internal view returns (uint) {\\n        // solium-disable-next-line security/no-block-members\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xa7e73336d0cc06ceac815279f506aa81f554f21c924eec035034d3ee9d748134\"},\"contracts/abstract/ERC20VotesUpgradeable.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\n/**\\n * Expand the ERC20Burnable contract to include a governance voting feature.\\n */\\nabstract contract ERC20VotesUpgradeable is ERC20BurnableUpgradeable  {\\n    using SafeMathUpgradeable for uint256;\\n\\n    // Copied and modified from YAM code:\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\n    // Which is copied and modified from COMPOUND:\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\n\\n    /// @dev A record of each accounts delegate\\n    mapping (address => address) internal _delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegator The address to get delegatee for\\n     */\\n    function delegates(address delegator)\\n    external\\n    view\\n    returns (address)\\n    {\\n        return _delegates[delegator];\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint nonce,\\n        uint expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n    external\\n    {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name())),\\n                getChainId(),\\n                address(this)\\n            )\\n        );\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                DELEGATION_TYPEHASH,\\n                delegatee,\\n                nonce,\\n                expiry\\n            )\\n        );\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                structHash\\n            )\\n        );\\n\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"UNIC::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"UNIC::delegateBySig: invalid nonce\\\");\\n        require(now <= expiry, \\\"UNIC::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account)\\n    external\\n    view\\n    returns (uint256)\\n    {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber)\\n    external\\n    view\\n    returns (uint256)\\n    {\\n        require(blockNumber < block.number, \\\"UNIC::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee)\\n    internal\\n    {\\n        address currentDelegate = _delegates[delegator];\\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying UNICs (not scaled);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                // decrease old representative\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                // increase new representative\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint256 oldVotes,\\n        uint256 newVotes\\n    )\\n    internal\\n    {\\n        uint32 blockNumber = safe32(block.number, \\\"UNIC::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0xabe997bd230edff60368a4ab279b396a1dd69e92391e5ee43c43cb0733e2ff00\"},\"contracts/interfaces/IConverter.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\ninterface IConverter {\\n    function setConverterTimeLock(address _converterTimeLock) external;\\n}\\n\",\"keccak256\":\"0x9e9257d5b708026f1691bee9585e88d34c7112a111d5f1aa4c10fd15296c5ed9\"},\"contracts/interfaces/IGetAuctionInfo.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\ninterface IGetAuctionInfo {\\n    function onAuction(address uToken, uint nftIndexForUToken) external view returns (bool);\\n}\",\"keccak256\":\"0x64ab58f779399f7c11a4a20d5af9b679faeee6c17c969902f927460a91f3f536\"},\"contracts/interfaces/IProxyTransaction.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IProxyTransaction {\\n    function forwardCall(address target, uint256 value, bytes calldata callData) external payable returns (bool success, bytes memory returnData);\\n}\\n\",\"keccak256\":\"0xfefa148d9ae17eef1bb6e309346ffd6923ffbb591563721ff291859d039d8d3e\"},\"contracts/interfaces/IUnicFactory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUnicFactory {\\n    event TokenCreated(address indexed caller, address indexed uToken);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function converterImplementation() external view returns (address);\\n\\n    function getUToken(address uToken) external view returns (uint);\\n    function uTokens(uint) external view returns (address);\\n    function uTokensLength() external view returns (uint);\\n    function getGovernorAlpha(address uToken) external view returns (address);\\n    function feeDivisor() external view returns (uint);\\n    function auctionHandler() external view returns (address);\\n    function vaultManager() external view returns (address);\\n    function uTokenSupply() external view returns (uint);\\n\\n    function createUToken(\\n        string calldata name,\\n        string calldata symbol,\\n        address proxyTransactionFactory,\\n        bool enableProxyTransactions\\n    ) external returns (address, address);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setConverterImplementation(address) external;\\n    function setFeeDivisor(uint) external;\\n    function setAuctionHandler(address) external;\\n    function setVaultManager(address) external;\\n    function setSupply(uint) external;\\n}\\n\",\"keccak256\":\"0x74210d99923da4129e2c311a6e9c3833c9e59697b6a307cd7758ba6a95a9e6c8\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506125a2806100206000396000f3fe6080604052600436106101b75760003560e01c8063715018a6116100ec578063afb3e63e1161008a578063eba39dab11610064578063eba39dab1461061a578063efe114cf14610653578063f2fde38b1461068c578063f46901ed146106bf576101b7565b8063afb3e63e146105bd578063bceb4bdb146105f0578063c45a015514610605576101b7565b8063957a867c116100c6578063957a867c146104b45780639a36f932146105135780639dd886cf14610528578063a2e74af61461058a576101b7565b8063715018a6146104515780638da5cb5b14610466578063920605f51461047b576101b7565b80632788aeb211610159578063379607f511610133578063379607f51461038a5780634423c5f1146103b4578063454a2ab3146104015780635bb478081461041e576101b7565b80632788aeb2146102f9578063325c25a21461033257806334db264b14610347576101b7565b80630e4cfe97116101955780630e4cfe97146102305780630f9e39bf1461025a5780630fb5a6b4146102855780631e6871a9146102ac576101b7565b8063017e7e58146101bc57806302923878146101ed578063094b74151461021b575b600080fd5b3480156101c857600080fd5b506101d16106f2565b604080516001600160a01b039092168252519081900360200190f35b6102196004803603604081101561020357600080fd5b506001600160a01b038135169060200135610701565b005b34801561022757600080fd5b506101d1610cb2565b34801561023c57600080fd5b506102196004803603602081101561025357600080fd5b5035610cc6565b34801561026657600080fd5b5061026f610e84565b6040805160ff9092168252519081900360200190f35b34801561029157600080fd5b5061029a610e8d565b60408051918252519081900360200190f35b3480156102b857600080fd5b506102e5600480360360408110156102cf57600080fd5b506001600160a01b038135169060200135610e93565b604080519115158252519081900360200190f35b34801561030557600080fd5b5061029a6004803603604081101561031c57600080fd5b50803590602001356001600160a01b0316610eb3565b34801561033e57600080fd5b5061029a610ed0565b34801561035357600080fd5b506102196004803603608081101561036a57600080fd5b5080359060ff602082013581169160408101359160609091013516610ed6565b34801561039657600080fd5b50610219600480360360208110156103ad57600080fd5b5035610fe1565b3480156103c057600080fd5b506103de600480360360208110156103d757600080fd5b503561125f565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6102196004803603602081101561041757600080fd5b5035611284565b34801561042a57600080fd5b506102196004803603602081101561044157600080fd5b50356001600160a01b03166115fc565b34801561045d57600080fd5b50610219611692565b34801561047257600080fd5b506101d1611750565b34801561048757600080fd5b506102e56004803603604081101561049e57600080fd5b506001600160a01b03813516906020013561175f565b3480156104c057600080fd5b506104de600480360360208110156104d757600080fd5b503561178d565b6040805195865260208601949094526001600160a01b0390921684840152606084015215156080830152519081900360a00190f35b34801561051f57600080fd5b5061026f6117d8565b34801561053457600080fd5b50610219600480360360e081101561054b57600080fd5b506001600160a01b03813581169160208101359160ff604083013581169260608101359260808201359092169160a082013581169160c00135166117e1565b34801561059657600080fd5b50610219600480360360208110156105ad57600080fd5b50356001600160a01b0316611910565b3480156105c957600080fd5b5061029a600480360360208110156105e057600080fd5b50356001600160a01b03166119a9565b3480156105fc57600080fd5b5061029a6119bb565b34801561061157600080fd5b506101d16119c1565b34801561062657600080fd5b5061029a6004803603604081101561063d57600080fd5b506001600160a01b0381351690602001356119d0565b34801561065f57600080fd5b506102196004803603604081101561067657600080fd5b506001600160a01b0381351690602001356119ed565b34801561069857600080fd5b50610219600480360360208110156106af57600080fd5b50356001600160a01b0316611c0e565b3480156106cb57600080fd5b50610219600480360360208110156106e257600080fd5b50356001600160a01b0316611d23565b6070546001600160a01b031681565b606b54604080517f25b26df60000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152915191909216916325b26df6916024808301926020929190829003018186803b15801561076757600080fd5b505afa15801561077b573d6000803e3d6000fd5b505050506040513d602081101561079157600080fd5b50511515806108385750606b54604080517f3c402de90000000000000000000000000000000000000000000000000000000081526000600482015290516001600160a01b03808616931691633c402de9916024808301926020929190829003018186803b15801561080157600080fd5b505afa158015610815573d6000803e3d6000fd5b505050506040513d602081101561082b57600080fd5b50516001600160a01b0316145b6108735760405162461bcd60e51b815260040180806020018281038252602d8152602001806122b0602d913960400191505060405180910390fd5b816001600160a01b03166302fb0c5e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ac57600080fd5b505afa1580156108c0573d6000803e3d6000fd5b505050506040513d60208110156108d657600080fd5b50516109135760405162461bcd60e51b815260040180806020018281038252602e8152602001806124cc602e913960400191505060405180910390fd5b600080836001600160a01b031663265aa621846040518263ffffffff1660e01b81526004018082815260200191505060806040518083038186803b15801561095a57600080fd5b505afa15801561096e573d6000803e3d6000fd5b505050506040513d608081101561098457600080fd5b50805160609091015190925090506001600160a01b0382166109d75760405162461bcd60e51b81526004018080602001828103825260248152602001806123706024913960400191505060405180910390fd5b34811115610a165760405162461bcd60e51b815260040180806020018281038252603e81526020018061243b603e913960400191505060405180910390fd5b6001600160a01b038416600090815260696020908152604080832086845290915290205460ff1615610a795760405162461bcd60e51b81526004018080602001828103825260268152602001806125476026913960400191505060405180910390fd5b6001600160a01b03841660009081526069602090815260408083208684529091528120805460ff19166001179055606554606c54909190610ac290610abc611dee565b90611df2565b905060656040518060a00160405280610ad9611dee565b815260208082018590526001600160a01b038a8116604080850182905260608086018d905260006080968701819052885460018082018b55998252868220895160059092020190815588870151998101999099558783015160028a0180546001600160a01b0319169190961617909455860151600388015594909301516004909501805460ff1916951515959095179094559083526068815281832088845290528120839055606f54610b9090349060ff16611e53565b9050610bbe610b9f3483611eba565b6001600160a01b0389166000908152606a602052604090205490611df2565b6001600160a01b038881166000908152606a60209081526040808320949094558351808501855233815234818301908152888452606690925293909120925183546001600160a01b031916921691909117825551600190910155610c2181611f17565b81876001600160a01b0316847f05f9bf100dd0ca9f37f08e0526690286d357ed7d6c5a4ac29730440b6e2dfd6289610c57611dee565b6040805192835260208301919091528051918290030190a46040805134815290518391339186917f77689ebf788c0f9d9e045fa81e22903cc7a1e34686c3fa4874c9a6a4d8a239f5919081900360200190a450505050505050565b606f5461010090046001600160a01b031681565b610cce612273565b50600081815260666020908152604091829020825180840190935280546001600160a01b031680845260019091015491830191909152331415610d425760405162461bcd60e51b81526004018080602001828103825260288152602001806124fa6028913960400191505060405180910390fd5b600082815260676020908152604080832033845290915290205480610dae576040805162461bcd60e51b815260206004820152601c60248201527f41756374696f6e48616e646c65723a204e6f2062696420666f756e6400000000604482015290519081900360640190fd5b6000838152606760209081526040808320338085529252808320839055516060919084908481818185875af1925050503d8060008114610e0a576040519150601f19603f3d011682016040523d82523d6000602084013e610e0f565b606091505b509150915081610e505760405162461bcd60e51b81526004018080602001828103825260248152602001806122dd6024913960400191505060405180910390fd5b604051339086907ffb280d892235c44edc6a8f273938a4f3ad3b134cc20ff8b50d5ee2e13a1d27a290600090a35050505050565b606d5460ff1681565b606c5481565b606960209081526000928352604080842090915290825290205460ff1681565b606760209081526000928352604080842090915290825290205481565b60655490565b610ede611fb4565b6001600160a01b0316610eef611750565b6001600160a01b031614610f4a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600084118015610f5d575060648360ff16115b8015610f695750600082115b8015610f78575060008160ff16115b610fb35760405162461bcd60e51b81526004018080602001828103825260228152602001806123ea6022913960400191505060405180910390fd5b606c93909355606d805460ff93841660ff1991821617909155606e91909155606f8054929093169116179055565b600060658281548110610ff057fe5b90600052602060002090600502019050806001015461100d611dee565b116110495760405162461bcd60e51b81526004018080602001828103825260238152602001806123276023913960400191505060405180910390fd5b600481015460ff16156110a3576040805162461bcd60e51b815260206004820152601f60248201527f41756374696f6e48616e646c65723a20416c726561647920636c61696d656400604482015290519081900360640190fd5b6110ab612273565b50600082815260666020908152604091829020825180840190935280546001600160a01b031680845260019091015491830191909152331461111e5760405162461bcd60e51b815260040180806020018281038252602581526020018061228b6025913960400191505060405180910390fd5b6004808301805460ff19166001179055600283015460038401548351604080517f62432b58000000000000000000000000000000000000000000000000000000008152948501929092526001600160a01b03908116602485015290519116916362432b589160448083019260209291908290030181600087803b1580156111a457600080fd5b505af11580156111b8573d6000803e3d6000fd5b505050506040513d60208110156111ce57600080fd5b5051611221576040805162461bcd60e51b815260206004820152601c60248201527f41756374696f6e48616e646c65723a20436c61696d206661696c656400000000604482015290519081900360640190fd5b80516040516001600160a01b039091169084907f6c31918c2dabe0275b23bef69f1a9e93053553a1e9fc048dde2389137628a8dd90600090a3505050565b606660205260009081526040902080546001909101546001600160a01b039091169082565b60006065828154811061129357fe5b9060005260206000209060050201905080600101546112b0611dee565b106112ec5760405162461bcd60e51b81526004018080602001828103825260258152602001806125226025913960400191505060405180910390fd5b8060020160009054906101000a90046001600160a01b03166001600160a01b03166302fb0c5e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561133c57600080fd5b505afa158015611350573d6000803e3d6000fd5b505050506040513d602081101561136657600080fd5b50516113a35760405162461bcd60e51b815260040180806020018281038252602e8152602001806124cc602e913960400191505060405180910390fd5b600082815260666020526040902080546001600160a01b03163314156113fa5760405162461bcd60e51b815260040180806020018281038252602681526020018061234a6026913960400191505060405180910390fd5b611405346064611fb8565b606d5460018301546114199160ff16611fb8565b111561146c576040805162461bcd60e51b815260206004820152601b60248201527f41756374696f6e48616e646c65723a2042696420746f6f206c6f770000000000604482015290519081900360640190fd5b6000838152606760209081526040808320338452909152902054156114c25760405162461bcd60e51b81526004018080602001828103825260288152602001806123946028913960400191505060405180910390fd5b606e5460018301546114d391611eba565b6114db611dee565b11156114f857606e5460018301546114f291611df2565b60018301555b6001810154600084815260676020908152604080832085546001600160a01b031684529091528120829055606f5490916115419160ff169061153b903490611eba565b90611e53565b600183015460028501546001600160a01b03166000908152606a602052604090205491925061157e91839161157891829034611df2565b90611eba565b60028401546001600160a01b03166000908152606a602052604090205581546001600160a01b031916331782553460018301556115ba81611f17565b6001830154604080513481529051339187917f77689ebf788c0f9d9e045fa81e22903cc7a1e34686c3fa4874c9a6a4d8a239f59181900360200190a450505050565b611604611fb4565b6001600160a01b0316611615611750565b6001600160a01b031614611670576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606b80546001600160a01b0319166001600160a01b0392909216919091179055565b61169a611fb4565b6001600160a01b03166116ab611750565b6001600160a01b031614611706576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b6001600160a01b038216600090815260696020908152604080832084845290915290205460ff165b92915050565b6065818154811061179a57fe5b60009182526020909120600590910201805460018201546002830154600384015460049094015492945090926001600160a01b039091169160ff1685565b606f5460ff1681565b600054610100900460ff16806117fa57506117fa612011565b80611808575060005460ff16155b6118435760405162461bcd60e51b815260040180806020018281038252602e8152602001806123bc602e913960400191505060405180910390fd5b600054610100900460ff1615801561186e576000805460ff1961ff0019909116610100171660011790555b611876612022565b606b80546001600160a01b03808b166001600160a01b031992831617909255606c899055606d805460ff808b1660ff1992831617909255606e899055606f80548886166101000274ffffffffffffffffffffffffffffffffffffffff0019948b1691909316179290921617905560708054928516929091169190911790558015611906576000805461ff00191690555b5050505050505050565b606f5461010090046001600160a01b03163314611974576040805162461bcd60e51b815260206004820152601f60248201527f41756374696f6e48616e646c65723a204e6f7420666565546f53657474657200604482015290519081900360640190fd5b606f80546001600160a01b039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b606a6020526000908152604090205481565b606e5481565b606b546001600160a01b031681565b606860209081526000928352604080842090915290825290205481565b6001600160a01b0382166000908152606a6020526040902054611a415760405162461bcd60e51b815260040180806020018281038252602f81526020018061240c602f913960400191505060405180910390fd5b6000611acf836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a7f57600080fd5b505afa158015611a93573d6000803e3d6000fd5b505050506040513d6020811015611aa957600080fd5b50516001600160a01b0385166000908152606a602052604090205461153b908590611fb8565b9050826001600160a01b03166379cc679033846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015611b2857600080fd5b505af1158015611b3c573d6000803e3d6000fd5b5050506001600160a01b0384166000908152606a6020526040902054611b63915082611eba565b6001600160a01b0384166000908152606a6020526040808220929092559051606090339084908481818185875af1925050503d8060008114611bc1576040519150601f19603f3d011682016040523d82523d6000602084013e611bc6565b606091505b509150915081611c075760405162461bcd60e51b81526004018080602001828103825260248152602001806122dd6024913960400191505060405180910390fd5b5050505050565b611c16611fb4565b6001600160a01b0316611c27611750565b6001600160a01b031614611c82576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611cc75760405162461bcd60e51b81526004018080602001828103825260268152602001806123016026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b606f5461010090046001600160a01b03163314611d87576040805162461bcd60e51b815260206004820152601f60248201527f41756374696f6e48616e646c65723a204e6f7420666565546f53657474657200604482015290519081900360640190fd5b6001600160a01b038116611dcc5760405162461bcd60e51b815260040180806020018281038252603281526020018061249a6032913960400191505060405180910390fd5b607080546001600160a01b0319166001600160a01b0392909216919091179055565b4290565b600082820183811015611e4c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000808211611ea9576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611eb257fe5b049392505050565b600082821115611f11576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6070546040516000916060916001600160a01b039091169084908481818185875af1925050503d8060008114611f69576040519150601f19603f3d011682016040523d82523d6000602084013e611f6e565b606091505b509150915081611faf5760405162461bcd60e51b81526004018080602001828103825260248152602001806122dd6024913960400191505060405180910390fd5b505050565b3390565b600082611fc757506000611787565b82820282848281611fd457fe5b0414611e4c5760405162461bcd60e51b81526004018080602001828103825260218152602001806124796021913960400191505060405180910390fd5b600061201c306120d4565b15905090565b600054610100900460ff168061203b575061203b612011565b80612049575060005460ff16155b6120845760405162461bcd60e51b815260040180806020018281038252602e8152602001806123bc602e913960400191505060405180910390fd5b600054610100900460ff161580156120af576000805460ff1961ff0019909116610100171660011790555b6120b76120da565b6120bf61217a565b80156120d1576000805461ff00191690555b50565b3b151590565b600054610100900460ff16806120f357506120f3612011565b80612101575060005460ff16155b61213c5760405162461bcd60e51b815260040180806020018281038252602e8152602001806123bc602e913960400191505060405180910390fd5b600054610100900460ff161580156120bf576000805460ff1961ff00199091166101001716600117905580156120d1576000805461ff001916905550565b600054610100900460ff16806121935750612193612011565b806121a1575060005460ff16155b6121dc5760405162461bcd60e51b815260040180806020018281038252602e8152602001806123bc602e913960400191505060405180910390fd5b600054610100900460ff16158015612207576000805460ff1961ff0019909116610100171660011790555b6000612211611fb4565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156120d1576000805461ff001916905550565b60408051808201909152600080825260208201529056fe41756374696f6e48616e646c65723a204f6e6c792077696e6e65722063616e20636c61696d41756374696f6e48616e646c65723a2075546f6b656e20636f6e7472616374206d7573742062652076616c696441756374696f6e48616e646c65723a204661696c656420746f2073656e642045746865724f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737341756374696f6e48616e646c65723a2041756374696f6e206973206e6f74206f76657241756374696f6e48616e646c65723a20596f75206861766520616e206163746976652062696441756374696f6e48616e646c65723a204e465420696e646578206d75737420657869737441756374696f6e48616e646c65723a20436f6c6c6563742062696420726566756e64206669727374496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656441756374696f6e48616e646c65723a20496e76616c696420706172616d657465727341756374696f6e48616e646c65723a204e6f207661756c742062616c616e636520746f2072656465656d2066726f6d41756374696f6e48616e646c65723a205374617274696e6720626964206d75737420626520686967686572207468616e2074726967676572207072696365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7741756374696f6e48616e646c65723a2046656520616464726573732063616e6e6f74206265207a65726f206164647265737341756374696f6e48616e646c65723a2043616e206e6f7420626964206f6e20696e6163746976652075546f6b656e41756374696f6e48616e646c65723a20546f70206269646465722063616e206e6f7420756e62696441756374696f6e48616e646c65723a2041756374696f6e20666f72204e465420656e64656441756374696f6e48616e646c65723a204e465420616c7265616479206f6e2061756374696f6ea26469706673582212206c2f6c3b20e33db00ff520839dac602ce052e9d987df6d26577f622b6c3a944064736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c8063715018a6116100ec578063afb3e63e1161008a578063eba39dab11610064578063eba39dab1461061a578063efe114cf14610653578063f2fde38b1461068c578063f46901ed146106bf576101b7565b8063afb3e63e146105bd578063bceb4bdb146105f0578063c45a015514610605576101b7565b8063957a867c116100c6578063957a867c146104b45780639a36f932146105135780639dd886cf14610528578063a2e74af61461058a576101b7565b8063715018a6146104515780638da5cb5b14610466578063920605f51461047b576101b7565b80632788aeb211610159578063379607f511610133578063379607f51461038a5780634423c5f1146103b4578063454a2ab3146104015780635bb478081461041e576101b7565b80632788aeb2146102f9578063325c25a21461033257806334db264b14610347576101b7565b80630e4cfe97116101955780630e4cfe97146102305780630f9e39bf1461025a5780630fb5a6b4146102855780631e6871a9146102ac576101b7565b8063017e7e58146101bc57806302923878146101ed578063094b74151461021b575b600080fd5b3480156101c857600080fd5b506101d16106f2565b604080516001600160a01b039092168252519081900360200190f35b6102196004803603604081101561020357600080fd5b506001600160a01b038135169060200135610701565b005b34801561022757600080fd5b506101d1610cb2565b34801561023c57600080fd5b506102196004803603602081101561025357600080fd5b5035610cc6565b34801561026657600080fd5b5061026f610e84565b6040805160ff9092168252519081900360200190f35b34801561029157600080fd5b5061029a610e8d565b60408051918252519081900360200190f35b3480156102b857600080fd5b506102e5600480360360408110156102cf57600080fd5b506001600160a01b038135169060200135610e93565b604080519115158252519081900360200190f35b34801561030557600080fd5b5061029a6004803603604081101561031c57600080fd5b50803590602001356001600160a01b0316610eb3565b34801561033e57600080fd5b5061029a610ed0565b34801561035357600080fd5b506102196004803603608081101561036a57600080fd5b5080359060ff602082013581169160408101359160609091013516610ed6565b34801561039657600080fd5b50610219600480360360208110156103ad57600080fd5b5035610fe1565b3480156103c057600080fd5b506103de600480360360208110156103d757600080fd5b503561125f565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6102196004803603602081101561041757600080fd5b5035611284565b34801561042a57600080fd5b506102196004803603602081101561044157600080fd5b50356001600160a01b03166115fc565b34801561045d57600080fd5b50610219611692565b34801561047257600080fd5b506101d1611750565b34801561048757600080fd5b506102e56004803603604081101561049e57600080fd5b506001600160a01b03813516906020013561175f565b3480156104c057600080fd5b506104de600480360360208110156104d757600080fd5b503561178d565b6040805195865260208601949094526001600160a01b0390921684840152606084015215156080830152519081900360a00190f35b34801561051f57600080fd5b5061026f6117d8565b34801561053457600080fd5b50610219600480360360e081101561054b57600080fd5b506001600160a01b03813581169160208101359160ff604083013581169260608101359260808201359092169160a082013581169160c00135166117e1565b34801561059657600080fd5b50610219600480360360208110156105ad57600080fd5b50356001600160a01b0316611910565b3480156105c957600080fd5b5061029a600480360360208110156105e057600080fd5b50356001600160a01b03166119a9565b3480156105fc57600080fd5b5061029a6119bb565b34801561061157600080fd5b506101d16119c1565b34801561062657600080fd5b5061029a6004803603604081101561063d57600080fd5b506001600160a01b0381351690602001356119d0565b34801561065f57600080fd5b506102196004803603604081101561067657600080fd5b506001600160a01b0381351690602001356119ed565b34801561069857600080fd5b50610219600480360360208110156106af57600080fd5b50356001600160a01b0316611c0e565b3480156106cb57600080fd5b50610219600480360360208110156106e257600080fd5b50356001600160a01b0316611d23565b6070546001600160a01b031681565b606b54604080517f25b26df60000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152915191909216916325b26df6916024808301926020929190829003018186803b15801561076757600080fd5b505afa15801561077b573d6000803e3d6000fd5b505050506040513d602081101561079157600080fd5b50511515806108385750606b54604080517f3c402de90000000000000000000000000000000000000000000000000000000081526000600482015290516001600160a01b03808616931691633c402de9916024808301926020929190829003018186803b15801561080157600080fd5b505afa158015610815573d6000803e3d6000fd5b505050506040513d602081101561082b57600080fd5b50516001600160a01b0316145b6108735760405162461bcd60e51b815260040180806020018281038252602d8152602001806122b0602d913960400191505060405180910390fd5b816001600160a01b03166302fb0c5e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ac57600080fd5b505afa1580156108c0573d6000803e3d6000fd5b505050506040513d60208110156108d657600080fd5b50516109135760405162461bcd60e51b815260040180806020018281038252602e8152602001806124cc602e913960400191505060405180910390fd5b600080836001600160a01b031663265aa621846040518263ffffffff1660e01b81526004018082815260200191505060806040518083038186803b15801561095a57600080fd5b505afa15801561096e573d6000803e3d6000fd5b505050506040513d608081101561098457600080fd5b50805160609091015190925090506001600160a01b0382166109d75760405162461bcd60e51b81526004018080602001828103825260248152602001806123706024913960400191505060405180910390fd5b34811115610a165760405162461bcd60e51b815260040180806020018281038252603e81526020018061243b603e913960400191505060405180910390fd5b6001600160a01b038416600090815260696020908152604080832086845290915290205460ff1615610a795760405162461bcd60e51b81526004018080602001828103825260268152602001806125476026913960400191505060405180910390fd5b6001600160a01b03841660009081526069602090815260408083208684529091528120805460ff19166001179055606554606c54909190610ac290610abc611dee565b90611df2565b905060656040518060a00160405280610ad9611dee565b815260208082018590526001600160a01b038a8116604080850182905260608086018d905260006080968701819052885460018082018b55998252868220895160059092020190815588870151998101999099558783015160028a0180546001600160a01b0319169190961617909455860151600388015594909301516004909501805460ff1916951515959095179094559083526068815281832088845290528120839055606f54610b9090349060ff16611e53565b9050610bbe610b9f3483611eba565b6001600160a01b0389166000908152606a602052604090205490611df2565b6001600160a01b038881166000908152606a60209081526040808320949094558351808501855233815234818301908152888452606690925293909120925183546001600160a01b031916921691909117825551600190910155610c2181611f17565b81876001600160a01b0316847f05f9bf100dd0ca9f37f08e0526690286d357ed7d6c5a4ac29730440b6e2dfd6289610c57611dee565b6040805192835260208301919091528051918290030190a46040805134815290518391339186917f77689ebf788c0f9d9e045fa81e22903cc7a1e34686c3fa4874c9a6a4d8a239f5919081900360200190a450505050505050565b606f5461010090046001600160a01b031681565b610cce612273565b50600081815260666020908152604091829020825180840190935280546001600160a01b031680845260019091015491830191909152331415610d425760405162461bcd60e51b81526004018080602001828103825260288152602001806124fa6028913960400191505060405180910390fd5b600082815260676020908152604080832033845290915290205480610dae576040805162461bcd60e51b815260206004820152601c60248201527f41756374696f6e48616e646c65723a204e6f2062696420666f756e6400000000604482015290519081900360640190fd5b6000838152606760209081526040808320338085529252808320839055516060919084908481818185875af1925050503d8060008114610e0a576040519150601f19603f3d011682016040523d82523d6000602084013e610e0f565b606091505b509150915081610e505760405162461bcd60e51b81526004018080602001828103825260248152602001806122dd6024913960400191505060405180910390fd5b604051339086907ffb280d892235c44edc6a8f273938a4f3ad3b134cc20ff8b50d5ee2e13a1d27a290600090a35050505050565b606d5460ff1681565b606c5481565b606960209081526000928352604080842090915290825290205460ff1681565b606760209081526000928352604080842090915290825290205481565b60655490565b610ede611fb4565b6001600160a01b0316610eef611750565b6001600160a01b031614610f4a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600084118015610f5d575060648360ff16115b8015610f695750600082115b8015610f78575060008160ff16115b610fb35760405162461bcd60e51b81526004018080602001828103825260228152602001806123ea6022913960400191505060405180910390fd5b606c93909355606d805460ff93841660ff1991821617909155606e91909155606f8054929093169116179055565b600060658281548110610ff057fe5b90600052602060002090600502019050806001015461100d611dee565b116110495760405162461bcd60e51b81526004018080602001828103825260238152602001806123276023913960400191505060405180910390fd5b600481015460ff16156110a3576040805162461bcd60e51b815260206004820152601f60248201527f41756374696f6e48616e646c65723a20416c726561647920636c61696d656400604482015290519081900360640190fd5b6110ab612273565b50600082815260666020908152604091829020825180840190935280546001600160a01b031680845260019091015491830191909152331461111e5760405162461bcd60e51b815260040180806020018281038252602581526020018061228b6025913960400191505060405180910390fd5b6004808301805460ff19166001179055600283015460038401548351604080517f62432b58000000000000000000000000000000000000000000000000000000008152948501929092526001600160a01b03908116602485015290519116916362432b589160448083019260209291908290030181600087803b1580156111a457600080fd5b505af11580156111b8573d6000803e3d6000fd5b505050506040513d60208110156111ce57600080fd5b5051611221576040805162461bcd60e51b815260206004820152601c60248201527f41756374696f6e48616e646c65723a20436c61696d206661696c656400000000604482015290519081900360640190fd5b80516040516001600160a01b039091169084907f6c31918c2dabe0275b23bef69f1a9e93053553a1e9fc048dde2389137628a8dd90600090a3505050565b606660205260009081526040902080546001909101546001600160a01b039091169082565b60006065828154811061129357fe5b9060005260206000209060050201905080600101546112b0611dee565b106112ec5760405162461bcd60e51b81526004018080602001828103825260258152602001806125226025913960400191505060405180910390fd5b8060020160009054906101000a90046001600160a01b03166001600160a01b03166302fb0c5e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561133c57600080fd5b505afa158015611350573d6000803e3d6000fd5b505050506040513d602081101561136657600080fd5b50516113a35760405162461bcd60e51b815260040180806020018281038252602e8152602001806124cc602e913960400191505060405180910390fd5b600082815260666020526040902080546001600160a01b03163314156113fa5760405162461bcd60e51b815260040180806020018281038252602681526020018061234a6026913960400191505060405180910390fd5b611405346064611fb8565b606d5460018301546114199160ff16611fb8565b111561146c576040805162461bcd60e51b815260206004820152601b60248201527f41756374696f6e48616e646c65723a2042696420746f6f206c6f770000000000604482015290519081900360640190fd5b6000838152606760209081526040808320338452909152902054156114c25760405162461bcd60e51b81526004018080602001828103825260288152602001806123946028913960400191505060405180910390fd5b606e5460018301546114d391611eba565b6114db611dee565b11156114f857606e5460018301546114f291611df2565b60018301555b6001810154600084815260676020908152604080832085546001600160a01b031684529091528120829055606f5490916115419160ff169061153b903490611eba565b90611e53565b600183015460028501546001600160a01b03166000908152606a602052604090205491925061157e91839161157891829034611df2565b90611eba565b60028401546001600160a01b03166000908152606a602052604090205581546001600160a01b031916331782553460018301556115ba81611f17565b6001830154604080513481529051339187917f77689ebf788c0f9d9e045fa81e22903cc7a1e34686c3fa4874c9a6a4d8a239f59181900360200190a450505050565b611604611fb4565b6001600160a01b0316611615611750565b6001600160a01b031614611670576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606b80546001600160a01b0319166001600160a01b0392909216919091179055565b61169a611fb4565b6001600160a01b03166116ab611750565b6001600160a01b031614611706576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b6001600160a01b038216600090815260696020908152604080832084845290915290205460ff165b92915050565b6065818154811061179a57fe5b60009182526020909120600590910201805460018201546002830154600384015460049094015492945090926001600160a01b039091169160ff1685565b606f5460ff1681565b600054610100900460ff16806117fa57506117fa612011565b80611808575060005460ff16155b6118435760405162461bcd60e51b815260040180806020018281038252602e8152602001806123bc602e913960400191505060405180910390fd5b600054610100900460ff1615801561186e576000805460ff1961ff0019909116610100171660011790555b611876612022565b606b80546001600160a01b03808b166001600160a01b031992831617909255606c899055606d805460ff808b1660ff1992831617909255606e899055606f80548886166101000274ffffffffffffffffffffffffffffffffffffffff0019948b1691909316179290921617905560708054928516929091169190911790558015611906576000805461ff00191690555b5050505050505050565b606f5461010090046001600160a01b03163314611974576040805162461bcd60e51b815260206004820152601f60248201527f41756374696f6e48616e646c65723a204e6f7420666565546f53657474657200604482015290519081900360640190fd5b606f80546001600160a01b039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b606a6020526000908152604090205481565b606e5481565b606b546001600160a01b031681565b606860209081526000928352604080842090915290825290205481565b6001600160a01b0382166000908152606a6020526040902054611a415760405162461bcd60e51b815260040180806020018281038252602f81526020018061240c602f913960400191505060405180910390fd5b6000611acf836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a7f57600080fd5b505afa158015611a93573d6000803e3d6000fd5b505050506040513d6020811015611aa957600080fd5b50516001600160a01b0385166000908152606a602052604090205461153b908590611fb8565b9050826001600160a01b03166379cc679033846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015611b2857600080fd5b505af1158015611b3c573d6000803e3d6000fd5b5050506001600160a01b0384166000908152606a6020526040902054611b63915082611eba565b6001600160a01b0384166000908152606a6020526040808220929092559051606090339084908481818185875af1925050503d8060008114611bc1576040519150601f19603f3d011682016040523d82523d6000602084013e611bc6565b606091505b509150915081611c075760405162461bcd60e51b81526004018080602001828103825260248152602001806122dd6024913960400191505060405180910390fd5b5050505050565b611c16611fb4565b6001600160a01b0316611c27611750565b6001600160a01b031614611c82576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611cc75760405162461bcd60e51b81526004018080602001828103825260268152602001806123016026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b606f5461010090046001600160a01b03163314611d87576040805162461bcd60e51b815260206004820152601f60248201527f41756374696f6e48616e646c65723a204e6f7420666565546f53657474657200604482015290519081900360640190fd5b6001600160a01b038116611dcc5760405162461bcd60e51b815260040180806020018281038252603281526020018061249a6032913960400191505060405180910390fd5b607080546001600160a01b0319166001600160a01b0392909216919091179055565b4290565b600082820183811015611e4c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000808211611ea9576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611eb257fe5b049392505050565b600082821115611f11576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6070546040516000916060916001600160a01b039091169084908481818185875af1925050503d8060008114611f69576040519150601f19603f3d011682016040523d82523d6000602084013e611f6e565b606091505b509150915081611faf5760405162461bcd60e51b81526004018080602001828103825260248152602001806122dd6024913960400191505060405180910390fd5b505050565b3390565b600082611fc757506000611787565b82820282848281611fd457fe5b0414611e4c5760405162461bcd60e51b81526004018080602001828103825260218152602001806124796021913960400191505060405180910390fd5b600061201c306120d4565b15905090565b600054610100900460ff168061203b575061203b612011565b80612049575060005460ff16155b6120845760405162461bcd60e51b815260040180806020018281038252602e8152602001806123bc602e913960400191505060405180910390fd5b600054610100900460ff161580156120af576000805460ff1961ff0019909116610100171660011790555b6120b76120da565b6120bf61217a565b80156120d1576000805461ff00191690555b50565b3b151590565b600054610100900460ff16806120f357506120f3612011565b80612101575060005460ff16155b61213c5760405162461bcd60e51b815260040180806020018281038252602e8152602001806123bc602e913960400191505060405180910390fd5b600054610100900460ff161580156120bf576000805460ff1961ff00199091166101001716600117905580156120d1576000805461ff001916905550565b600054610100900460ff16806121935750612193612011565b806121a1575060005460ff16155b6121dc5760405162461bcd60e51b815260040180806020018281038252602e8152602001806123bc602e913960400191505060405180910390fd5b600054610100900460ff16158015612207576000805460ff1961ff0019909116610100171660011790555b6000612211611fb4565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156120d1576000805461ff001916905550565b60408051808201909152600080825260208201529056fe41756374696f6e48616e646c65723a204f6e6c792077696e6e65722063616e20636c61696d41756374696f6e48616e646c65723a2075546f6b656e20636f6e7472616374206d7573742062652076616c696441756374696f6e48616e646c65723a204661696c656420746f2073656e642045746865724f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737341756374696f6e48616e646c65723a2041756374696f6e206973206e6f74206f76657241756374696f6e48616e646c65723a20596f75206861766520616e206163746976652062696441756374696f6e48616e646c65723a204e465420696e646578206d75737420657869737441756374696f6e48616e646c65723a20436f6c6c6563742062696420726566756e64206669727374496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656441756374696f6e48616e646c65723a20496e76616c696420706172616d657465727341756374696f6e48616e646c65723a204e6f207661756c742062616c616e636520746f2072656465656d2066726f6d41756374696f6e48616e646c65723a205374617274696e6720626964206d75737420626520686967686572207468616e2074726967676572207072696365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7741756374696f6e48616e646c65723a2046656520616464726573732063616e6e6f74206265207a65726f206164647265737341756374696f6e48616e646c65723a2043616e206e6f7420626964206f6e20696e6163746976652075546f6b656e41756374696f6e48616e646c65723a20546f70206269646465722063616e206e6f7420756e62696441756374696f6e48616e646c65723a2041756374696f6e20666f72204e465420656e64656441756374696f6e48616e646c65723a204e465420616c7265616479206f6e2061756374696f6ea26469706673582212206c2f6c3b20e33db00ff520839dac602ce052e9d987df6d26577f622b6c3a944064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 807,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 810,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2393,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8671,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "auctionInfo",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_struct(AuctionInfo)8663_storage)dyn_storage"
      },
      {
        "astId": 8675,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "bids",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint256,t_struct(Bid)8668_storage)"
      },
      {
        "astId": 8681,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "bidRefunds",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8687,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "auctionIndex",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 8693,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "auctionStarted",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 8697,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "vaultBalances",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8699,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "factory",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
        "astId": 8701,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "duration",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 8703,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "minBidMultiplier",
        "offset": 0,
        "slot": "109",
        "type": "t_uint8"
      },
      {
        "astId": 8705,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "auctionExtension",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 8707,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "feeDivisor",
        "offset": 0,
        "slot": "111",
        "type": "t_uint8"
      },
      {
        "astId": 8709,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "feeToSetter",
        "offset": 1,
        "slot": "111",
        "type": "t_address"
      },
      {
        "astId": 8711,
        "contract": "contracts/AuctionHandler.sol:AuctionHandler",
        "label": "feeTo",
        "offset": 0,
        "slot": "112",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(AuctionInfo)8663_storage)dyn_storage": {
        "base": "t_struct(AuctionInfo)8663_storage",
        "encoding": "dynamic_array",
        "label": "struct AuctionHandler.AuctionInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Bid)8668_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AuctionHandler.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)8668_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AuctionInfo)8663_storage": {
        "encoding": "inplace",
        "label": "struct AuctionHandler.AuctionInfo",
        "members": [
          {
            "astId": 8654,
            "contract": "contracts/AuctionHandler.sol:AuctionHandler",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8656,
            "contract": "contracts/AuctionHandler.sol:AuctionHandler",
            "label": "endTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8658,
            "contract": "contracts/AuctionHandler.sol:AuctionHandler",
            "label": "uToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 8660,
            "contract": "contracts/AuctionHandler.sol:AuctionHandler",
            "label": "nftIndexForUToken",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8662,
            "contract": "contracts/AuctionHandler.sol:AuctionHandler",
            "label": "claimed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Bid)8668_storage": {
        "encoding": "inplace",
        "label": "struct AuctionHandler.Bid",
        "members": [
          {
            "astId": 8665,
            "contract": "contracts/AuctionHandler.sol:AuctionHandler",
            "label": "bidder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8667,
            "contract": "contracts/AuctionHandler.sol:AuctionHandler",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}